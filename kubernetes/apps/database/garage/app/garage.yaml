---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app garage
spec:
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 3
  interval: 15m
  timeout: 10m
  install:
    createNamespace: true
    replace: true
    remediation:
      retries: -1
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: -1
      strategy: rollback
  rollback:
    force: true
    cleanupOnFail: true
    recreate: true
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext: &podSecurityContext
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
    controllers:
      garage:
        enabled: true
        type: statefulset
        replicas: 3
        serviceAccount:
          name: garage
        pod:
          securityContext: *podSecurityContext
        containers:
          garage:
            image:
              repository: dxflrs/garage
              tag: v2.0.0@sha256:15b40e0dddd2e611aa746ff6f7c3bfe9f22735e4a2cc29e0abd89c268e9b79d9
              pullPolicy: IfNotPresent
            env:
              TZ: ${TIMEZONE}
              RPC_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: ${APP}-config
                    key: rpcSecret
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                memory: 1Gi
            probes:
              liveness: &probe
                enabled: true
                spec:
                  httpGet:
                    path: /health
                    port: 3903
                    initialDelaySeconds: 5
                    periodSeconds: 30
              readiness: *probe
            securityContext:
              <<: *podSecurityContext
              capabilities:
                drop:
                - ALL
        statefulset:
          podManagementPolicy: Parallel
          volumeClaimTemplates:
          - name: meta
            size: 7Gi
            storageClass: "longhorn-local"
            accessMode: ReadWriteOnce
            advancedMounts:
              garage:
              - path: /var/lib/garage/meta
          - name: data
            size: 64Gi
            storageClass: "longhorn-local"
            accessMode: ReadWriteOnce
            advancedMounts:
              garage:
              - path: /var/lib/garage/data
      garage-webui:
        enabled: true
        serviceAccount:
          name: garage
        forceRename: garage-webui
        pod:
          securityContext: *podSecurityContext
        containers:
          garage-webui:
            nameOverride: garage-webui
            image:
              repository: khairul169/garage-webui
              tag: latest@sha256:c931455c25bfbededa450cd7ec6f389ce52ad1bc861f8d0b93d00ced78e438dd
              pullPolicy: IfNotPresent
            env:
              TZ: ${TIMEZONE}
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi
            securityContext:
              <<: *podSecurityContext
              capabilities:
                drop:
                - ALL
    service:
      garage:
        controller: garage
        type: ClusterIP
        ports:
          s3-api:
            port: 3900
          rpc:
            port: 3901
          web-api:
            port: 3902
          admin:
            port: 3903
      garage-webui:
        controller: garage-webui
        type: ClusterIP
        ports:
          http:
            port: 3909
    persistence:
      config:
        enabled: true
        type: secret
        name: ${APP}-config
        globalMounts:
        - path: /etc/garage.toml
          subPath: garage.toml
    serviceAccount:
      garage: {}
    rbac:
      roles:
        garage:
          type: Role
          rules:
          - apiGroups: ["apiextensions.k8s.io"]
            resources: ["customresourcedefinitions"]
            verbs: ["get", "list", "watch", "create", "patch"]
          - apiGroups: ["deuxfleurs.fr"]
            resources: ["garagenodes"]
            verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      bindings:
        garage:
          type: RoleBinding
          subjects:
          - kind: ServiceAccount
            name: garage
            namespace: ${NAMESPACE}
          roleRef:
            kind: Role
            name: garage
    servicemonitor:
      enabled: true
      endpoints:
      - port: admin
        interval: 30s

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/refs/heads/main/traefik.io/ingressroute_v1alpha1.json
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: ${APP}-internal
  annotations:
    reloader.stakater.com/auto: "true"
    external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
    kubernetes.io/ingress.class: internal
spec:
  entryPoints:
  - websecure
  routes:
  - match: Host(`web.${CLUSTER_DOMAIN}`) || Host(`*.web.${CLUSTER_DOMAIN}`)
    kind: Rule
    services:
    - name: garage
      port: web-api
      passHostHeader: true
    middlewares:
    - name: internal-network
      namespace: network
  - match: Host(`s3.${CLUSTER_DOMAIN}`) || Host(`*.s3.${CLUSTER_DOMAIN}`)
    kind: Rule
    services:
    - name: garage
      port: s3-api
      passHostHeader: true
    middlewares:
    - name: internal-network
      namespace: network
  - match: Host(`garage.${CLUSTER_DOMAIN}`)
    kind: Rule
    services:
    - name: garage-webui
      port: http
      passHostHeader: true
    middlewares:
    - name: authenticated-user
      namespace: network
