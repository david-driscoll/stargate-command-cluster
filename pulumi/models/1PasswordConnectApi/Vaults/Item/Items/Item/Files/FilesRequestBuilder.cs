// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using OnePasswordConnectApi.Client.Models;
using OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults\{vaultUuid}\items\{itemUuid}\files
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FilesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the OnePasswordConnectApi.Client.vaults.item.items.item.files.item collection</summary>
        /// <param name="position">The UUID of the File to fetch</param>
        /// <returns>A <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder"/></returns>
        public global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("fileUuid", position);
                return new global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the OnePasswordConnectApi.Client.vaults.item.items.item.files.item collection</summary>
        /// <param name="position">The UUID of the File to fetch</param>
        /// <returns>A <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("fileUuid", position);
                return new global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.Item.WithFileUuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{vaultUuid}/items/{itemUuid}/files{?inline_files*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{vaultUuid}/items/{itemUuid}/files{?inline_files*}", rawUrl)
        {
        }
        /// <summary>
        /// Get all the files inside an Item
        /// </summary>
        /// <returns>A List&lt;global::OnePasswordConnectApi.Client.Models.FileObject&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 404 status code</exception>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 413 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::OnePasswordConnectApi.Client.Models.FileObject>?> GetAsync(Action<RequestConfiguration<global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::OnePasswordConnectApi.Client.Models.FileObject>> GetAsync(Action<RequestConfiguration<global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "404", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "413", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::OnePasswordConnectApi.Client.Models.FileObject>(requestInfo, global::OnePasswordConnectApi.Client.Models.FileObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Get all the files inside an Item
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get all the files inside an Item
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilesRequestBuilderGetQueryParameters 
        {
            /// <summary>Tells server to return the base64-encoded file contents in the response.</summary>
            [QueryParameter("inline_files")]
            public bool? InlineFiles { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::OnePasswordConnectApi.Client.Vaults.Item.Items.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
