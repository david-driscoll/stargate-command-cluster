// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Models;
namespace Tailscale.Client.Tailnet.Item.Acl.Preview
{
    /// <summary>
    /// Builds and executes requests for operations under \tailnet\{tailnet}\acl\preview
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PreviewRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PreviewRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl/preview?previewFor={previewFor}&type={type}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PreviewRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl/preview?previewFor={previewFor}&type={type}", rawUrl)
        {
        }
        /// <summary>
        /// When given a user or IP port to match against,returns the tailnet policy rules that apply to that resource,without saving the policy file to the server.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostResponse?> PostAsPreviewPostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostResponse> PostAsPreviewPostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// When given a user or IP port to match against,returns the tailnet policy rules that apply to that resource,without saving the policy file to the server.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsPreviewPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewResponse?> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewResponse> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// When given a user or IP port to match against,returns the tailnet policy rules that apply to that resource,without saving the policy file to the server.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewPostRequestBody body, Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// When given a user or IP port to match against,returns the tailnet policy rules that apply to that resource,without saving the policy file to the server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PreviewRequestBuilderPostQueryParameters 
        {
            /// <summary>- If `type` is `user`, provide the email of a valid user with registered machines.- If `type` is `ipport`, provide an IP address + port: `10.0.0.1:80`.The supplied policy file is queried with this parameter to determine which rules match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("previewFor")]
            public string? PreviewFor { get; set; }
#nullable restore
#else
            [QueryParameter("previewFor")]
            public string PreviewFor { get; set; }
#endif
            /// <summary>Specify for which type of resource (user or IP port) matching rules are to be fetched.Read about [previewing changes in the admin console](https://tailscale.com/kb/1018/#previewing-changes).OAuth Scope: `policy_file:read`.</summary>
            [Obsolete("This property is deprecated, use TypeAsPostTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>Specify for which type of resource (user or IP port) matching rules are to be fetched.Read about [previewing changes in the admin console](https://tailscale.com/kb/1018/#previewing-changes).OAuth Scope: `policy_file:read`.</summary>
            [QueryParameter("type")]
            public global::Tailscale.Client.Tailnet.Item.Acl.Preview.PostTypeQueryParameterType? TypeAsPostTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PreviewRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder.PreviewRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
