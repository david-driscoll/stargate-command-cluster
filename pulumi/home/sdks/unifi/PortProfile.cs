// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/portProfile:PortProfile")]
    public partial class PortProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable automatic negotiation of port speed and duplex settings. When enabled, this overrides manual speed and duplex settings. Recommended for most use cases. Defaults to `true`.
        /// </summary>
        [Output("autoneg")]
        public Output<bool?> Autoneg { get; private set; } = null!;

        /// <summary>
        /// 802.1X port-based network access control (PNAC) mode. Valid values are:
        ///   * `force_authorized` - Port allows all traffic, no authentication required (default)
        ///   * `force_unauthorized` - Port blocks all traffic regardless of authentication
        ///   * `auto` - Standard 802.1X authentication required before port access is granted
        ///   * `mac_based` - Authentication based on client MAC address, useful for devices that don't support 802.1X
        ///   * `multi_host` - Allows multiple devices after first successful authentication, common in VoIP phone setups
        /// 
        /// Use 'auto' for highest security, 'mac_based' for legacy devices, and 'multi_host' when daisy-chaining devices. Defaults to `force_authorized`.
        /// </summary>
        [Output("dot1xCtrl")]
        public Output<string?> Dot1xCtrl { get; private set; } = null!;

        /// <summary>
        /// The number of seconds before an inactive authenticated MAC address is removed when using MAC-based 802.1X control. Range: 0-65535 seconds. Defaults to `300`.
        /// </summary>
        [Output("dot1xIdleTimeout")]
        public Output<double?> Dot1xIdleTimeout { get; private set; } = null!;

        /// <summary>
        /// The maximum outbound bandwidth allowed on the port in kilobits per second. Range: 64-9999999 kbps. Only applied when egress_rate_limit_kbps_enabled is true.
        /// </summary>
        [Output("egressRateLimitKbps")]
        public Output<double?> EgressRateLimitKbps { get; private set; } = null!;

        /// <summary>
        /// Enable outbound bandwidth rate limiting on the port. When enabled, traffic will be limited to the rate specified in egress_rate_limit_kbps. Defaults to `false`.
        /// </summary>
        [Output("egressRateLimitKbpsEnabled")]
        public Output<bool?> EgressRateLimitKbpsEnabled { get; private set; } = null!;

        /// <summary>
        /// List of network IDs to exclude when forward is set to 'customize'. This allows you to prevent specific networks from being accessible on ports using this profile.
        /// </summary>
        [Output("excludedNetworkIds")]
        public Output<ImmutableArray<string>> ExcludedNetworkIds { get; private set; } = null!;

        /// <summary>
        /// VLAN forwarding mode for the port. Valid values are:
        ///   * `all` - Forward all VLANs (trunk port)
        ///   * `native` - Only forward untagged traffic (access port)
        ///   * `customize` - Forward selected VLANs (use with `excluded_network_ids`)
        ///   * `disabled` - Disable VLAN forwarding
        /// 
        /// Examples:
        ///   * Use 'all' for uplink ports or connections to VLAN-aware devices
        ///   * Use 'native' for end-user devices or simple network connections
        ///   * Use 'customize' to create a selective trunk port (e.g., for a server needing access to specific VLANs) Defaults to `native`.
        /// </summary>
        [Output("forward")]
        public Output<string?> Forward { get; private set; } = null!;

        /// <summary>
        /// Enable full-duplex mode when auto-negotiation is disabled. Full duplex allows simultaneous two-way communication. Defaults to `false`.
        /// </summary>
        [Output("fullDuplex")]
        public Output<bool?> FullDuplex { get; private set; } = null!;

        /// <summary>
        /// Enable port isolation. When enabled, devices connected to ports with this profile cannot communicate with each other, providing enhanced security. Defaults to `false`.
        /// </summary>
        [Output("isolation")]
        public Output<bool?> Isolation { get; private set; } = null!;

        /// <summary>
        /// Enable Link Layer Discovery Protocol-Media Endpoint Discovery (LLDP-MED). This allows for automatic discovery and configuration of devices like VoIP phones. Defaults to `true`.
        /// </summary>
        [Output("lldpmedEnabled")]
        public Output<bool?> LldpmedEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable LLDP-MED topology change notifications. When enabled:
        /// * Network devices will be notified of topology changes
        /// * Useful for VoIP phones and other LLDP-MED capable devices
        /// * Helps maintain accurate network topology information
        /// * Facilitates faster device configuration and provisioning
        /// </summary>
        [Output("lldpmedNotifyEnabled")]
        public Output<bool?> LldpmedNotifyEnabled { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the port profile. Examples:
        /// * 'AP-Trunk-Port' - For access point uplinks
        /// * 'VoIP-Phone-Port' - For VoIP phone connections
        /// * 'User-Access-Port' - For standard user connections
        /// * 'IoT-Device-Port' - For IoT device connections
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the network to use as the native (untagged) network on ports using this profile. This is typically used for:
        /// * Access ports where devices need untagged access
        /// * Trunk ports to specify the native VLAN
        /// * Management networks for network devices
        /// </summary>
        [Output("nativeNetworkconfId")]
        public Output<string?> NativeNetworkconfId { get; private set; } = null!;

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Output("opMode")]
        public Output<string?> OpMode { get; private set; } = null!;

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Output("poeMode")]
        public Output<string?> PoeMode { get; private set; } = null!;

        /// <summary>
        /// Enable MAC address-based port security. When enabled:
        /// * Only devices with specified MAC addresses can connect
        /// * Unauthorized devices will be blocked
        /// * Provides protection against unauthorized network access
        /// * Must be used with port_security_mac_address list Defaults to `false`.
        /// </summary>
        [Output("portSecurityEnabled")]
        public Output<bool?> PortSecurityEnabled { get; private set; } = null!;

        /// <summary>
        /// List of allowed MAC addresses when port security is enabled. Each address should be:
        /// * In standard format (e.g., 'aa:bb:cc:dd:ee:ff')
        /// * Unique per device
        /// * Verified to belong to authorized devices
        /// Only effective when port_security_enabled is true
        /// </summary>
        [Output("portSecurityMacAddresses")]
        public Output<ImmutableArray<string>> PortSecurityMacAddresses { get; private set; } = null!;

        /// <summary>
        /// Priority queue 1 level (0-100) for Quality of Service (QoS). Used for:
        /// * Low-priority background traffic
        /// * Bulk data transfers
        /// * Non-time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Output("priorityQueue1Level")]
        public Output<double?> PriorityQueue1Level { get; private set; } = null!;

        /// <summary>
        /// Priority queue 2 level (0-100) for Quality of Service (QoS). Used for:
        /// * Standard user traffic
        /// * Web browsing and email
        /// * General business applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Output("priorityQueue2Level")]
        public Output<double?> PriorityQueue2Level { get; private set; } = null!;

        /// <summary>
        /// Priority queue 3 level (0-100) for Quality of Service (QoS). Used for:
        /// * High-priority traffic
        /// * Voice and video conferencing
        /// * Time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Output("priorityQueue3Level")]
        public Output<double?> PriorityQueue3Level { get; private set; } = null!;

        /// <summary>
        /// Priority queue 4 level (0-100) for Quality of Service (QoS). Used for:
        /// * Highest priority traffic
        /// * Critical real-time applications
        /// * Emergency communications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Output("priorityQueue4Level")]
        public Output<double?> PriorityQueue4Level { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the port profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Port speed in Mbps when auto-negotiation is disabled. Common values:
        /// * 10 - 10 Mbps (legacy devices)
        /// * 100 - 100 Mbps (Fast Ethernet)
        /// * 1000 - 1 Gbps (Gigabit Ethernet)
        /// * 2500 - 2.5 Gbps (Multi-Gigabit)
        /// * 5000 - 5 Gbps (Multi-Gigabit)
        /// * 10000 - 10 Gbps (10 Gigabit)
        /// Only used when autoneg is false
        /// </summary>
        [Output("speed")]
        public Output<double?> Speed { get; private set; } = null!;

        /// <summary>
        /// Enable broadcast storm control. When enabled:
        /// * Limits broadcast traffic to prevent network flooding
        /// * Protects against broadcast storms
        /// * Helps maintain network stability
        /// Use with stormctrl_bcast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Output("stormctrlBcastEnabled")]
        public Output<bool?> StormctrlBcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlBcastLevel")]
        public Output<double?> StormctrlBcastLevel { get; private set; } = null!;

        /// <summary>
        /// Maximum broadcast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control broadcast traffic levels
        /// * Prevent network congestion
        /// * Balance between necessary broadcasts and network protection
        /// Only effective when `stormctrl_bcast_enabled` is true
        /// </summary>
        [Output("stormctrlBcastRate")]
        public Output<double?> StormctrlBcastRate { get; private set; } = null!;

        /// <summary>
        /// Enable multicast storm control. When enabled:
        /// * Limits multicast traffic to prevent network flooding
        /// * Important for networks with multicast applications
        /// * Helps maintain quality of service
        /// Use with `stormctrl_mcast_rate` to set threshold Defaults to `false`.
        /// </summary>
        [Output("stormctrlMcastEnabled")]
        public Output<bool?> StormctrlMcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlMcastLevel")]
        public Output<double?> StormctrlMcastLevel { get; private set; } = null!;

        /// <summary>
        /// Maximum multicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control multicast traffic levels
        /// * Ensure bandwidth for critical multicast services
        /// * Prevent multicast traffic from overwhelming the network
        /// Only effective when stormctrl_mcast_enabled is true
        /// </summary>
        [Output("stormctrlMcastRate")]
        public Output<double?> StormctrlMcastRate { get; private set; } = null!;

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Output("stormctrlType")]
        public Output<string?> StormctrlType { get; private set; } = null!;

        /// <summary>
        /// Enable unknown unicast storm control. When enabled:
        /// * Limits unknown unicast traffic to prevent flooding
        /// * Protects against MAC spoofing attacks
        /// * Helps maintain network performance
        /// Use with stormctrl_ucast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Output("stormctrlUcastEnabled")]
        public Output<bool?> StormctrlUcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlUcastLevel")]
        public Output<double?> StormctrlUcastLevel { get; private set; } = null!;

        /// <summary>
        /// Maximum unknown unicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control unknown unicast traffic levels
        /// * Prevent network saturation from unknown destinations
        /// * Balance security with network usability
        /// Only effective when stormctrl_ucast_enabled is true
        /// </summary>
        [Output("stormctrlUcastRate")]
        public Output<double?> StormctrlUcastRate { get; private set; } = null!;

        /// <summary>
        /// Spanning Tree Protocol (STP) configuration for the port. When enabled:
        /// * Prevents network loops in switch-to-switch connections
        /// * Provides automatic failover in redundant topologies
        /// * Helps maintain network stability
        /// 
        /// Best practices:
        /// * Enable on switch uplink ports
        /// * Enable on ports connecting to other switches
        /// * Can be disabled on end-device ports for faster initialization Defaults to `true`.
        /// </summary>
        [Output("stpPortMode")]
        public Output<bool?> StpPortMode { get; private set; } = null!;

        /// <summary>
        /// VLAN tagging behavior for the port. Valid values are:
        /// * `auto` - Automatically handle VLAN tags (recommended)
        ///     - Intelligently manages tagged and untagged traffic
        ///     - Best for most deployments
        /// * `block_all` - Block all VLAN tagged traffic
        ///     - Use for security-sensitive ports
        ///     - Prevents VLAN hopping attacks
        /// * `custom` - Custom VLAN configuration
        ///     - Manual control over VLAN behavior
        ///     - For specific VLAN requirements
        /// </summary>
        [Output("taggedVlanMgmt")]
        public Output<string?> TaggedVlanMgmt { get; private set; } = null!;

        /// <summary>
        /// The ID of the network to use for Voice over IP (VoIP) traffic. Used for:
        /// * Automatic VoIP VLAN configuration
        /// * Voice traffic prioritization
        /// * QoS settings for voice packets
        /// 
        /// Common scenarios:
        /// * IP phone deployments with separate voice VLAN
        /// * Unified communications systems
        /// * Converged voice/data networks
        /// 
        /// Works in conjunction with LLDP-MED for automatic phone provisioning.
        /// </summary>
        [Output("voiceNetworkconfId")]
        public Output<string?> VoiceNetworkconfId { get; private set; } = null!;


        /// <summary>
        /// Create a PortProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PortProfile(string name, PortProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/portProfile:PortProfile", name, args ?? new PortProfileArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private PortProfile(string name, Input<string> id, PortProfileState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/portProfile:PortProfile", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PortProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PortProfile Get(string name, Input<string> id, PortProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new PortProfile(name, id, state, options);
        }
    }

    public sealed class PortProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable automatic negotiation of port speed and duplex settings. When enabled, this overrides manual speed and duplex settings. Recommended for most use cases. Defaults to `true`.
        /// </summary>
        [Input("autoneg")]
        public Input<bool>? Autoneg { get; set; }

        /// <summary>
        /// 802.1X port-based network access control (PNAC) mode. Valid values are:
        ///   * `force_authorized` - Port allows all traffic, no authentication required (default)
        ///   * `force_unauthorized` - Port blocks all traffic regardless of authentication
        ///   * `auto` - Standard 802.1X authentication required before port access is granted
        ///   * `mac_based` - Authentication based on client MAC address, useful for devices that don't support 802.1X
        ///   * `multi_host` - Allows multiple devices after first successful authentication, common in VoIP phone setups
        /// 
        /// Use 'auto' for highest security, 'mac_based' for legacy devices, and 'multi_host' when daisy-chaining devices. Defaults to `force_authorized`.
        /// </summary>
        [Input("dot1xCtrl")]
        public Input<string>? Dot1xCtrl { get; set; }

        /// <summary>
        /// The number of seconds before an inactive authenticated MAC address is removed when using MAC-based 802.1X control. Range: 0-65535 seconds. Defaults to `300`.
        /// </summary>
        [Input("dot1xIdleTimeout")]
        public Input<double>? Dot1xIdleTimeout { get; set; }

        /// <summary>
        /// The maximum outbound bandwidth allowed on the port in kilobits per second. Range: 64-9999999 kbps. Only applied when egress_rate_limit_kbps_enabled is true.
        /// </summary>
        [Input("egressRateLimitKbps")]
        public Input<double>? EgressRateLimitKbps { get; set; }

        /// <summary>
        /// Enable outbound bandwidth rate limiting on the port. When enabled, traffic will be limited to the rate specified in egress_rate_limit_kbps. Defaults to `false`.
        /// </summary>
        [Input("egressRateLimitKbpsEnabled")]
        public Input<bool>? EgressRateLimitKbpsEnabled { get; set; }

        [Input("excludedNetworkIds")]
        private InputList<string>? _excludedNetworkIds;

        /// <summary>
        /// List of network IDs to exclude when forward is set to 'customize'. This allows you to prevent specific networks from being accessible on ports using this profile.
        /// </summary>
        public InputList<string> ExcludedNetworkIds
        {
            get => _excludedNetworkIds ?? (_excludedNetworkIds = new InputList<string>());
            set => _excludedNetworkIds = value;
        }

        /// <summary>
        /// VLAN forwarding mode for the port. Valid values are:
        ///   * `all` - Forward all VLANs (trunk port)
        ///   * `native` - Only forward untagged traffic (access port)
        ///   * `customize` - Forward selected VLANs (use with `excluded_network_ids`)
        ///   * `disabled` - Disable VLAN forwarding
        /// 
        /// Examples:
        ///   * Use 'all' for uplink ports or connections to VLAN-aware devices
        ///   * Use 'native' for end-user devices or simple network connections
        ///   * Use 'customize' to create a selective trunk port (e.g., for a server needing access to specific VLANs) Defaults to `native`.
        /// </summary>
        [Input("forward")]
        public Input<string>? Forward { get; set; }

        /// <summary>
        /// Enable full-duplex mode when auto-negotiation is disabled. Full duplex allows simultaneous two-way communication. Defaults to `false`.
        /// </summary>
        [Input("fullDuplex")]
        public Input<bool>? FullDuplex { get; set; }

        /// <summary>
        /// Enable port isolation. When enabled, devices connected to ports with this profile cannot communicate with each other, providing enhanced security. Defaults to `false`.
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// Enable Link Layer Discovery Protocol-Media Endpoint Discovery (LLDP-MED). This allows for automatic discovery and configuration of devices like VoIP phones. Defaults to `true`.
        /// </summary>
        [Input("lldpmedEnabled")]
        public Input<bool>? LldpmedEnabled { get; set; }

        /// <summary>
        /// Enable LLDP-MED topology change notifications. When enabled:
        /// * Network devices will be notified of topology changes
        /// * Useful for VoIP phones and other LLDP-MED capable devices
        /// * Helps maintain accurate network topology information
        /// * Facilitates faster device configuration and provisioning
        /// </summary>
        [Input("lldpmedNotifyEnabled")]
        public Input<bool>? LldpmedNotifyEnabled { get; set; }

        /// <summary>
        /// A descriptive name for the port profile. Examples:
        /// * 'AP-Trunk-Port' - For access point uplinks
        /// * 'VoIP-Phone-Port' - For VoIP phone connections
        /// * 'User-Access-Port' - For standard user connections
        /// * 'IoT-Device-Port' - For IoT device connections
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the network to use as the native (untagged) network on ports using this profile. This is typically used for:
        /// * Access ports where devices need untagged access
        /// * Trunk ports to specify the native VLAN
        /// * Management networks for network devices
        /// </summary>
        [Input("nativeNetworkconfId")]
        public Input<string>? NativeNetworkconfId { get; set; }

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Input("opMode")]
        public Input<string>? OpMode { get; set; }

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Input("poeMode")]
        public Input<string>? PoeMode { get; set; }

        /// <summary>
        /// Enable MAC address-based port security. When enabled:
        /// * Only devices with specified MAC addresses can connect
        /// * Unauthorized devices will be blocked
        /// * Provides protection against unauthorized network access
        /// * Must be used with port_security_mac_address list Defaults to `false`.
        /// </summary>
        [Input("portSecurityEnabled")]
        public Input<bool>? PortSecurityEnabled { get; set; }

        [Input("portSecurityMacAddresses")]
        private InputList<string>? _portSecurityMacAddresses;

        /// <summary>
        /// List of allowed MAC addresses when port security is enabled. Each address should be:
        /// * In standard format (e.g., 'aa:bb:cc:dd:ee:ff')
        /// * Unique per device
        /// * Verified to belong to authorized devices
        /// Only effective when port_security_enabled is true
        /// </summary>
        public InputList<string> PortSecurityMacAddresses
        {
            get => _portSecurityMacAddresses ?? (_portSecurityMacAddresses = new InputList<string>());
            set => _portSecurityMacAddresses = value;
        }

        /// <summary>
        /// Priority queue 1 level (0-100) for Quality of Service (QoS). Used for:
        /// * Low-priority background traffic
        /// * Bulk data transfers
        /// * Non-time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue1Level")]
        public Input<double>? PriorityQueue1Level { get; set; }

        /// <summary>
        /// Priority queue 2 level (0-100) for Quality of Service (QoS). Used for:
        /// * Standard user traffic
        /// * Web browsing and email
        /// * General business applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue2Level")]
        public Input<double>? PriorityQueue2Level { get; set; }

        /// <summary>
        /// Priority queue 3 level (0-100) for Quality of Service (QoS). Used for:
        /// * High-priority traffic
        /// * Voice and video conferencing
        /// * Time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue3Level")]
        public Input<double>? PriorityQueue3Level { get; set; }

        /// <summary>
        /// Priority queue 4 level (0-100) for Quality of Service (QoS). Used for:
        /// * Highest priority traffic
        /// * Critical real-time applications
        /// * Emergency communications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue4Level")]
        public Input<double>? PriorityQueue4Level { get; set; }

        /// <summary>
        /// The name of the UniFi site where the port profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Port speed in Mbps when auto-negotiation is disabled. Common values:
        /// * 10 - 10 Mbps (legacy devices)
        /// * 100 - 100 Mbps (Fast Ethernet)
        /// * 1000 - 1 Gbps (Gigabit Ethernet)
        /// * 2500 - 2.5 Gbps (Multi-Gigabit)
        /// * 5000 - 5 Gbps (Multi-Gigabit)
        /// * 10000 - 10 Gbps (10 Gigabit)
        /// Only used when autoneg is false
        /// </summary>
        [Input("speed")]
        public Input<double>? Speed { get; set; }

        /// <summary>
        /// Enable broadcast storm control. When enabled:
        /// * Limits broadcast traffic to prevent network flooding
        /// * Protects against broadcast storms
        /// * Helps maintain network stability
        /// Use with stormctrl_bcast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlBcastEnabled")]
        public Input<bool>? StormctrlBcastEnabled { get; set; }

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlBcastLevel")]
        public Input<double>? StormctrlBcastLevel { get; set; }

        /// <summary>
        /// Maximum broadcast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control broadcast traffic levels
        /// * Prevent network congestion
        /// * Balance between necessary broadcasts and network protection
        /// Only effective when `stormctrl_bcast_enabled` is true
        /// </summary>
        [Input("stormctrlBcastRate")]
        public Input<double>? StormctrlBcastRate { get; set; }

        /// <summary>
        /// Enable multicast storm control. When enabled:
        /// * Limits multicast traffic to prevent network flooding
        /// * Important for networks with multicast applications
        /// * Helps maintain quality of service
        /// Use with `stormctrl_mcast_rate` to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlMcastEnabled")]
        public Input<bool>? StormctrlMcastEnabled { get; set; }

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlMcastLevel")]
        public Input<double>? StormctrlMcastLevel { get; set; }

        /// <summary>
        /// Maximum multicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control multicast traffic levels
        /// * Ensure bandwidth for critical multicast services
        /// * Prevent multicast traffic from overwhelming the network
        /// Only effective when stormctrl_mcast_enabled is true
        /// </summary>
        [Input("stormctrlMcastRate")]
        public Input<double>? StormctrlMcastRate { get; set; }

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Input("stormctrlType")]
        public Input<string>? StormctrlType { get; set; }

        /// <summary>
        /// Enable unknown unicast storm control. When enabled:
        /// * Limits unknown unicast traffic to prevent flooding
        /// * Protects against MAC spoofing attacks
        /// * Helps maintain network performance
        /// Use with stormctrl_ucast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlUcastEnabled")]
        public Input<bool>? StormctrlUcastEnabled { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlUcastLevel")]
        public Input<double>? StormctrlUcastLevel { get; set; }

        /// <summary>
        /// Maximum unknown unicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control unknown unicast traffic levels
        /// * Prevent network saturation from unknown destinations
        /// * Balance security with network usability
        /// Only effective when stormctrl_ucast_enabled is true
        /// </summary>
        [Input("stormctrlUcastRate")]
        public Input<double>? StormctrlUcastRate { get; set; }

        /// <summary>
        /// Spanning Tree Protocol (STP) configuration for the port. When enabled:
        /// * Prevents network loops in switch-to-switch connections
        /// * Provides automatic failover in redundant topologies
        /// * Helps maintain network stability
        /// 
        /// Best practices:
        /// * Enable on switch uplink ports
        /// * Enable on ports connecting to other switches
        /// * Can be disabled on end-device ports for faster initialization Defaults to `true`.
        /// </summary>
        [Input("stpPortMode")]
        public Input<bool>? StpPortMode { get; set; }

        /// <summary>
        /// VLAN tagging behavior for the port. Valid values are:
        /// * `auto` - Automatically handle VLAN tags (recommended)
        ///     - Intelligently manages tagged and untagged traffic
        ///     - Best for most deployments
        /// * `block_all` - Block all VLAN tagged traffic
        ///     - Use for security-sensitive ports
        ///     - Prevents VLAN hopping attacks
        /// * `custom` - Custom VLAN configuration
        ///     - Manual control over VLAN behavior
        ///     - For specific VLAN requirements
        /// </summary>
        [Input("taggedVlanMgmt")]
        public Input<string>? TaggedVlanMgmt { get; set; }

        /// <summary>
        /// The ID of the network to use for Voice over IP (VoIP) traffic. Used for:
        /// * Automatic VoIP VLAN configuration
        /// * Voice traffic prioritization
        /// * QoS settings for voice packets
        /// 
        /// Common scenarios:
        /// * IP phone deployments with separate voice VLAN
        /// * Unified communications systems
        /// * Converged voice/data networks
        /// 
        /// Works in conjunction with LLDP-MED for automatic phone provisioning.
        /// </summary>
        [Input("voiceNetworkconfId")]
        public Input<string>? VoiceNetworkconfId { get; set; }

        public PortProfileArgs()
        {
        }
        public static new PortProfileArgs Empty => new PortProfileArgs();
    }

    public sealed class PortProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable automatic negotiation of port speed and duplex settings. When enabled, this overrides manual speed and duplex settings. Recommended for most use cases. Defaults to `true`.
        /// </summary>
        [Input("autoneg")]
        public Input<bool>? Autoneg { get; set; }

        /// <summary>
        /// 802.1X port-based network access control (PNAC) mode. Valid values are:
        ///   * `force_authorized` - Port allows all traffic, no authentication required (default)
        ///   * `force_unauthorized` - Port blocks all traffic regardless of authentication
        ///   * `auto` - Standard 802.1X authentication required before port access is granted
        ///   * `mac_based` - Authentication based on client MAC address, useful for devices that don't support 802.1X
        ///   * `multi_host` - Allows multiple devices after first successful authentication, common in VoIP phone setups
        /// 
        /// Use 'auto' for highest security, 'mac_based' for legacy devices, and 'multi_host' when daisy-chaining devices. Defaults to `force_authorized`.
        /// </summary>
        [Input("dot1xCtrl")]
        public Input<string>? Dot1xCtrl { get; set; }

        /// <summary>
        /// The number of seconds before an inactive authenticated MAC address is removed when using MAC-based 802.1X control. Range: 0-65535 seconds. Defaults to `300`.
        /// </summary>
        [Input("dot1xIdleTimeout")]
        public Input<double>? Dot1xIdleTimeout { get; set; }

        /// <summary>
        /// The maximum outbound bandwidth allowed on the port in kilobits per second. Range: 64-9999999 kbps. Only applied when egress_rate_limit_kbps_enabled is true.
        /// </summary>
        [Input("egressRateLimitKbps")]
        public Input<double>? EgressRateLimitKbps { get; set; }

        /// <summary>
        /// Enable outbound bandwidth rate limiting on the port. When enabled, traffic will be limited to the rate specified in egress_rate_limit_kbps. Defaults to `false`.
        /// </summary>
        [Input("egressRateLimitKbpsEnabled")]
        public Input<bool>? EgressRateLimitKbpsEnabled { get; set; }

        [Input("excludedNetworkIds")]
        private InputList<string>? _excludedNetworkIds;

        /// <summary>
        /// List of network IDs to exclude when forward is set to 'customize'. This allows you to prevent specific networks from being accessible on ports using this profile.
        /// </summary>
        public InputList<string> ExcludedNetworkIds
        {
            get => _excludedNetworkIds ?? (_excludedNetworkIds = new InputList<string>());
            set => _excludedNetworkIds = value;
        }

        /// <summary>
        /// VLAN forwarding mode for the port. Valid values are:
        ///   * `all` - Forward all VLANs (trunk port)
        ///   * `native` - Only forward untagged traffic (access port)
        ///   * `customize` - Forward selected VLANs (use with `excluded_network_ids`)
        ///   * `disabled` - Disable VLAN forwarding
        /// 
        /// Examples:
        ///   * Use 'all' for uplink ports or connections to VLAN-aware devices
        ///   * Use 'native' for end-user devices or simple network connections
        ///   * Use 'customize' to create a selective trunk port (e.g., for a server needing access to specific VLANs) Defaults to `native`.
        /// </summary>
        [Input("forward")]
        public Input<string>? Forward { get; set; }

        /// <summary>
        /// Enable full-duplex mode when auto-negotiation is disabled. Full duplex allows simultaneous two-way communication. Defaults to `false`.
        /// </summary>
        [Input("fullDuplex")]
        public Input<bool>? FullDuplex { get; set; }

        /// <summary>
        /// Enable port isolation. When enabled, devices connected to ports with this profile cannot communicate with each other, providing enhanced security. Defaults to `false`.
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// Enable Link Layer Discovery Protocol-Media Endpoint Discovery (LLDP-MED). This allows for automatic discovery and configuration of devices like VoIP phones. Defaults to `true`.
        /// </summary>
        [Input("lldpmedEnabled")]
        public Input<bool>? LldpmedEnabled { get; set; }

        /// <summary>
        /// Enable LLDP-MED topology change notifications. When enabled:
        /// * Network devices will be notified of topology changes
        /// * Useful for VoIP phones and other LLDP-MED capable devices
        /// * Helps maintain accurate network topology information
        /// * Facilitates faster device configuration and provisioning
        /// </summary>
        [Input("lldpmedNotifyEnabled")]
        public Input<bool>? LldpmedNotifyEnabled { get; set; }

        /// <summary>
        /// A descriptive name for the port profile. Examples:
        /// * 'AP-Trunk-Port' - For access point uplinks
        /// * 'VoIP-Phone-Port' - For VoIP phone connections
        /// * 'User-Access-Port' - For standard user connections
        /// * 'IoT-Device-Port' - For IoT device connections
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the network to use as the native (untagged) network on ports using this profile. This is typically used for:
        /// * Access ports where devices need untagged access
        /// * Trunk ports to specify the native VLAN
        /// * Management networks for network devices
        /// </summary>
        [Input("nativeNetworkconfId")]
        public Input<string>? NativeNetworkconfId { get; set; }

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Input("opMode")]
        public Input<string>? OpMode { get; set; }

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Input("poeMode")]
        public Input<string>? PoeMode { get; set; }

        /// <summary>
        /// Enable MAC address-based port security. When enabled:
        /// * Only devices with specified MAC addresses can connect
        /// * Unauthorized devices will be blocked
        /// * Provides protection against unauthorized network access
        /// * Must be used with port_security_mac_address list Defaults to `false`.
        /// </summary>
        [Input("portSecurityEnabled")]
        public Input<bool>? PortSecurityEnabled { get; set; }

        [Input("portSecurityMacAddresses")]
        private InputList<string>? _portSecurityMacAddresses;

        /// <summary>
        /// List of allowed MAC addresses when port security is enabled. Each address should be:
        /// * In standard format (e.g., 'aa:bb:cc:dd:ee:ff')
        /// * Unique per device
        /// * Verified to belong to authorized devices
        /// Only effective when port_security_enabled is true
        /// </summary>
        public InputList<string> PortSecurityMacAddresses
        {
            get => _portSecurityMacAddresses ?? (_portSecurityMacAddresses = new InputList<string>());
            set => _portSecurityMacAddresses = value;
        }

        /// <summary>
        /// Priority queue 1 level (0-100) for Quality of Service (QoS). Used for:
        /// * Low-priority background traffic
        /// * Bulk data transfers
        /// * Non-time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue1Level")]
        public Input<double>? PriorityQueue1Level { get; set; }

        /// <summary>
        /// Priority queue 2 level (0-100) for Quality of Service (QoS). Used for:
        /// * Standard user traffic
        /// * Web browsing and email
        /// * General business applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue2Level")]
        public Input<double>? PriorityQueue2Level { get; set; }

        /// <summary>
        /// Priority queue 3 level (0-100) for Quality of Service (QoS). Used for:
        /// * High-priority traffic
        /// * Voice and video conferencing
        /// * Time-sensitive applications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue3Level")]
        public Input<double>? PriorityQueue3Level { get; set; }

        /// <summary>
        /// Priority queue 4 level (0-100) for Quality of Service (QoS). Used for:
        /// * Highest priority traffic
        /// * Critical real-time applications
        /// * Emergency communications
        /// Higher values give more bandwidth to this queue
        /// </summary>
        [Input("priorityQueue4Level")]
        public Input<double>? PriorityQueue4Level { get; set; }

        /// <summary>
        /// The name of the UniFi site where the port profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Port speed in Mbps when auto-negotiation is disabled. Common values:
        /// * 10 - 10 Mbps (legacy devices)
        /// * 100 - 100 Mbps (Fast Ethernet)
        /// * 1000 - 1 Gbps (Gigabit Ethernet)
        /// * 2500 - 2.5 Gbps (Multi-Gigabit)
        /// * 5000 - 5 Gbps (Multi-Gigabit)
        /// * 10000 - 10 Gbps (10 Gigabit)
        /// Only used when autoneg is false
        /// </summary>
        [Input("speed")]
        public Input<double>? Speed { get; set; }

        /// <summary>
        /// Enable broadcast storm control. When enabled:
        /// * Limits broadcast traffic to prevent network flooding
        /// * Protects against broadcast storms
        /// * Helps maintain network stability
        /// Use with stormctrl_bcast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlBcastEnabled")]
        public Input<bool>? StormctrlBcastEnabled { get; set; }

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlBcastLevel")]
        public Input<double>? StormctrlBcastLevel { get; set; }

        /// <summary>
        /// Maximum broadcast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control broadcast traffic levels
        /// * Prevent network congestion
        /// * Balance between necessary broadcasts and network protection
        /// Only effective when `stormctrl_bcast_enabled` is true
        /// </summary>
        [Input("stormctrlBcastRate")]
        public Input<double>? StormctrlBcastRate { get; set; }

        /// <summary>
        /// Enable multicast storm control. When enabled:
        /// * Limits multicast traffic to prevent network flooding
        /// * Important for networks with multicast applications
        /// * Helps maintain quality of service
        /// Use with `stormctrl_mcast_rate` to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlMcastEnabled")]
        public Input<bool>? StormctrlMcastEnabled { get; set; }

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlMcastLevel")]
        public Input<double>? StormctrlMcastLevel { get; set; }

        /// <summary>
        /// Maximum multicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control multicast traffic levels
        /// * Ensure bandwidth for critical multicast services
        /// * Prevent multicast traffic from overwhelming the network
        /// Only effective when stormctrl_mcast_enabled is true
        /// </summary>
        [Input("stormctrlMcastRate")]
        public Input<double>? StormctrlMcastRate { get; set; }

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Input("stormctrlType")]
        public Input<string>? StormctrlType { get; set; }

        /// <summary>
        /// Enable unknown unicast storm control. When enabled:
        /// * Limits unknown unicast traffic to prevent flooding
        /// * Protects against MAC spoofing attacks
        /// * Helps maintain network performance
        /// Use with stormctrl_ucast_rate to set threshold Defaults to `false`.
        /// </summary>
        [Input("stormctrlUcastEnabled")]
        public Input<bool>? StormctrlUcastEnabled { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlUcastLevel")]
        public Input<double>? StormctrlUcastLevel { get; set; }

        /// <summary>
        /// Maximum unknown unicast traffic rate in packets per second (0 - 14880000). Used to:
        /// * Control unknown unicast traffic levels
        /// * Prevent network saturation from unknown destinations
        /// * Balance security with network usability
        /// Only effective when stormctrl_ucast_enabled is true
        /// </summary>
        [Input("stormctrlUcastRate")]
        public Input<double>? StormctrlUcastRate { get; set; }

        /// <summary>
        /// Spanning Tree Protocol (STP) configuration for the port. When enabled:
        /// * Prevents network loops in switch-to-switch connections
        /// * Provides automatic failover in redundant topologies
        /// * Helps maintain network stability
        /// 
        /// Best practices:
        /// * Enable on switch uplink ports
        /// * Enable on ports connecting to other switches
        /// * Can be disabled on end-device ports for faster initialization Defaults to `true`.
        /// </summary>
        [Input("stpPortMode")]
        public Input<bool>? StpPortMode { get; set; }

        /// <summary>
        /// VLAN tagging behavior for the port. Valid values are:
        /// * `auto` - Automatically handle VLAN tags (recommended)
        ///     - Intelligently manages tagged and untagged traffic
        ///     - Best for most deployments
        /// * `block_all` - Block all VLAN tagged traffic
        ///     - Use for security-sensitive ports
        ///     - Prevents VLAN hopping attacks
        /// * `custom` - Custom VLAN configuration
        ///     - Manual control over VLAN behavior
        ///     - For specific VLAN requirements
        /// </summary>
        [Input("taggedVlanMgmt")]
        public Input<string>? TaggedVlanMgmt { get; set; }

        /// <summary>
        /// The ID of the network to use for Voice over IP (VoIP) traffic. Used for:
        /// * Automatic VoIP VLAN configuration
        /// * Voice traffic prioritization
        /// * QoS settings for voice packets
        /// 
        /// Common scenarios:
        /// * IP phone deployments with separate voice VLAN
        /// * Unified communications systems
        /// * Converged voice/data networks
        /// 
        /// Works in conjunction with LLDP-MED for automatic phone provisioning.
        /// </summary>
        [Input("voiceNetworkconfId")]
        public Input<string>? VoiceNetworkconfId { get; set; }

        public PortProfileState()
        {
        }
        public static new PortProfileState Empty => new PortProfileState();
    }
}
