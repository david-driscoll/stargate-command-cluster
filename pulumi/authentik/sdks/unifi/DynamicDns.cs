// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/dynamicDns:DynamicDns")]
    public partial class DynamicDns : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The WAN interface to use for the dynamic DNS updates. Valid values are:
        ///   * `wan` - Primary WAN interface (default)
        ///   * `wan2` - Secondary WAN interface Defaults to `wan`.
        /// </summary>
        [Output("interface")]
        public Output<string?> Interface { get; private set; } = null!;

        /// <summary>
        /// The username or login for your DDNS provider account.
        /// </summary>
        [Output("login")]
        public Output<string?> Login { get; private set; } = null!;

        /// <summary>
        /// The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
        /// </summary>
        [Output("server")]
        public Output<string?> Server { get; private set; } = null!;

        /// <summary>
        /// The Dynamic DNS service provider. Common values include:
        ///   * `dyndns` - DynDNS service
        ///   * `noip` - No-IP service
        ///   * `duckdns` - Duck DNS service
        /// Check your UniFi controller for the complete list of supported providers.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;


        /// <summary>
        /// Create a DynamicDns resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DynamicDns(string name, DynamicDnsArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/dynamicDns:DynamicDns", name, args ?? new DynamicDnsArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private DynamicDns(string name, Input<string> id, DynamicDnsState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/dynamicDns:DynamicDns", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DynamicDns resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DynamicDns Get(string name, Input<string> id, DynamicDnsState? state = null, CustomResourceOptions? options = null)
        {
            return new DynamicDns(name, id, state, options);
        }
    }

    public sealed class DynamicDnsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// The WAN interface to use for the dynamic DNS updates. Valid values are:
        ///   * `wan` - Primary WAN interface (default)
        ///   * `wan2` - Secondary WAN interface Defaults to `wan`.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The username or login for your DDNS provider account.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// The Dynamic DNS service provider. Common values include:
        ///   * `dyndns` - DynDNS service
        ///   * `noip` - No-IP service
        ///   * `duckdns` - Duck DNS service
        /// Check your UniFi controller for the complete list of supported providers.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DynamicDnsArgs()
        {
        }
        public static new DynamicDnsArgs Empty => new DynamicDnsArgs();
    }

    public sealed class DynamicDnsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The WAN interface to use for the dynamic DNS updates. Valid values are:
        ///   * `wan` - Primary WAN interface (default)
        ///   * `wan2` - Secondary WAN interface Defaults to `wan`.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The username or login for your DDNS provider account.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// The Dynamic DNS service provider. Common values include:
        ///   * `dyndns` - DynDNS service
        ///   * `noip` - No-IP service
        ///   * `duckdns` - Duck DNS service
        /// Check your UniFi controller for the complete list of supported providers.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DynamicDnsState()
        {
        }
        public static new DynamicDnsState Empty => new DynamicDnsState();
    }
}
