// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// DoUpdate device invite is an invitation that shares a device with an externaluser (a user not in the device&apos;s tailnet).Each device invite has a unique ID that is used to identify the invitein API calls. You can find all device invite IDs for a particular deviceby [listing all device invites](#tag/deviceinvites/POST/device/{deviceId}/device-invites)for a device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceInvite : IAdditionalDataHolder, IParsable
    {
        /// <summary>`true` when the share invite has been accepted.</summary>
        public bool? Accepted { get; set; }
        /// <summary>Set when the invite has been accepted.It holds information about the user who accepted the share invite.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Tailscale.Client.Models.DeviceInvite_acceptedBy? AcceptedBy { get; set; }
#nullable restore
#else
        public global::Tailscale.Client.Models.DeviceInvite_acceptedBy AcceptedBy { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies whether the invited user is able to use thedevice as an exit node when the device is advertising as one.</summary>
        public bool? AllowExitNode { get; set; }
        /// <summary>The creation time of the invite.</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The ID of the device being shared.</summary>
        public double? DeviceId { get; set; }
        /// <summary>The email to which the invite was sent.If empty, the invite was not emailed to anyone,but the inviteUrl can be shared manually.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The unique identifier for the invite.Supply this value wherever {deviceInviteId} is indicated in the endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The link to accept the invite.Anyone with this link can accept the invite.It is not restricted to the person to which the invite was emailed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InviteUrl { get; set; }
#nullable restore
#else
        public string InviteUrl { get; set; }
#endif
        /// <summary>The last time the invite was attempted to be sent to Email.Only ever set if `email` is not empty.</summary>
        public DateTimeOffset? LastEmailSentAt { get; set; }
        /// <summary>Specifies whether this device invite can be acceptedmore than once.</summary>
        public bool? MultiUse { get; set; }
        /// <summary>The ID of the user who created the share invite.</summary>
        public double? SharerId { get; set; }
        /// <summary>The ID of the tailnet to which the shared device belongs.</summary>
        public double? TailnetId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.DeviceInvite"/> and sets the default values.
        /// </summary>
        public DeviceInvite()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.DeviceInvite"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.DeviceInvite CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.DeviceInvite();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accepted", n => { Accepted = n.GetBoolValue(); } },
                { "acceptedBy", n => { AcceptedBy = n.GetObjectValue<global::Tailscale.Client.Models.DeviceInvite_acceptedBy>(global::Tailscale.Client.Models.DeviceInvite_acceptedBy.CreateFromDiscriminatorValue); } },
                { "allowExitNode", n => { AllowExitNode = n.GetBoolValue(); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "deviceId", n => { DeviceId = n.GetDoubleValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "inviteUrl", n => { InviteUrl = n.GetStringValue(); } },
                { "lastEmailSentAt", n => { LastEmailSentAt = n.GetDateTimeOffsetValue(); } },
                { "multiUse", n => { MultiUse = n.GetBoolValue(); } },
                { "sharerId", n => { SharerId = n.GetDoubleValue(); } },
                { "tailnetId", n => { TailnetId = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accepted", Accepted);
            writer.WriteObjectValue<global::Tailscale.Client.Models.DeviceInvite_acceptedBy>("acceptedBy", AcceptedBy);
            writer.WriteBoolValue("allowExitNode", AllowExitNode);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteDoubleValue("deviceId", DeviceId);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("inviteUrl", InviteUrl);
            writer.WriteDateTimeOffsetValue("lastEmailSentAt", LastEmailSentAt);
            writer.WriteBoolValue("multiUse", MultiUse);
            writer.WriteDoubleValue("sharerId", SharerId);
            writer.WriteDoubleValue("tailnetId", TailnetId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
