// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    public static class GetGroups
    {
        public static Task<GetGroupsResult> InvokeAsync(GetGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupsResult>("authentik:index/getGroups:getGroups", args ?? new GetGroupsArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetGroupsResult> Invoke(GetGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsResult>("authentik:index/getGroups:getGroups", args ?? new GetGroupsInvokeArgs(), options.WithDefaults());

        public static Output<GetGroupsResult> Invoke(GetGroupsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsResult>("authentik:index/getGroups:getGroups", args ?? new GetGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public string? Attributes { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("includeUsers")]
        public bool? IncludeUsers { get; set; }

        [Input("isSuperuser")]
        public bool? IsSuperuser { get; set; }

        [Input("membersByPks")]
        private List<double>? _membersByPks;
        public List<double> MembersByPks
        {
            get => _membersByPks ?? (_membersByPks = new List<double>());
            set => _membersByPks = value;
        }

        [Input("membersByUsernames")]
        private List<string>? _membersByUsernames;
        public List<string> MembersByUsernames
        {
            get => _membersByUsernames ?? (_membersByUsernames = new List<string>());
            set => _membersByUsernames = value;
        }

        [Input("name")]
        public string? Name { get; set; }

        [Input("ordering")]
        public string? Ordering { get; set; }

        [Input("search")]
        public string? Search { get; set; }

        public GetGroupsArgs()
        {
        }
        public static new GetGroupsArgs Empty => new GetGroupsArgs();
    }

    public sealed class GetGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public Input<string>? Attributes { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("includeUsers")]
        public Input<bool>? IncludeUsers { get; set; }

        [Input("isSuperuser")]
        public Input<bool>? IsSuperuser { get; set; }

        [Input("membersByPks")]
        private InputList<double>? _membersByPks;
        public InputList<double> MembersByPks
        {
            get => _membersByPks ?? (_membersByPks = new InputList<double>());
            set => _membersByPks = value;
        }

        [Input("membersByUsernames")]
        private InputList<string>? _membersByUsernames;
        public InputList<string> MembersByUsernames
        {
            get => _membersByUsernames ?? (_membersByUsernames = new InputList<string>());
            set => _membersByUsernames = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ordering")]
        public Input<string>? Ordering { get; set; }

        [Input("search")]
        public Input<string>? Search { get; set; }

        public GetGroupsInvokeArgs()
        {
        }
        public static new GetGroupsInvokeArgs Empty => new GetGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupsResult
    {
        public readonly string? Attributes;
        public readonly ImmutableArray<Outputs.GetGroupsGroupResult> Groups;
        public readonly string Id;
        public readonly bool? IncludeUsers;
        public readonly bool? IsSuperuser;
        public readonly ImmutableArray<double> MembersByPks;
        public readonly ImmutableArray<string> MembersByUsernames;
        public readonly string? Name;
        public readonly string? Ordering;
        public readonly string? Search;

        [OutputConstructor]
        private GetGroupsResult(
            string? attributes,

            ImmutableArray<Outputs.GetGroupsGroupResult> groups,

            string id,

            bool? includeUsers,

            bool? isSuperuser,

            ImmutableArray<double> membersByPks,

            ImmutableArray<string> membersByUsernames,

            string? name,

            string? ordering,

            string? search)
        {
            Attributes = attributes;
            Groups = groups;
            Id = id;
            IncludeUsers = includeUsers;
            IsSuperuser = isSuperuser;
            MembersByPks = membersByPks;
            MembersByUsernames = membersByUsernames;
            Name = name;
            Ordering = ordering;
            Search = search;
        }
    }
}
