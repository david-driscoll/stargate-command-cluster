// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingRadius:SettingRadius")]
    public partial class SettingRadius : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including connection time, data usage, and other metrics. This information can be useful for billing, capacity planning, and security auditing. Defaults to `false`.
        /// </summary>
        [Output("accountingEnabled")]
        public Output<bool?> AccountingEnabled { get; private set; } = null!;

        /// <summary>
        /// The UDP port number for RADIUS accounting communications. The standard port is 1813. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1813`.
        /// </summary>
        [Output("accountingPort")]
        public Output<double?> AccountingPort { get; private set; } = null!;

        /// <summary>
        /// The UDP port number for RADIUS authentication communications. The standard port is 1812. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1812`.
        /// </summary>
        [Output("authPort")]
        public Output<double?> AuthPort { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the built-in RADIUS server. When disabled, no RADIUS authentication or accounting services will be provided, affecting any network services that rely on RADIUS (like WPA2-Enterprise networks). Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The interval (in seconds) at which the RADIUS server collects and updates statistics from connected clients. Default is 3600 seconds (1 hour). Lower values provide more frequent updates but increase server load. Defaults to `3600`.
        /// </summary>
        [Output("interimUpdateInterval")]
        public Output<double?> InterimUpdateInterval { get; private set; } = null!;

        /// <summary>
        /// The shared secret passphrase used to authenticate RADIUS clients (like wireless access points) with the RADIUS server. This should be a strong, random string known only to the server and its clients. Defaults to ``.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where these RADIUS settings should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Enable encrypted communication between the RADIUS server and clients using RADIUS tunneling. This adds an extra layer of security by protecting RADIUS attributes in transit. Defaults to `true`.
        /// </summary>
        [Output("tunneledReply")]
        public Output<bool?> TunneledReply { get; private set; } = null!;


        /// <summary>
        /// Create a SettingRadius resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingRadius(string name, SettingRadiusArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingRadius:SettingRadius", name, args ?? new SettingRadiusArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingRadius(string name, Input<string> id, SettingRadiusState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingRadius:SettingRadius", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingRadius resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingRadius Get(string name, Input<string> id, SettingRadiusState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingRadius(name, id, state, options);
        }
    }

    public sealed class SettingRadiusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including connection time, data usage, and other metrics. This information can be useful for billing, capacity planning, and security auditing. Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        /// <summary>
        /// The UDP port number for RADIUS accounting communications. The standard port is 1813. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1813`.
        /// </summary>
        [Input("accountingPort")]
        public Input<double>? AccountingPort { get; set; }

        /// <summary>
        /// The UDP port number for RADIUS authentication communications. The standard port is 1812. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1812`.
        /// </summary>
        [Input("authPort")]
        public Input<double>? AuthPort { get; set; }

        /// <summary>
        /// Enable or disable the built-in RADIUS server. When disabled, no RADIUS authentication or accounting services will be provided, affecting any network services that rely on RADIUS (like WPA2-Enterprise networks). Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The interval (in seconds) at which the RADIUS server collects and updates statistics from connected clients. Default is 3600 seconds (1 hour). Lower values provide more frequent updates but increase server load. Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<double>? InterimUpdateInterval { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The shared secret passphrase used to authenticate RADIUS clients (like wireless access points) with the RADIUS server. This should be a strong, random string known only to the server and its clients. Defaults to ``.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the UniFi site where these RADIUS settings should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Enable encrypted communication between the RADIUS server and clients using RADIUS tunneling. This adds an extra layer of security by protecting RADIUS attributes in transit. Defaults to `true`.
        /// </summary>
        [Input("tunneledReply")]
        public Input<bool>? TunneledReply { get; set; }

        public SettingRadiusArgs()
        {
        }
        public static new SettingRadiusArgs Empty => new SettingRadiusArgs();
    }

    public sealed class SettingRadiusState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including connection time, data usage, and other metrics. This information can be useful for billing, capacity planning, and security auditing. Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        /// <summary>
        /// The UDP port number for RADIUS accounting communications. The standard port is 1813. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1813`.
        /// </summary>
        [Input("accountingPort")]
        public Input<double>? AccountingPort { get; set; }

        /// <summary>
        /// The UDP port number for RADIUS authentication communications. The standard port is 1812. Only change this if you need to avoid port conflicts or match specific network requirements. Defaults to `1812`.
        /// </summary>
        [Input("authPort")]
        public Input<double>? AuthPort { get; set; }

        /// <summary>
        /// Enable or disable the built-in RADIUS server. When disabled, no RADIUS authentication or accounting services will be provided, affecting any network services that rely on RADIUS (like WPA2-Enterprise networks). Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The interval (in seconds) at which the RADIUS server collects and updates statistics from connected clients. Default is 3600 seconds (1 hour). Lower values provide more frequent updates but increase server load. Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<double>? InterimUpdateInterval { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The shared secret passphrase used to authenticate RADIUS clients (like wireless access points) with the RADIUS server. This should be a strong, random string known only to the server and its clients. Defaults to ``.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the UniFi site where these RADIUS settings should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Enable encrypted communication between the RADIUS server and clients using RADIUS tunneling. This adds an extra layer of security by protecting RADIUS attributes in transit. Defaults to `true`.
        /// </summary>
        [Input("tunneledReply")]
        public Input<bool>? TunneledReply { get; set; }

        public SettingRadiusState()
        {
        }
        public static new SettingRadiusState Empty => new SettingRadiusState();
    }
}
