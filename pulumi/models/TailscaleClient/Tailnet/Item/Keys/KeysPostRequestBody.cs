// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
using Tailscale.Client.Models;
namespace Tailscale.Client.Tailnet.Item.Keys
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class KeysPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>`capabilities` is a mapping of resources to permissible actions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Tailscale.Client.Models.KeyCapabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::Tailscale.Client.Models.KeyCapabilities Capabilities { get; set; }
#endif
        /// <summary>DoUpdate short string specifying the purpose of the key. Can be a maximum of 50 alphanumeric characters. Hyphens and spaces are also allowed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Specifies the duration in seconds until the key expires. Defaults to 90 days if not supplied.Only applies to auth keys.</summary>
        public double? ExpirySeconds { get; set; }
        /// <summary>The type of key to create. Must be either &quot;auth&quot; or &quot;client&quot;. Defaults to &quot;auth&quot; if omitted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyType { get; set; }
#nullable restore
#else
        public string KeyType { get; set; }
#endif
        /// <summary>DoUpdate list of scopes to grant to the key. At least one scope is required.See [OAuth Scopes](https://tailscale.com/kb/1215/#scopes) for a list of available scopes.Only applies to OAuth clients.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Scopes { get; set; }
#nullable restore
#else
        public List<string> Scopes { get; set; }
#endif
        /// <summary>DoUpdate list of tags associated to the OAuth client. Auth keys created with this client must have these exact tags, or tags owned by the client&apos;s tags.Mandatory if the scopes include &quot;devices:core&quot; or &quot;auth_keys&quot;. Only applies to OAuth clients.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Keys.KeysPostRequestBody"/> and sets the default values.
        /// </summary>
        public KeysPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Keys.KeysPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Tailnet.Item.Keys.KeysPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Tailnet.Item.Keys.KeysPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capabilities", n => { Capabilities = n.GetObjectValue<global::Tailscale.Client.Models.KeyCapabilities>(global::Tailscale.Client.Models.KeyCapabilities.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expirySeconds", n => { ExpirySeconds = n.GetDoubleValue(); } },
                { "keyType", n => { KeyType = n.GetStringValue(); } },
                { "scopes", n => { Scopes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Tailscale.Client.Models.KeyCapabilities>("capabilities", Capabilities);
            writer.WriteStringValue("description", Description);
            writer.WriteDoubleValue("expirySeconds", ExpirySeconds);
            writer.WriteStringValue("keyType", KeyType);
            writer.WriteCollectionOfPrimitiveValues<string>("scopes", Scopes);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
