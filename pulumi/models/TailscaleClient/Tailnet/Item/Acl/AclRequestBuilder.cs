// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Models;
using Tailscale.Client.Tailnet.Item.Acl.Preview;
using Tailscale.Client.Tailnet.Item.Acl.Validate;
namespace Tailscale.Client.Tailnet.Item.Acl
{
    /// <summary>
    /// Builds and executes requests for operations under \tailnet\{tailnet}\acl
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AclRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The preview property</summary>
        public global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder Preview
        {
            get => new global::Tailscale.Client.Tailnet.Item.Acl.Preview.PreviewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The validate property</summary>
        public global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder Validate
        {
            get => new global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AclRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl{?details*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AclRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl{?details*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves the current policy file for the given tailnet; this includes the ACL along with the rules and tests that have been defined.This method can return the policy file as JSON or HuJSON, depending on the Accept header.The response also includes an `ETag` header, which can be optionally included when [setting the policy file](#tag/policyfile/post/tailnet/{tailnet}/acl) to avoid missed updates.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclGetResponse?> GetAsAclGetResponseAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclGetResponse> GetAsAclGetResponseAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.AclGetResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.AclGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the current policy file for the given tailnet; this includes the ACL along with the rules and tests that have been defined.This method can return the policy file as JSON or HuJSON, depending on the Accept header.The response also includes an `ETag` header, which can be optionally included when [setting the policy file](#tag/policyfile/post/tailnet/{tailnet}/acl) to avoid missed updates.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAclGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse?> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.AclResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sets the ACL for the given tailnet. HuJSON and JSON are both accepted inputs.An `If-Match` header can be set to avoid missed updates.On success, returns the updated ACL in JSON or HuJSON according to the `Accept` header.Otherwise, errors are returned for incorrectly defined ACLs, ACLs with failing tests on attempted updates, and mismatched `If-Match` header and `ETag`.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 412 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclPostResponse?> PostAsAclPostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclPostResponse> PostAsAclPostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "412", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.AclPostResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.AclPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sets the ACL for the given tailnet. HuJSON and JSON are both accepted inputs.An `If-Match` header can be set to avoid missed updates.On success, returns the updated ACL in JSON or HuJSON according to the `Accept` header.Otherwise, errors are returned for incorrectly defined ACLs, ACLs with failing tests on attempted updates, and mismatched `If-Match` header and `ETag`.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 412 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsAclPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse?> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "412", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.AclResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.AclResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the current policy file for the given tailnet; this includes the ACL along with the rules and tests that have been defined.This method can return the policy file as JSON or HuJSON, depending on the Accept header.The response also includes an `ETag` header, which can be optionally included when [setting the policy file](#tag/policyfile/post/tailnet/{tailnet}/acl) to avoid missed updates.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Sets the ACL for the given tailnet. HuJSON and JSON are both accepted inputs.An `If-Match` header can be set to avoid missed updates.On success, returns the updated ACL in JSON or HuJSON according to the `Accept` header.Otherwise, errors are returned for incorrectly defined ACLs, ACLs with failing tests on attempted updates, and mismatched `If-Match` header and `ETag`.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.AclPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the current policy file for the given tailnet; this includes the ACL along with the rules and tests that have been defined.This method can return the policy file as JSON or HuJSON, depending on the Accept header.The response also includes an `ETag` header, which can be optionally included when [setting the policy file](#tag/policyfile/post/tailnet/{tailnet}/acl) to avoid missed updates.Learn more about [policy file ACL syntax](https://tailscale.com/kb/1337/acl-syntax).OAuth Scope: `policy_file:read`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AclRequestBuilderGetQueryParameters 
        {
            /// <summary>Request a detailed description of the tailnet policy file by providing `details=true` in the URL query string.Supplying any other value for `details`, or not sending the param, is treated as sending `details=false`.If using this, do not supply an `Accept` parameter in the header.The response will contain a JSON object with the fields:- `acl`: a base64-encoded string representation of the huJSON format.- `warnings`: array of strings for syntactically valid but nonsensical entries.- `errors`: an array of strings for parsing failures.</summary>
            [QueryParameter("details")]
            public bool? Details { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AclRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Acl.AclRequestBuilder.AclRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AclRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
