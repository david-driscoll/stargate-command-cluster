// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetService
    {
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("truenas:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("truenas:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());

        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("truenas:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("serviceId", required: true)]
        public double ServiceId { get; set; }

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("serviceId", required: true)]
        public Input<double> ServiceId { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        public readonly bool Enabled;
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableArray<double> Pids;
        public readonly double ServiceId;
        public readonly string State;

        [OutputConstructor]
        private GetServiceResult(
            bool enabled,

            string id,

            string name,

            ImmutableArray<double> pids,

            double serviceId,

            string state)
        {
            Enabled = enabled;
            Id = id;
            Name = name;
            Pids = pids;
            ServiceId = serviceId;
            State = state;
        }
    }
}
