// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConnectionCounts : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Destination addr:port.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Dst { get; set; }
#nullable restore
#else
        public string Dst { get; set; }
#endif
        /// <summary>IP protocol name (or number if no name used).</summary>
        public global::Tailscale.Client.Models.ConnectionCounts_proto? Proto { get; set; }
        /// <summary>Number of bytes received.</summary>
        public int? RxBytes { get; set; }
        /// <summary>Number of packets received.</summary>
        public int? RxPkts { get; set; }
        /// <summary>Source addr:port.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Src { get; set; }
#nullable restore
#else
        public string Src { get; set; }
#endif
        /// <summary>Number of bytes sent.</summary>
        public int? TxBytes { get; set; }
        /// <summary>Number of packets sent.</summary>
        public int? TxPkts { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.ConnectionCounts"/> and sets the default values.
        /// </summary>
        public ConnectionCounts()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.ConnectionCounts"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.ConnectionCounts CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.ConnectionCounts();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dst", n => { Dst = n.GetStringValue(); } },
                { "proto", n => { Proto = n.GetEnumValue<global::Tailscale.Client.Models.ConnectionCounts_proto>(); } },
                { "rxBytes", n => { RxBytes = n.GetIntValue(); } },
                { "rxPkts", n => { RxPkts = n.GetIntValue(); } },
                { "src", n => { Src = n.GetStringValue(); } },
                { "txBytes", n => { TxBytes = n.GetIntValue(); } },
                { "txPkts", n => { TxPkts = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("dst", Dst);
            writer.WriteEnumValue<global::Tailscale.Client.Models.ConnectionCounts_proto>("proto", Proto);
            writer.WriteIntValue("rxBytes", RxBytes);
            writer.WriteIntValue("rxPkts", RxPkts);
            writer.WriteStringValue("src", Src);
            writer.WriteIntValue("txBytes", TxBytes);
            writer.WriteIntValue("txPkts", TxPkts);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
