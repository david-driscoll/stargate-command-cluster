// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.N8n
{
    [N8nResourceType("n8n:index/workflow:Workflow")]
    public partial class Workflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the workflow is active and can be triggered
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// JSON string containing the workflow connections between nodes
        /// </summary>
        [Output("connections")]
        public Output<string> Connections { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the workflow was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The name of the workflow
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// JSON string containing the workflow nodes configuration
        /// </summary>
        [Output("nodes")]
        public Output<string> Nodes { get; private set; } = null!;

        /// <summary>
        /// JSON string containing pinned data for testing purposes
        /// </summary>
        [Output("pinnedData")]
        public Output<string> PinnedData { get; private set; } = null!;

        /// <summary>
        /// JSON string containing workflow settings
        /// </summary>
        [Output("settings")]
        public Output<string> Settings { get; private set; } = null!;

        /// <summary>
        /// JSON string containing static data for the workflow
        /// </summary>
        [Output("staticData")]
        public Output<string> StaticData { get; private set; } = null!;

        /// <summary>
        /// List of tags associated with the workflow
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the workflow was last updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Version identifier of the workflow
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs? args = null, CustomResourceOptions? options = null)
            : base("n8n:index/workflow:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Workflow(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
            : base("n8n:index/workflow:Workflow", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, state, options);
        }
    }

    public sealed class WorkflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the workflow is active and can be triggered
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// JSON string containing the workflow connections between nodes
        /// </summary>
        [Input("connections")]
        public Input<string>? Connections { get; set; }

        /// <summary>
        /// The name of the workflow
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// JSON string containing the workflow nodes configuration
        /// </summary>
        [Input("nodes")]
        public Input<string>? Nodes { get; set; }

        /// <summary>
        /// JSON string containing pinned data for testing purposes
        /// </summary>
        [Input("pinnedData")]
        public Input<string>? PinnedData { get; set; }

        /// <summary>
        /// JSON string containing workflow settings
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// JSON string containing static data for the workflow
        /// </summary>
        [Input("staticData")]
        public Input<string>? StaticData { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags associated with the workflow
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public WorkflowArgs()
        {
        }
        public static new WorkflowArgs Empty => new WorkflowArgs();
    }

    public sealed class WorkflowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the workflow is active and can be triggered
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// JSON string containing the workflow connections between nodes
        /// </summary>
        [Input("connections")]
        public Input<string>? Connections { get; set; }

        /// <summary>
        /// Timestamp when the workflow was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The name of the workflow
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// JSON string containing the workflow nodes configuration
        /// </summary>
        [Input("nodes")]
        public Input<string>? Nodes { get; set; }

        /// <summary>
        /// JSON string containing pinned data for testing purposes
        /// </summary>
        [Input("pinnedData")]
        public Input<string>? PinnedData { get; set; }

        /// <summary>
        /// JSON string containing workflow settings
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// JSON string containing static data for the workflow
        /// </summary>
        [Input("staticData")]
        public Input<string>? StaticData { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags associated with the workflow
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timestamp when the workflow was last updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Version identifier of the workflow
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public WorkflowState()
        {
        }
        public static new WorkflowState Empty => new WorkflowState();
    }
}
