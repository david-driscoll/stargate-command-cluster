// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow this resource to take over management of an existing user in the UniFi controller. When true:
        ///   * The resource can manage users that were automatically created when devices connected
        ///   * Existing settings will be overwritten with the values specified in this resource
        ///   * If false, attempting to manage an existing user will result in an error
        /// 
        /// Use with caution as it can modify settings for devices already connected to your network. Defaults to `true`.
        /// </summary>
        [Output("allowExisting")]
        public Output<bool?> AllowExisting { get; private set; } = null!;

        /// <summary>
        /// When true, this client will be blocked from accessing the network. Useful for temporarily or permanently restricting network access for specific devices.
        /// </summary>
        [Output("blocked")]
        public Output<bool?> Blocked { get; private set; } = null!;

        /// <summary>
        /// Override the device fingerprint.
        /// </summary>
        [Output("devIdOverride")]
        public Output<double?> DevIdOverride { get; private set; } = null!;

        /// <summary>
        /// A static IPv4 address to assign to this client. Ensure this IP is within the client's network range and not already assigned to another device.
        /// </summary>
        [Output("fixedIp")]
        public Output<string?> FixedIp { get; private set; } = null!;

        /// <summary>
        /// The hostname of the user.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The IP address of the user.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// A local DNS hostname for this client. When set, other devices on the network can resolve this name to the client's IP address (e.g., 'printer.local', 'nas.home.arpa'). Such DNS record is automatically added to controller's DNS records.
        /// </summary>
        [Output("localDnsRecord")]
        public Output<string?> LocalDnsRecord { get; private set; } = null!;

        /// <summary>
        /// The MAC address of the device/client. This is used as the unique identifier and cannot be changed after creation. Must be a valid MAC address format (e.g., '00:11:22:33:44:55'). MAC addresses are case-insensitive.
        /// </summary>
        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the device/client. This helps identify the device in the UniFi interface (eg. 'Living Room TV', 'John's Laptop').
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the network this client should be associated with. This is particularly important when using VLANs or multiple networks.
        /// </summary>
        [Output("networkId")]
        public Output<string?> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Additional information about the client that you want to record (e.g., 'Company asset tag #12345', 'Guest device - expires 2024-03-01').
        /// </summary>
        [Output("note")]
        public Output<string?> Note { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this user should be managed. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        [Output("skipForgetOnDestroy")]
        public Output<bool?> SkipForgetOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The ID of the user group this client belongs to. User groups can be used to apply common settings and restrictions to multiple clients.
        /// </summary>
        [Output("userGroupId")]
        public Output<string?> UserGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/user:User", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow this resource to take over management of an existing user in the UniFi controller. When true:
        ///   * The resource can manage users that were automatically created when devices connected
        ///   * Existing settings will be overwritten with the values specified in this resource
        ///   * If false, attempting to manage an existing user will result in an error
        /// 
        /// Use with caution as it can modify settings for devices already connected to your network. Defaults to `true`.
        /// </summary>
        [Input("allowExisting")]
        public Input<bool>? AllowExisting { get; set; }

        /// <summary>
        /// When true, this client will be blocked from accessing the network. Useful for temporarily or permanently restricting network access for specific devices.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// Override the device fingerprint.
        /// </summary>
        [Input("devIdOverride")]
        public Input<double>? DevIdOverride { get; set; }

        /// <summary>
        /// A static IPv4 address to assign to this client. Ensure this IP is within the client's network range and not already assigned to another device.
        /// </summary>
        [Input("fixedIp")]
        public Input<string>? FixedIp { get; set; }

        /// <summary>
        /// A local DNS hostname for this client. When set, other devices on the network can resolve this name to the client's IP address (e.g., 'printer.local', 'nas.home.arpa'). Such DNS record is automatically added to controller's DNS records.
        /// </summary>
        [Input("localDnsRecord")]
        public Input<string>? LocalDnsRecord { get; set; }

        /// <summary>
        /// The MAC address of the device/client. This is used as the unique identifier and cannot be changed after creation. Must be a valid MAC address format (e.g., '00:11:22:33:44:55'). MAC addresses are case-insensitive.
        /// </summary>
        [Input("mac", required: true)]
        public Input<string> Mac { get; set; } = null!;

        /// <summary>
        /// A friendly name for the device/client. This helps identify the device in the UniFi interface (eg. 'Living Room TV', 'John's Laptop').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the network this client should be associated with. This is particularly important when using VLANs or multiple networks.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Additional information about the client that you want to record (e.g., 'Company asset tag #12345', 'Guest device - expires 2024-03-01').
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// The name of the UniFi site where this user should be managed. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        [Input("skipForgetOnDestroy")]
        public Input<bool>? SkipForgetOnDestroy { get; set; }

        /// <summary>
        /// The ID of the user group this client belongs to. User groups can be used to apply common settings and restrictions to multiple clients.
        /// </summary>
        [Input("userGroupId")]
        public Input<string>? UserGroupId { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow this resource to take over management of an existing user in the UniFi controller. When true:
        ///   * The resource can manage users that were automatically created when devices connected
        ///   * Existing settings will be overwritten with the values specified in this resource
        ///   * If false, attempting to manage an existing user will result in an error
        /// 
        /// Use with caution as it can modify settings for devices already connected to your network. Defaults to `true`.
        /// </summary>
        [Input("allowExisting")]
        public Input<bool>? AllowExisting { get; set; }

        /// <summary>
        /// When true, this client will be blocked from accessing the network. Useful for temporarily or permanently restricting network access for specific devices.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// Override the device fingerprint.
        /// </summary>
        [Input("devIdOverride")]
        public Input<double>? DevIdOverride { get; set; }

        /// <summary>
        /// A static IPv4 address to assign to this client. Ensure this IP is within the client's network range and not already assigned to another device.
        /// </summary>
        [Input("fixedIp")]
        public Input<string>? FixedIp { get; set; }

        /// <summary>
        /// The hostname of the user.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The IP address of the user.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// A local DNS hostname for this client. When set, other devices on the network can resolve this name to the client's IP address (e.g., 'printer.local', 'nas.home.arpa'). Such DNS record is automatically added to controller's DNS records.
        /// </summary>
        [Input("localDnsRecord")]
        public Input<string>? LocalDnsRecord { get; set; }

        /// <summary>
        /// The MAC address of the device/client. This is used as the unique identifier and cannot be changed after creation. Must be a valid MAC address format (e.g., '00:11:22:33:44:55'). MAC addresses are case-insensitive.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// A friendly name for the device/client. This helps identify the device in the UniFi interface (eg. 'Living Room TV', 'John's Laptop').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the network this client should be associated with. This is particularly important when using VLANs or multiple networks.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Additional information about the client that you want to record (e.g., 'Company asset tag #12345', 'Guest device - expires 2024-03-01').
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// The name of the UniFi site where this user should be managed. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        [Input("skipForgetOnDestroy")]
        public Input<bool>? SkipForgetOnDestroy { get; set; }

        /// <summary>
        /// The ID of the user group this client belongs to. User groups can be used to apply common settings and restrictions to multiple clients.
        /// </summary>
        [Input("userGroupId")]
        public Input<string>? UserGroupId { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
