// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Proxmox
{
    [ProxmoxResourceType("proxmox:index/lxcDisk:LxcDisk")]
    public partial class LxcDisk : global::Pulumi.CustomResource
    {
        [Output("acl")]
        public Output<bool?> Acl { get; private set; } = null!;

        [Output("backup")]
        public Output<bool?> Backup { get; private set; } = null!;

        [Output("container")]
        public Output<string> Container { get; private set; } = null!;

        [Output("lxcDiskId")]
        public Output<string> LxcDiskId { get; private set; } = null!;

        [Output("mountoptions")]
        public Output<Outputs.LxcDiskMountoptions?> Mountoptions { get; private set; } = null!;

        [Output("mp")]
        public Output<string> Mp { get; private set; } = null!;

        [Output("quota")]
        public Output<bool?> Quota { get; private set; } = null!;

        [Output("replicate")]
        public Output<bool?> Replicate { get; private set; } = null!;

        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        [Output("slot")]
        public Output<double> Slot { get; private set; } = null!;

        [Output("storage")]
        public Output<string> Storage { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.LxcDiskTimeouts?> Timeouts { get; private set; } = null!;

        [Output("volume")]
        public Output<string> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a LxcDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LxcDisk(string name, LxcDiskArgs args, CustomResourceOptions? options = null)
            : base("proxmox:index/lxcDisk:LxcDisk", name, args ?? new LxcDiskArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private LxcDisk(string name, Input<string> id, LxcDiskState? state = null, CustomResourceOptions? options = null)
            : base("proxmox:index/lxcDisk:LxcDisk", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LxcDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LxcDisk Get(string name, Input<string> id, LxcDiskState? state = null, CustomResourceOptions? options = null)
        {
            return new LxcDisk(name, id, state, options);
        }
    }

    public sealed class LxcDiskArgs : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<bool>? Acl { get; set; }

        [Input("backup")]
        public Input<bool>? Backup { get; set; }

        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        [Input("lxcDiskId")]
        public Input<string>? LxcDiskId { get; set; }

        [Input("mountoptions")]
        public Input<Inputs.LxcDiskMountoptionsArgs>? Mountoptions { get; set; }

        [Input("mp", required: true)]
        public Input<string> Mp { get; set; } = null!;

        [Input("quota")]
        public Input<bool>? Quota { get; set; }

        [Input("replicate")]
        public Input<bool>? Replicate { get; set; }

        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("size", required: true)]
        public Input<string> Size { get; set; } = null!;

        [Input("slot", required: true)]
        public Input<double> Slot { get; set; } = null!;

        [Input("storage", required: true)]
        public Input<string> Storage { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.LxcDiskTimeoutsArgs>? Timeouts { get; set; }

        [Input("volume")]
        public Input<string>? Volume { get; set; }

        public LxcDiskArgs()
        {
        }
        public static new LxcDiskArgs Empty => new LxcDiskArgs();
    }

    public sealed class LxcDiskState : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<bool>? Acl { get; set; }

        [Input("backup")]
        public Input<bool>? Backup { get; set; }

        [Input("container")]
        public Input<string>? Container { get; set; }

        [Input("lxcDiskId")]
        public Input<string>? LxcDiskId { get; set; }

        [Input("mountoptions")]
        public Input<Inputs.LxcDiskMountoptionsGetArgs>? Mountoptions { get; set; }

        [Input("mp")]
        public Input<string>? Mp { get; set; }

        [Input("quota")]
        public Input<bool>? Quota { get; set; }

        [Input("replicate")]
        public Input<bool>? Replicate { get; set; }

        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("slot")]
        public Input<double>? Slot { get; set; }

        [Input("storage")]
        public Input<string>? Storage { get; set; }

        [Input("timeouts")]
        public Input<Inputs.LxcDiskTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("volume")]
        public Input<string>? Volume { get; set; }

        public LxcDiskState()
        {
        }
        public static new LxcDiskState Empty => new LxcDiskState();
    }
}
