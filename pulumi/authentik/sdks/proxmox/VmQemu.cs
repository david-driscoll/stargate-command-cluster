// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Proxmox
{
    [ProxmoxResourceType("proxmox:index/vmQemu:VmQemu")]
    public partial class VmQemu : global::Pulumi.CustomResource
    {
        [Output("additionalWait")]
        public Output<double?> AdditionalWait { get; private set; } = null!;

        [Output("agent")]
        public Output<double?> Agent { get; private set; } = null!;

        [Output("args")]
        public Output<string?> Args { get; private set; } = null!;

        /// <summary>
        /// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
        /// </summary>
        [Output("automaticReboot")]
        public Output<bool?> AutomaticReboot { get; private set; } = null!;

        [Output("balloon")]
        public Output<double?> Balloon { get; private set; } = null!;

        /// <summary>
        /// The VM bios, it can be seabios or ovmf
        /// </summary>
        [Output("bios")]
        public Output<string?> Bios { get; private set; } = null!;

        /// <summary>
        /// Boot order of the VM
        /// </summary>
        [Output("boot")]
        public Output<string> Boot { get; private set; } = null!;

        [Output("bootdisk")]
        public Output<string> Bootdisk { get; private set; } = null!;

        [Output("bridge")]
        public Output<string?> Bridge { get; private set; } = null!;

        [Output("ciWait")]
        public Output<double?> CiWait { get; private set; } = null!;

        [Output("cicustom")]
        public Output<string?> Cicustom { get; private set; } = null!;

        [Output("cipassword")]
        public Output<string?> Cipassword { get; private set; } = null!;

        [Output("ciuser")]
        public Output<string?> Ciuser { get; private set; } = null!;

        [Output("clone")]
        public Output<string?> Clone { get; private set; } = null!;

        [Output("cloneWait")]
        public Output<double?> CloneWait { get; private set; } = null!;

        [Output("cloudinitCdromStorage")]
        public Output<string?> CloudinitCdromStorage { get; private set; } = null!;

        [Output("cores")]
        public Output<double?> Cores { get; private set; } = null!;

        [Output("cpu")]
        public Output<string?> Cpu { get; private set; } = null!;

        /// <summary>
        /// Use to track vm ipv4 address
        /// </summary>
        [Output("defaultIpv4Address")]
        public Output<string> DefaultIpv4Address { get; private set; } = null!;

        /// <summary>
        /// By default define SSH for provisioner info
        /// </summary>
        [Output("defineConnectionInfo")]
        public Output<bool?> DefineConnectionInfo { get; private set; } = null!;

        /// <summary>
        /// The VM description
        /// </summary>
        [Output("desc")]
        public Output<string?> Desc { get; private set; } = null!;

        [Output("diskGb")]
        public Output<double?> DiskGb { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.VmQemuDisk>> Disks { get; private set; } = null!;

        [Output("forceCreate")]
        public Output<bool?> ForceCreate { get; private set; } = null!;

        [Output("forceRecreateOnChangeOf")]
        public Output<string?> ForceRecreateOnChangeOf { get; private set; } = null!;

        [Output("fullClone")]
        public Output<bool?> FullClone { get; private set; } = null!;

        [Output("guestAgentReadyTimeout")]
        public Output<double?> GuestAgentReadyTimeout { get; private set; } = null!;

        [Output("hagroup")]
        public Output<string?> Hagroup { get; private set; } = null!;

        [Output("hastate")]
        public Output<string?> Hastate { get; private set; } = null!;

        [Output("hostpcis")]
        public Output<ImmutableArray<Outputs.VmQemuHostpci>> Hostpcis { get; private set; } = null!;

        [Output("hotplug")]
        public Output<string?> Hotplug { get; private set; } = null!;

        [Output("ipconfig0")]
        public Output<string?> Ipconfig0 { get; private set; } = null!;

        [Output("ipconfig1")]
        public Output<string?> Ipconfig1 { get; private set; } = null!;

        [Output("ipconfig10")]
        public Output<string?> Ipconfig10 { get; private set; } = null!;

        [Output("ipconfig11")]
        public Output<string?> Ipconfig11 { get; private set; } = null!;

        [Output("ipconfig12")]
        public Output<string?> Ipconfig12 { get; private set; } = null!;

        [Output("ipconfig13")]
        public Output<string?> Ipconfig13 { get; private set; } = null!;

        [Output("ipconfig14")]
        public Output<string?> Ipconfig14 { get; private set; } = null!;

        [Output("ipconfig15")]
        public Output<string?> Ipconfig15 { get; private set; } = null!;

        [Output("ipconfig2")]
        public Output<string?> Ipconfig2 { get; private set; } = null!;

        [Output("ipconfig3")]
        public Output<string?> Ipconfig3 { get; private set; } = null!;

        [Output("ipconfig4")]
        public Output<string?> Ipconfig4 { get; private set; } = null!;

        [Output("ipconfig5")]
        public Output<string?> Ipconfig5 { get; private set; } = null!;

        [Output("ipconfig6")]
        public Output<string?> Ipconfig6 { get; private set; } = null!;

        [Output("ipconfig7")]
        public Output<string?> Ipconfig7 { get; private set; } = null!;

        [Output("ipconfig8")]
        public Output<string?> Ipconfig8 { get; private set; } = null!;

        [Output("ipconfig9")]
        public Output<string?> Ipconfig9 { get; private set; } = null!;

        [Output("iso")]
        public Output<string?> Iso { get; private set; } = null!;

        [Output("kvm")]
        public Output<bool?> Kvm { get; private set; } = null!;

        [Output("mac")]
        public Output<string?> Mac { get; private set; } = null!;

        /// <summary>
        /// Specifies the Qemu machine type.
        /// </summary>
        [Output("machine")]
        public Output<string?> Machine { get; private set; } = null!;

        [Output("memory")]
        public Output<double?> Memory { get; private set; } = null!;

        /// <summary>
        /// The VM name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nameserver")]
        public Output<string> Nameserver { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.VmQemuNetwork>> Networks { get; private set; } = null!;

        [Output("nic")]
        public Output<string?> Nic { get; private set; } = null!;

        [Output("numa")]
        public Output<bool?> Numa { get; private set; } = null!;

        /// <summary>
        /// VM autostart on boot
        /// </summary>
        [Output("onboot")]
        public Output<bool?> Onboot { get; private set; } = null!;

        /// <summary>
        /// VM autostart on create
        /// </summary>
        [Output("oncreate")]
        public Output<bool?> Oncreate { get; private set; } = null!;

        [Output("osNetworkConfig")]
        public Output<string?> OsNetworkConfig { get; private set; } = null!;

        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        [Output("pool")]
        public Output<string?> Pool { get; private set; } = null!;

        [Output("preprovision")]
        public Output<bool?> Preprovision { get; private set; } = null!;

        [Output("pxe")]
        public Output<bool?> Pxe { get; private set; } = null!;

        [Output("qemuOs")]
        public Output<string?> QemuOs { get; private set; } = null!;

        /// <summary>
        /// Internal variable, true if any of the modified parameters requires a reboot to take effect.
        /// </summary>
        [Output("rebootRequired")]
        public Output<bool> RebootRequired { get; private set; } = null!;

        [Output("scsihw")]
        public Output<string?> Scsihw { get; private set; } = null!;

        [Output("searchdomain")]
        public Output<string> Searchdomain { get; private set; } = null!;

        [Output("serials")]
        public Output<ImmutableArray<Outputs.VmQemuSerial>> Serials { get; private set; } = null!;

        [Output("sockets")]
        public Output<double?> Sockets { get; private set; } = null!;

        /// <summary>
        /// Use to pass instance ip address, redundant
        /// </summary>
        [Output("sshForwardIp")]
        public Output<string?> SshForwardIp { get; private set; } = null!;

        [Output("sshHost")]
        public Output<string> SshHost { get; private set; } = null!;

        [Output("sshPort")]
        public Output<string> SshPort { get; private set; } = null!;

        [Output("sshPrivateKey")]
        public Output<string?> SshPrivateKey { get; private set; } = null!;

        [Output("sshUser")]
        public Output<string?> SshUser { get; private set; } = null!;

        [Output("sshkeys")]
        public Output<string?> Sshkeys { get; private set; } = null!;

        /// <summary>
        /// Startup order of the VM
        /// </summary>
        [Output("startup")]
        public Output<string?> Startup { get; private set; } = null!;

        [Output("storage")]
        public Output<string?> Storage { get; private set; } = null!;

        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        /// <summary>
        /// Enable tablet mode in the VM
        /// </summary>
        [Output("tablet")]
        public Output<bool?> Tablet { get; private set; } = null!;

        [Output("tags")]
        public Output<string?> Tags { get; private set; } = null!;

        /// <summary>
        /// The node where VM goes to
        /// </summary>
        [Output("targetNode")]
        public Output<string> TargetNode { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.VmQemuTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Record unused disks in proxmox. This is intended to be read-only for now.
        /// </summary>
        [Output("unusedDisks")]
        public Output<ImmutableArray<Outputs.VmQemuUnusedDisk>> UnusedDisks { get; private set; } = null!;

        [Output("usbs")]
        public Output<ImmutableArray<Outputs.VmQemuUsb>> Usbs { get; private set; } = null!;

        [Output("vcpus")]
        public Output<double?> Vcpus { get; private set; } = null!;

        [Output("vgas")]
        public Output<ImmutableArray<Outputs.VmQemuVga>> Vgas { get; private set; } = null!;

        [Output("vlan")]
        public Output<double?> Vlan { get; private set; } = null!;

        [Output("vmQemuId")]
        public Output<string> VmQemuId { get; private set; } = null!;

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Output("vmid")]
        public Output<double> Vmid { get; private set; } = null!;


        /// <summary>
        /// Create a VmQemu resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VmQemu(string name, VmQemuArgs args, CustomResourceOptions? options = null)
            : base("proxmox:index/vmQemu:VmQemu", name, args ?? new VmQemuArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private VmQemu(string name, Input<string> id, VmQemuState? state = null, CustomResourceOptions? options = null)
            : base("proxmox:index/vmQemu:VmQemu", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "cipassword",
                    "sshPrivateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VmQemu resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VmQemu Get(string name, Input<string> id, VmQemuState? state = null, CustomResourceOptions? options = null)
        {
            return new VmQemu(name, id, state, options);
        }
    }

    public sealed class VmQemuArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalWait")]
        public Input<double>? AdditionalWait { get; set; }

        [Input("agent")]
        public Input<double>? Agent { get; set; }

        [Input("args")]
        public Input<string>? Args { get; set; }

        /// <summary>
        /// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
        /// </summary>
        [Input("automaticReboot")]
        public Input<bool>? AutomaticReboot { get; set; }

        [Input("balloon")]
        public Input<double>? Balloon { get; set; }

        /// <summary>
        /// The VM bios, it can be seabios or ovmf
        /// </summary>
        [Input("bios")]
        public Input<string>? Bios { get; set; }

        /// <summary>
        /// Boot order of the VM
        /// </summary>
        [Input("boot")]
        public Input<string>? Boot { get; set; }

        [Input("bootdisk")]
        public Input<string>? Bootdisk { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("ciWait")]
        public Input<double>? CiWait { get; set; }

        [Input("cicustom")]
        public Input<string>? Cicustom { get; set; }

        [Input("cipassword")]
        private Input<string>? _cipassword;
        public Input<string>? Cipassword
        {
            get => _cipassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cipassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ciuser")]
        public Input<string>? Ciuser { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneWait")]
        public Input<double>? CloneWait { get; set; }

        [Input("cloudinitCdromStorage")]
        public Input<string>? CloudinitCdromStorage { get; set; }

        [Input("cores")]
        public Input<double>? Cores { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        /// <summary>
        /// By default define SSH for provisioner info
        /// </summary>
        [Input("defineConnectionInfo")]
        public Input<bool>? DefineConnectionInfo { get; set; }

        /// <summary>
        /// The VM description
        /// </summary>
        [Input("desc")]
        public Input<string>? Desc { get; set; }

        [Input("diskGb")]
        public Input<double>? DiskGb { get; set; }

        [Input("disks")]
        private InputList<Inputs.VmQemuDiskArgs>? _disks;
        public InputList<Inputs.VmQemuDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VmQemuDiskArgs>());
            set => _disks = value;
        }

        [Input("forceCreate")]
        public Input<bool>? ForceCreate { get; set; }

        [Input("forceRecreateOnChangeOf")]
        public Input<string>? ForceRecreateOnChangeOf { get; set; }

        [Input("fullClone")]
        public Input<bool>? FullClone { get; set; }

        [Input("guestAgentReadyTimeout")]
        public Input<double>? GuestAgentReadyTimeout { get; set; }

        [Input("hagroup")]
        public Input<string>? Hagroup { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hostpcis")]
        private InputList<Inputs.VmQemuHostpciArgs>? _hostpcis;
        public InputList<Inputs.VmQemuHostpciArgs> Hostpcis
        {
            get => _hostpcis ?? (_hostpcis = new InputList<Inputs.VmQemuHostpciArgs>());
            set => _hostpcis = value;
        }

        [Input("hotplug")]
        public Input<string>? Hotplug { get; set; }

        [Input("ipconfig0")]
        public Input<string>? Ipconfig0 { get; set; }

        [Input("ipconfig1")]
        public Input<string>? Ipconfig1 { get; set; }

        [Input("ipconfig10")]
        public Input<string>? Ipconfig10 { get; set; }

        [Input("ipconfig11")]
        public Input<string>? Ipconfig11 { get; set; }

        [Input("ipconfig12")]
        public Input<string>? Ipconfig12 { get; set; }

        [Input("ipconfig13")]
        public Input<string>? Ipconfig13 { get; set; }

        [Input("ipconfig14")]
        public Input<string>? Ipconfig14 { get; set; }

        [Input("ipconfig15")]
        public Input<string>? Ipconfig15 { get; set; }

        [Input("ipconfig2")]
        public Input<string>? Ipconfig2 { get; set; }

        [Input("ipconfig3")]
        public Input<string>? Ipconfig3 { get; set; }

        [Input("ipconfig4")]
        public Input<string>? Ipconfig4 { get; set; }

        [Input("ipconfig5")]
        public Input<string>? Ipconfig5 { get; set; }

        [Input("ipconfig6")]
        public Input<string>? Ipconfig6 { get; set; }

        [Input("ipconfig7")]
        public Input<string>? Ipconfig7 { get; set; }

        [Input("ipconfig8")]
        public Input<string>? Ipconfig8 { get; set; }

        [Input("ipconfig9")]
        public Input<string>? Ipconfig9 { get; set; }

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("kvm")]
        public Input<bool>? Kvm { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// Specifies the Qemu machine type.
        /// </summary>
        [Input("machine")]
        public Input<string>? Machine { get; set; }

        [Input("memory")]
        public Input<double>? Memory { get; set; }

        /// <summary>
        /// The VM name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.VmQemuNetworkArgs>? _networks;
        public InputList<Inputs.VmQemuNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.VmQemuNetworkArgs>());
            set => _networks = value;
        }

        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("numa")]
        public Input<bool>? Numa { get; set; }

        /// <summary>
        /// VM autostart on boot
        /// </summary>
        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        /// <summary>
        /// VM autostart on create
        /// </summary>
        [Input("oncreate")]
        public Input<bool>? Oncreate { get; set; }

        [Input("osNetworkConfig")]
        public Input<string>? OsNetworkConfig { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("preprovision")]
        public Input<bool>? Preprovision { get; set; }

        [Input("pxe")]
        public Input<bool>? Pxe { get; set; }

        [Input("qemuOs")]
        public Input<string>? QemuOs { get; set; }

        [Input("scsihw")]
        public Input<string>? Scsihw { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("serials")]
        private InputList<Inputs.VmQemuSerialArgs>? _serials;
        public InputList<Inputs.VmQemuSerialArgs> Serials
        {
            get => _serials ?? (_serials = new InputList<Inputs.VmQemuSerialArgs>());
            set => _serials = value;
        }

        [Input("sockets")]
        public Input<double>? Sockets { get; set; }

        /// <summary>
        /// Use to pass instance ip address, redundant
        /// </summary>
        [Input("sshForwardIp")]
        public Input<string>? SshForwardIp { get; set; }

        [Input("sshPrivateKey")]
        private Input<string>? _sshPrivateKey;
        public Input<string>? SshPrivateKey
        {
            get => _sshPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        [Input("sshkeys")]
        public Input<string>? Sshkeys { get; set; }

        /// <summary>
        /// Startup order of the VM
        /// </summary>
        [Input("startup")]
        public Input<string>? Startup { get; set; }

        [Input("storage")]
        public Input<string>? Storage { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Enable tablet mode in the VM
        /// </summary>
        [Input("tablet")]
        public Input<bool>? Tablet { get; set; }

        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// The node where VM goes to
        /// </summary>
        [Input("targetNode", required: true)]
        public Input<string> TargetNode { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.VmQemuTimeoutsArgs>? Timeouts { get; set; }

        [Input("usbs")]
        private InputList<Inputs.VmQemuUsbArgs>? _usbs;
        public InputList<Inputs.VmQemuUsbArgs> Usbs
        {
            get => _usbs ?? (_usbs = new InputList<Inputs.VmQemuUsbArgs>());
            set => _usbs = value;
        }

        [Input("vcpus")]
        public Input<double>? Vcpus { get; set; }

        [Input("vgas")]
        private InputList<Inputs.VmQemuVgaArgs>? _vgas;
        public InputList<Inputs.VmQemuVgaArgs> Vgas
        {
            get => _vgas ?? (_vgas = new InputList<Inputs.VmQemuVgaArgs>());
            set => _vgas = value;
        }

        [Input("vlan")]
        public Input<double>? Vlan { get; set; }

        [Input("vmQemuId")]
        public Input<string>? VmQemuId { get; set; }

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Input("vmid")]
        public Input<double>? Vmid { get; set; }

        public VmQemuArgs()
        {
        }
        public static new VmQemuArgs Empty => new VmQemuArgs();
    }

    public sealed class VmQemuState : global::Pulumi.ResourceArgs
    {
        [Input("additionalWait")]
        public Input<double>? AdditionalWait { get; set; }

        [Input("agent")]
        public Input<double>? Agent { get; set; }

        [Input("args")]
        public Input<string>? Args { get; set; }

        /// <summary>
        /// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
        /// </summary>
        [Input("automaticReboot")]
        public Input<bool>? AutomaticReboot { get; set; }

        [Input("balloon")]
        public Input<double>? Balloon { get; set; }

        /// <summary>
        /// The VM bios, it can be seabios or ovmf
        /// </summary>
        [Input("bios")]
        public Input<string>? Bios { get; set; }

        /// <summary>
        /// Boot order of the VM
        /// </summary>
        [Input("boot")]
        public Input<string>? Boot { get; set; }

        [Input("bootdisk")]
        public Input<string>? Bootdisk { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("ciWait")]
        public Input<double>? CiWait { get; set; }

        [Input("cicustom")]
        public Input<string>? Cicustom { get; set; }

        [Input("cipassword")]
        private Input<string>? _cipassword;
        public Input<string>? Cipassword
        {
            get => _cipassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cipassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ciuser")]
        public Input<string>? Ciuser { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneWait")]
        public Input<double>? CloneWait { get; set; }

        [Input("cloudinitCdromStorage")]
        public Input<string>? CloudinitCdromStorage { get; set; }

        [Input("cores")]
        public Input<double>? Cores { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        /// <summary>
        /// Use to track vm ipv4 address
        /// </summary>
        [Input("defaultIpv4Address")]
        public Input<string>? DefaultIpv4Address { get; set; }

        /// <summary>
        /// By default define SSH for provisioner info
        /// </summary>
        [Input("defineConnectionInfo")]
        public Input<bool>? DefineConnectionInfo { get; set; }

        /// <summary>
        /// The VM description
        /// </summary>
        [Input("desc")]
        public Input<string>? Desc { get; set; }

        [Input("diskGb")]
        public Input<double>? DiskGb { get; set; }

        [Input("disks")]
        private InputList<Inputs.VmQemuDiskGetArgs>? _disks;
        public InputList<Inputs.VmQemuDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VmQemuDiskGetArgs>());
            set => _disks = value;
        }

        [Input("forceCreate")]
        public Input<bool>? ForceCreate { get; set; }

        [Input("forceRecreateOnChangeOf")]
        public Input<string>? ForceRecreateOnChangeOf { get; set; }

        [Input("fullClone")]
        public Input<bool>? FullClone { get; set; }

        [Input("guestAgentReadyTimeout")]
        public Input<double>? GuestAgentReadyTimeout { get; set; }

        [Input("hagroup")]
        public Input<string>? Hagroup { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hostpcis")]
        private InputList<Inputs.VmQemuHostpciGetArgs>? _hostpcis;
        public InputList<Inputs.VmQemuHostpciGetArgs> Hostpcis
        {
            get => _hostpcis ?? (_hostpcis = new InputList<Inputs.VmQemuHostpciGetArgs>());
            set => _hostpcis = value;
        }

        [Input("hotplug")]
        public Input<string>? Hotplug { get; set; }

        [Input("ipconfig0")]
        public Input<string>? Ipconfig0 { get; set; }

        [Input("ipconfig1")]
        public Input<string>? Ipconfig1 { get; set; }

        [Input("ipconfig10")]
        public Input<string>? Ipconfig10 { get; set; }

        [Input("ipconfig11")]
        public Input<string>? Ipconfig11 { get; set; }

        [Input("ipconfig12")]
        public Input<string>? Ipconfig12 { get; set; }

        [Input("ipconfig13")]
        public Input<string>? Ipconfig13 { get; set; }

        [Input("ipconfig14")]
        public Input<string>? Ipconfig14 { get; set; }

        [Input("ipconfig15")]
        public Input<string>? Ipconfig15 { get; set; }

        [Input("ipconfig2")]
        public Input<string>? Ipconfig2 { get; set; }

        [Input("ipconfig3")]
        public Input<string>? Ipconfig3 { get; set; }

        [Input("ipconfig4")]
        public Input<string>? Ipconfig4 { get; set; }

        [Input("ipconfig5")]
        public Input<string>? Ipconfig5 { get; set; }

        [Input("ipconfig6")]
        public Input<string>? Ipconfig6 { get; set; }

        [Input("ipconfig7")]
        public Input<string>? Ipconfig7 { get; set; }

        [Input("ipconfig8")]
        public Input<string>? Ipconfig8 { get; set; }

        [Input("ipconfig9")]
        public Input<string>? Ipconfig9 { get; set; }

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("kvm")]
        public Input<bool>? Kvm { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// Specifies the Qemu machine type.
        /// </summary>
        [Input("machine")]
        public Input<string>? Machine { get; set; }

        [Input("memory")]
        public Input<double>? Memory { get; set; }

        /// <summary>
        /// The VM name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.VmQemuNetworkGetArgs>? _networks;
        public InputList<Inputs.VmQemuNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.VmQemuNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("numa")]
        public Input<bool>? Numa { get; set; }

        /// <summary>
        /// VM autostart on boot
        /// </summary>
        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        /// <summary>
        /// VM autostart on create
        /// </summary>
        [Input("oncreate")]
        public Input<bool>? Oncreate { get; set; }

        [Input("osNetworkConfig")]
        public Input<string>? OsNetworkConfig { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("preprovision")]
        public Input<bool>? Preprovision { get; set; }

        [Input("pxe")]
        public Input<bool>? Pxe { get; set; }

        [Input("qemuOs")]
        public Input<string>? QemuOs { get; set; }

        /// <summary>
        /// Internal variable, true if any of the modified parameters requires a reboot to take effect.
        /// </summary>
        [Input("rebootRequired")]
        public Input<bool>? RebootRequired { get; set; }

        [Input("scsihw")]
        public Input<string>? Scsihw { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("serials")]
        private InputList<Inputs.VmQemuSerialGetArgs>? _serials;
        public InputList<Inputs.VmQemuSerialGetArgs> Serials
        {
            get => _serials ?? (_serials = new InputList<Inputs.VmQemuSerialGetArgs>());
            set => _serials = value;
        }

        [Input("sockets")]
        public Input<double>? Sockets { get; set; }

        /// <summary>
        /// Use to pass instance ip address, redundant
        /// </summary>
        [Input("sshForwardIp")]
        public Input<string>? SshForwardIp { get; set; }

        [Input("sshHost")]
        public Input<string>? SshHost { get; set; }

        [Input("sshPort")]
        public Input<string>? SshPort { get; set; }

        [Input("sshPrivateKey")]
        private Input<string>? _sshPrivateKey;
        public Input<string>? SshPrivateKey
        {
            get => _sshPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        [Input("sshkeys")]
        public Input<string>? Sshkeys { get; set; }

        /// <summary>
        /// Startup order of the VM
        /// </summary>
        [Input("startup")]
        public Input<string>? Startup { get; set; }

        [Input("storage")]
        public Input<string>? Storage { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Enable tablet mode in the VM
        /// </summary>
        [Input("tablet")]
        public Input<bool>? Tablet { get; set; }

        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// The node where VM goes to
        /// </summary>
        [Input("targetNode")]
        public Input<string>? TargetNode { get; set; }

        [Input("timeouts")]
        public Input<Inputs.VmQemuTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("unusedDisks")]
        private InputList<Inputs.VmQemuUnusedDiskGetArgs>? _unusedDisks;

        /// <summary>
        /// Record unused disks in proxmox. This is intended to be read-only for now.
        /// </summary>
        public InputList<Inputs.VmQemuUnusedDiskGetArgs> UnusedDisks
        {
            get => _unusedDisks ?? (_unusedDisks = new InputList<Inputs.VmQemuUnusedDiskGetArgs>());
            set => _unusedDisks = value;
        }

        [Input("usbs")]
        private InputList<Inputs.VmQemuUsbGetArgs>? _usbs;
        public InputList<Inputs.VmQemuUsbGetArgs> Usbs
        {
            get => _usbs ?? (_usbs = new InputList<Inputs.VmQemuUsbGetArgs>());
            set => _usbs = value;
        }

        [Input("vcpus")]
        public Input<double>? Vcpus { get; set; }

        [Input("vgas")]
        private InputList<Inputs.VmQemuVgaGetArgs>? _vgas;
        public InputList<Inputs.VmQemuVgaGetArgs> Vgas
        {
            get => _vgas ?? (_vgas = new InputList<Inputs.VmQemuVgaGetArgs>());
            set => _vgas = value;
        }

        [Input("vlan")]
        public Input<double>? Vlan { get; set; }

        [Input("vmQemuId")]
        public Input<string>? VmQemuId { get; set; }

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Input("vmid")]
        public Input<double>? Vmid { get; set; }

        public VmQemuState()
        {
        }
        public static new VmQemuState Empty => new VmQemuState();
    }
}
