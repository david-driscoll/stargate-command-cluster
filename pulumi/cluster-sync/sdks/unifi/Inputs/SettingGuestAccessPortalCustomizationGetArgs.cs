// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi.Inputs
{

    public sealed class SettingGuestAccessPortalCustomizationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom authentication text for the portal.
        /// </summary>
        [Input("authenticationText")]
        public Input<string>? AuthenticationText { get; set; }

        /// <summary>
        /// Background color for the custom portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("bgColor")]
        public Input<string>? BgColor { get; set; }

        /// <summary>
        /// ID of the background image portal file. File must exist in controller, use `unifi.PortalFile` to manage it.
        /// </summary>
        [Input("bgImageFileId")]
        public Input<string>? BgImageFileId { get; set; }

        /// <summary>
        /// Tile the background image.
        /// </summary>
        [Input("bgImageTile")]
        public Input<bool>? BgImageTile { get; set; }

        /// <summary>
        /// Type of portal background. Valid values are:
        /// * `color` - Solid color background
        /// * `image` - (not yet supported!) Custom image background
        /// * `gallery` - Image from Unsplash gallery
        /// </summary>
        [Input("bgType")]
        public Input<string>? BgType { get; set; }

        /// <summary>
        /// Color of the login box in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("boxColor")]
        public Input<string>? BoxColor { get; set; }

        /// <summary>
        /// Color of links in the login box. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("boxLinkColor")]
        public Input<string>? BoxLinkColor { get; set; }

        /// <summary>
        /// Opacity of the login box (0-100).
        /// </summary>
        [Input("boxOpacity")]
        public Input<double>? BoxOpacity { get; set; }

        /// <summary>
        /// Border radius of the login box in pixels.
        /// </summary>
        [Input("boxRadius")]
        public Input<double>? BoxRadius { get; set; }

        /// <summary>
        /// Text color in the login box. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("boxTextColor")]
        public Input<string>? BoxTextColor { get; set; }

        /// <summary>
        /// Button color in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("buttonColor")]
        public Input<string>? ButtonColor { get; set; }

        /// <summary>
        /// Custom text for the login button.
        /// </summary>
        [Input("buttonText")]
        public Input<string>? ButtonText { get; set; }

        /// <summary>
        /// Button text color. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("buttonTextColor")]
        public Input<string>? ButtonTextColor { get; set; }

        /// <summary>
        /// Whether the portal is customized.
        /// </summary>
        [Input("customized")]
        public Input<bool>? Customized { get; set; }

        [Input("languages")]
        private InputList<string>? _languages;

        /// <summary>
        /// List of enabled languages for the portal.
        /// </summary>
        public InputList<string> Languages
        {
            get => _languages ?? (_languages = new InputList<string>());
            set => _languages = value;
        }

        /// <summary>
        /// Color for links in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("linkColor")]
        public Input<string>? LinkColor { get; set; }

        /// <summary>
        /// ID of the logo image portal file. File must exist in controller, use `unifi.PortalFile` to manage it.
        /// </summary>
        [Input("logoFileId")]
        public Input<string>? LogoFileId { get; set; }

        /// <summary>
        /// Position of the logo in the portal. Valid values are: left, center, right.
        /// </summary>
        [Input("logoPosition")]
        public Input<string>? LogoPosition { get; set; }

        /// <summary>
        /// Size of the logo in pixels.
        /// </summary>
        [Input("logoSize")]
        public Input<double>? LogoSize { get; set; }

        /// <summary>
        /// Text displayed after successful authentication.
        /// </summary>
        [Input("successText")]
        public Input<string>? SuccessText { get; set; }

        /// <summary>
        /// Main text color for the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        [Input("textColor")]
        public Input<string>? TextColor { get; set; }

        /// <summary>
        /// Title of the portal page.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Terms of service text.
        /// </summary>
        [Input("tos")]
        public Input<string>? Tos { get; set; }

        /// <summary>
        /// Enable terms of service acceptance requirement.
        /// </summary>
        [Input("tosEnabled")]
        public Input<bool>? TosEnabled { get; set; }

        /// <summary>
        /// Name of the Unsplash author for gallery background.
        /// </summary>
        [Input("unsplashAuthorName")]
        public Input<string>? UnsplashAuthorName { get; set; }

        /// <summary>
        /// Username of the Unsplash author for gallery background.
        /// </summary>
        [Input("unsplashAuthorUsername")]
        public Input<string>? UnsplashAuthorUsername { get; set; }

        /// <summary>
        /// Welcome text displayed on the portal.
        /// </summary>
        [Input("welcomeText")]
        public Input<string>? WelcomeText { get; set; }

        /// <summary>
        /// Enable welcome text display.
        /// </summary>
        [Input("welcomeTextEnabled")]
        public Input<bool>? WelcomeTextEnabled { get; set; }

        /// <summary>
        /// Position of the welcome text. Valid values are: `under_logo`, `above_boxes`.
        /// </summary>
        [Input("welcomeTextPosition")]
        public Input<string>? WelcomeTextPosition { get; set; }

        public SettingGuestAccessPortalCustomizationGetArgs()
        {
        }
        public static new SettingGuestAccessPortalCustomizationGetArgs Empty => new SettingGuestAccessPortalCustomizationGetArgs();
    }
}
