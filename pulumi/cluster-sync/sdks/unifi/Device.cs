// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/device:Device")]
    public partial class Device : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to automatically adopt the device when creating this resource. When true: * The controller will attempt to adopt
        /// the device * Device must be in a pending adoption state * Device must be accessible on the network Set to false if you
        /// want to manage adoption manually. Defaults to `true`.
        /// </summary>
        [Output("allowAdoption")]
        public Output<bool?> AllowAdoption { get; private set; } = null!;

        /// <summary>
        /// Whether the device is administratively disabled. When true, the device will not forward traffic or provide services.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        [Output("forgetOnDestroy")]
        public Output<bool?> ForgetOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The MAC address of the device in standard format (e.g., 'aa:bb:cc:dd:ee:ff'). This is used to identify and manage
        /// specific devices that have already been adopted by the controller.
        /// </summary>
        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the device that will be displayed in the UniFi controller UI. Examples: * 'Office-AP-1' for an
        /// access point * 'Core-Switch-01' for a switch * 'Main-Gateway' for a gateway Choose descriptive names that indicate
        /// location and purpose.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of port-specific configuration overrides for UniFi switches. This allows you to customize individual port
        /// settings such as: * Port names and labels for easy identification * Port profiles for VLAN and security settings *
        /// Operating modes for special functions Common use cases include: * Setting up trunk ports for inter-switch connections *
        /// Configuring PoE settings for powered devices * Creating mirrored ports for network monitoring * Setting up link
        /// aggregation between switches or servers
        /// </summary>
        [Output("portOverrides")]
        public Output<ImmutableArray<Outputs.DevicePortOverride>> PortOverrides { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the device is located. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;


        /// <summary>
        /// Create a Device resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Device(string name, DeviceArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/device:Device", name, args ?? new DeviceArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Device(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/device:Device", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Device resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Device Get(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new Device(name, id, state, options);
        }
    }

    public sealed class DeviceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically adopt the device when creating this resource. When true: * The controller will attempt to adopt
        /// the device * Device must be in a pending adoption state * Device must be accessible on the network Set to false if you
        /// want to manage adoption manually. Defaults to `true`.
        /// </summary>
        [Input("allowAdoption")]
        public Input<bool>? AllowAdoption { get; set; }

        [Input("forgetOnDestroy")]
        public Input<bool>? ForgetOnDestroy { get; set; }

        /// <summary>
        /// The MAC address of the device in standard format (e.g., 'aa:bb:cc:dd:ee:ff'). This is used to identify and manage
        /// specific devices that have already been adopted by the controller.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// A friendly name for the device that will be displayed in the UniFi controller UI. Examples: * 'Office-AP-1' for an
        /// access point * 'Core-Switch-01' for a switch * 'Main-Gateway' for a gateway Choose descriptive names that indicate
        /// location and purpose.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portOverrides")]
        private InputList<Inputs.DevicePortOverrideArgs>? _portOverrides;

        /// <summary>
        /// A list of port-specific configuration overrides for UniFi switches. This allows you to customize individual port
        /// settings such as: * Port names and labels for easy identification * Port profiles for VLAN and security settings *
        /// Operating modes for special functions Common use cases include: * Setting up trunk ports for inter-switch connections *
        /// Configuring PoE settings for powered devices * Creating mirrored ports for network monitoring * Setting up link
        /// aggregation between switches or servers
        /// </summary>
        public InputList<Inputs.DevicePortOverrideArgs> PortOverrides
        {
            get => _portOverrides ?? (_portOverrides = new InputList<Inputs.DevicePortOverrideArgs>());
            set => _portOverrides = value;
        }

        /// <summary>
        /// The name of the UniFi site where the device is located. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DeviceArgs()
        {
        }
        public static new DeviceArgs Empty => new DeviceArgs();
    }

    public sealed class DeviceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically adopt the device when creating this resource. When true: * The controller will attempt to adopt
        /// the device * Device must be in a pending adoption state * Device must be accessible on the network Set to false if you
        /// want to manage adoption manually. Defaults to `true`.
        /// </summary>
        [Input("allowAdoption")]
        public Input<bool>? AllowAdoption { get; set; }

        /// <summary>
        /// Whether the device is administratively disabled. When true, the device will not forward traffic or provide services.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("forgetOnDestroy")]
        public Input<bool>? ForgetOnDestroy { get; set; }

        /// <summary>
        /// The MAC address of the device in standard format (e.g., 'aa:bb:cc:dd:ee:ff'). This is used to identify and manage
        /// specific devices that have already been adopted by the controller.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// A friendly name for the device that will be displayed in the UniFi controller UI. Examples: * 'Office-AP-1' for an
        /// access point * 'Core-Switch-01' for a switch * 'Main-Gateway' for a gateway Choose descriptive names that indicate
        /// location and purpose.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portOverrides")]
        private InputList<Inputs.DevicePortOverrideGetArgs>? _portOverrides;

        /// <summary>
        /// A list of port-specific configuration overrides for UniFi switches. This allows you to customize individual port
        /// settings such as: * Port names and labels for easy identification * Port profiles for VLAN and security settings *
        /// Operating modes for special functions Common use cases include: * Setting up trunk ports for inter-switch connections *
        /// Configuring PoE settings for powered devices * Creating mirrored ports for network monitoring * Setting up link
        /// aggregation between switches or servers
        /// </summary>
        public InputList<Inputs.DevicePortOverrideGetArgs> PortOverrides
        {
            get => _portOverrides ?? (_portOverrides = new InputList<Inputs.DevicePortOverrideGetArgs>());
            set => _portOverrides = value;
        }

        /// <summary>
        /// The name of the UniFi site where the device is located. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DeviceState()
        {
        }
        public static new DeviceState Empty => new DeviceState();
    }
}
