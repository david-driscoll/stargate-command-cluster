// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// Most recent status for this integration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PostureIntegration_status : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If the last synchronization failed, this shows the error message associated with the failed synchronization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>Timestamp of the last synchronization with the device posture provider, in RFC 3339 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastSync { get; set; }
#nullable restore
#else
        public string LastSync { get; set; }
#endif
        /// <summary>The number of Tailscale nodes that were matched with provider.</summary>
        public int? MatchedCount { get; set; }
        /// <summary>The number of Tailscale nodes with identifiers for matching.</summary>
        public int? PossibleMatchedCount { get; set; }
        /// <summary>The number of devices known to the provider.</summary>
        public int? ProviderHostCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.PostureIntegration_status"/> and sets the default values.
        /// </summary>
        public PostureIntegration_status()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.PostureIntegration_status"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.PostureIntegration_status CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.PostureIntegration_status();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "error", n => { Error = n.GetStringValue(); } },
                { "lastSync", n => { LastSync = n.GetStringValue(); } },
                { "matchedCount", n => { MatchedCount = n.GetIntValue(); } },
                { "possibleMatchedCount", n => { PossibleMatchedCount = n.GetIntValue(); } },
                { "providerHostCount", n => { ProviderHostCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("error", Error);
            writer.WriteStringValue("lastSync", LastSync);
            writer.WriteIntValue("matchedCount", MatchedCount);
            writer.WriteIntValue("possibleMatchedCount", PossibleMatchedCount);
            writer.WriteIntValue("providerHostCount", ProviderHostCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
