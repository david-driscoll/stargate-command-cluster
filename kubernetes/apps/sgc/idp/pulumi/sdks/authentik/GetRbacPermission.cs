// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    public static class GetRbacPermission
    {
        public static Task<GetRbacPermissionResult> InvokeAsync(GetRbacPermissionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRbacPermissionResult>("authentik:index/getRbacPermission:getRbacPermission", args ?? new GetRbacPermissionArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetRbacPermissionResult> Invoke(GetRbacPermissionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRbacPermissionResult>("authentik:index/getRbacPermission:getRbacPermission", args ?? new GetRbacPermissionInvokeArgs(), options.WithDefaults());

        public static Output<GetRbacPermissionResult> Invoke(GetRbacPermissionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRbacPermissionResult>("authentik:index/getRbacPermission:getRbacPermission", args ?? new GetRbacPermissionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRbacPermissionArgs : global::Pulumi.InvokeArgs
    {
        [Input("codename", required: true)]
        public string Codename { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        public GetRbacPermissionArgs()
        {
        }
        public static new GetRbacPermissionArgs Empty => new GetRbacPermissionArgs();
    }

    public sealed class GetRbacPermissionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("codename", required: true)]
        public Input<string> Codename { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetRbacPermissionInvokeArgs()
        {
        }
        public static new GetRbacPermissionInvokeArgs Empty => new GetRbacPermissionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRbacPermissionResult
    {
        public readonly string App;
        public readonly string Codename;
        public readonly string Id;
        public readonly string Model;

        [OutputConstructor]
        private GetRbacPermissionResult(
            string app,

            string codename,

            string id,

            string model)
        {
            App = app;
            Codename = codename;
            Id = id;
            Model = model;
        }
    }
}
