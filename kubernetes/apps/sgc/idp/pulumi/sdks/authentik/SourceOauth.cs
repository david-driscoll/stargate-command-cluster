// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    [AuthentikResourceType("authentik:index/sourceOauth:SourceOauth")]
    public partial class SourceOauth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Only required for OAuth1.
        /// </summary>
        [Output("accessTokenUrl")]
        public Output<string?> AccessTokenUrl { get; private set; } = null!;

        [Output("additionalScopes")]
        public Output<string?> AdditionalScopes { get; private set; } = null!;

        [Output("authenticationFlow")]
        public Output<string?> AuthenticationFlow { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        /// </summary>
        [Output("authorizationCodeAuthMethod")]
        public Output<string?> AuthorizationCodeAuthMethod { get; private set; } = null!;

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Output("authorizationUrl")]
        public Output<string?> AuthorizationUrl { get; private set; } = null!;

        /// <summary>
        /// Generated.
        /// </summary>
        [Output("callbackUri")]
        public Output<string> CallbackUri { get; private set; } = null!;

        [Output("consumerKey")]
        public Output<string> ConsumerKey { get; private set; } = null!;

        [Output("consumerSecret")]
        public Output<string> ConsumerSecret { get; private set; } = null!;

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("enrollmentFlow")]
        public Output<string?> EnrollmentFlow { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Output("groupMatchingMode")]
        public Output<string?> GroupMatchingMode { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        /// pass objects. Generated.
        /// </summary>
        [Output("oidcJwks")]
        public Output<string> OidcJwks { get; private set; } = null!;

        /// <summary>
        /// Automatically configure JWKS if not specified by `oidc_well_known_url`.
        /// </summary>
        [Output("oidcJwksUrl")]
        public Output<string?> OidcJwksUrl { get; private set; } = null!;

        /// <summary>
        /// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        /// `.well-known/openid-configuration`.
        /// </summary>
        [Output("oidcWellKnownUrl")]
        public Output<string?> OidcWellKnownUrl { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Output("policyEngineMode")]
        public Output<string?> PolicyEngineMode { get; private set; } = null!;

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Output("profileUrl")]
        public Output<string?> ProfileUrl { get; private set; } = null!;

        [Output("propertyMappings")]
        public Output<ImmutableArray<string>> PropertyMappings { get; private set; } = null!;

        [Output("propertyMappingsGroups")]
        public Output<ImmutableArray<string>> PropertyMappingsGroups { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `apple` - `openidconnect` - `azuread` - `discord` - `facebook` - `github` - `gitlab` - `google` -
        /// `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Output("requestTokenUrl")]
        public Output<string?> RequestTokenUrl { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("sourceOauthId")]
        public Output<string> SourceOauthId { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Output("userMatchingMode")]
        public Output<string?> UserMatchingMode { get; private set; } = null!;

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Output("userPathTemplate")]
        public Output<string?> UserPathTemplate { get; private set; } = null!;

        /// <summary>
        /// Generated.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a SourceOauth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceOauth(string name, SourceOauthArgs args, CustomResourceOptions? options = null)
            : base("authentik:index/sourceOauth:SourceOauth", name, args ?? new SourceOauthArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SourceOauth(string name, Input<string> id, SourceOauthState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/sourceOauth:SourceOauth", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "consumerSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceOauth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceOauth Get(string name, Input<string> id, SourceOauthState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceOauth(name, id, state, options);
        }
    }

    public sealed class SourceOauthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only required for OAuth1.
        /// </summary>
        [Input("accessTokenUrl")]
        public Input<string>? AccessTokenUrl { get; set; }

        [Input("additionalScopes")]
        public Input<string>? AdditionalScopes { get; set; }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        /// <summary>
        /// Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        /// </summary>
        [Input("authorizationCodeAuthMethod")]
        public Input<string>? AuthorizationCodeAuthMethod { get; set; }

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("authorizationUrl")]
        public Input<string>? AuthorizationUrl { get; set; }

        [Input("consumerKey", required: true)]
        public Input<string> ConsumerKey { get; set; } = null!;

        [Input("consumerSecret", required: true)]
        private Input<string>? _consumerSecret;
        public Input<string>? ConsumerSecret
        {
            get => _consumerSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        /// pass objects. Generated.
        /// </summary>
        [Input("oidcJwks")]
        public Input<string>? OidcJwks { get; set; }

        /// <summary>
        /// Automatically configure JWKS if not specified by `oidc_well_known_url`.
        /// </summary>
        [Input("oidcJwksUrl")]
        public Input<string>? OidcJwksUrl { get; set; }

        /// <summary>
        /// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        /// `.well-known/openid-configuration`.
        /// </summary>
        [Input("oidcWellKnownUrl")]
        public Input<string>? OidcWellKnownUrl { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        [Input("propertyMappings")]
        private InputList<string>? _propertyMappings;
        public InputList<string> PropertyMappings
        {
            get => _propertyMappings ?? (_propertyMappings = new InputList<string>());
            set => _propertyMappings = value;
        }

        [Input("propertyMappingsGroups")]
        private InputList<string>? _propertyMappingsGroups;
        public InputList<string> PropertyMappingsGroups
        {
            get => _propertyMappingsGroups ?? (_propertyMappingsGroups = new InputList<string>());
            set => _propertyMappingsGroups = value;
        }

        /// <summary>
        /// Allowed values: - `apple` - `openidconnect` - `azuread` - `discord` - `facebook` - `github` - `gitlab` - `google` -
        /// `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        /// </summary>
        [Input("providerType", required: true)]
        public Input<string> ProviderType { get; set; } = null!;

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("requestTokenUrl")]
        public Input<string>? RequestTokenUrl { get; set; }

        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        [Input("sourceOauthId")]
        public Input<string>? SourceOauthId { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourceOauthArgs()
        {
        }
        public static new SourceOauthArgs Empty => new SourceOauthArgs();
    }

    public sealed class SourceOauthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only required for OAuth1.
        /// </summary>
        [Input("accessTokenUrl")]
        public Input<string>? AccessTokenUrl { get; set; }

        [Input("additionalScopes")]
        public Input<string>? AdditionalScopes { get; set; }

        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        /// <summary>
        /// Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        /// </summary>
        [Input("authorizationCodeAuthMethod")]
        public Input<string>? AuthorizationCodeAuthMethod { get; set; }

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("authorizationUrl")]
        public Input<string>? AuthorizationUrl { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("callbackUri")]
        public Input<string>? CallbackUri { get; set; }

        [Input("consumerKey")]
        public Input<string>? ConsumerKey { get; set; }

        [Input("consumerSecret")]
        private Input<string>? _consumerSecret;
        public Input<string>? ConsumerSecret
        {
            get => _consumerSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        /// pass objects. Generated.
        /// </summary>
        [Input("oidcJwks")]
        public Input<string>? OidcJwks { get; set; }

        /// <summary>
        /// Automatically configure JWKS if not specified by `oidc_well_known_url`.
        /// </summary>
        [Input("oidcJwksUrl")]
        public Input<string>? OidcJwksUrl { get; set; }

        /// <summary>
        /// Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        /// `.well-known/openid-configuration`.
        /// </summary>
        [Input("oidcWellKnownUrl")]
        public Input<string>? OidcWellKnownUrl { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        [Input("propertyMappings")]
        private InputList<string>? _propertyMappings;
        public InputList<string> PropertyMappings
        {
            get => _propertyMappings ?? (_propertyMappings = new InputList<string>());
            set => _propertyMappings = value;
        }

        [Input("propertyMappingsGroups")]
        private InputList<string>? _propertyMappingsGroups;
        public InputList<string> PropertyMappingsGroups
        {
            get => _propertyMappingsGroups ?? (_propertyMappingsGroups = new InputList<string>());
            set => _propertyMappingsGroups = value;
        }

        /// <summary>
        /// Allowed values: - `apple` - `openidconnect` - `azuread` - `discord` - `facebook` - `github` - `gitlab` - `google` -
        /// `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        /// </summary>
        [Input("requestTokenUrl")]
        public Input<string>? RequestTokenUrl { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("sourceOauthId")]
        public Input<string>? SourceOauthId { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourceOauthState()
        {
        }
        public static new SourceOauthState Empty => new SourceOauthState();
    }
}
