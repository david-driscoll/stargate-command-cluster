// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi.Inputs
{

    public sealed class FirewallZonePolicySourceGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("clientMacs")]
        private InputList<string>? _clientMacs;

        /// <summary>
        /// List of client MAC addresses.
        /// </summary>
        public InputList<string> ClientMacs
        {
            get => _clientMacs ?? (_clientMacs = new InputList<string>());
            set => _clientMacs = value;
        }

        /// <summary>
        /// ID of the source IP group.
        /// </summary>
        [Input("ipGroupId")]
        public Input<string>? IpGroupId { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;

        /// <summary>
        /// List of source IPs.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// Source MAC address.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("macs")]
        private InputList<string>? _macs;

        /// <summary>
        /// List of MAC addresses.
        /// </summary>
        public InputList<string> Macs
        {
            get => _macs ?? (_macs = new InputList<string>());
            set => _macs = value;
        }

        /// <summary>
        /// Whether to match opposite IPs.
        /// </summary>
        [Input("matchOppositeIps")]
        public Input<bool>? MatchOppositeIps { get; set; }

        /// <summary>
        /// Whether to match opposite networks.
        /// </summary>
        [Input("matchOppositeNetworks")]
        public Input<bool>? MatchOppositeNetworks { get; set; }

        /// <summary>
        /// Whether to match opposite ports.
        /// </summary>
        [Input("matchOppositePorts")]
        public Input<bool>? MatchOppositePorts { get; set; }

        [Input("networkIds")]
        private InputList<string>? _networkIds;

        /// <summary>
        /// List of network IDs.
        /// </summary>
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// Source port.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// ID of the source port group.
        /// </summary>
        [Input("portGroupId")]
        public Input<string>? PortGroupId { get; set; }

        /// <summary>
        /// ID of the firewall zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public FirewallZonePolicySourceGetArgs()
        {
        }
        public static new FirewallZonePolicySourceGetArgs Empty => new FirewallZonePolicySourceGetArgs();
    }
}
