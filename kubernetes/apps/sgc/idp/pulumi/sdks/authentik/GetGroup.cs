// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    public static class GetGroup
    {
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("authentik:index/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("authentik:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());

        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("authentik:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("includeUsers")]
        public bool? IncludeUsers { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("pk")]
        public string? Pk { get; set; }

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("includeUsers")]
        public Input<bool>? IncludeUsers { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pk")]
        public Input<string>? Pk { get; set; }

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        public readonly string Attributes;
        public readonly string Id;
        public readonly bool? IncludeUsers;
        public readonly bool IsSuperuser;
        public readonly string? Name;
        public readonly double NumPk;
        public readonly string Parent;
        public readonly string ParentName;
        public readonly string? Pk;
        public readonly ImmutableArray<double> Users;
        public readonly ImmutableArray<Outputs.GetGroupUsersObjResult> UsersObjs;

        [OutputConstructor]
        private GetGroupResult(
            string attributes,

            string id,

            bool? includeUsers,

            bool isSuperuser,

            string? name,

            double numPk,

            string parent,

            string parentName,

            string? pk,

            ImmutableArray<double> users,

            ImmutableArray<Outputs.GetGroupUsersObjResult> usersObjs)
        {
            Attributes = attributes;
            Id = id;
            IncludeUsers = includeUsers;
            IsSuperuser = isSuperuser;
            Name = name;
            NumPk = numPk;
            Parent = parent;
            ParentName = parentName;
            Pk = pk;
            Users = users;
            UsersObjs = usersObjs;
        }
    }
}
