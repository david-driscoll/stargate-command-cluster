// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// An API access token or Auth Key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Key : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>`capabilities` is a mapping of resources to permissible actions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Tailscale.Client.Models.KeyCapabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::Tailscale.Client.Models.KeyCapabilities Capabilities { get; set; }
#endif
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The expires property</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>Duration in seconds until the key expires.Only applies to auth keys.</summary>
        public double? ExpirySeconds { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Response for a revoked (deleted) or expired key will have an `invalid` field set to true.</summary>
        public bool? Invalid { get; set; }
        /// <summary>The secret key material (only populated at creation time).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyProp { get; set; }
#nullable restore
#else
        public string KeyProp { get; set; }
#endif
        /// <summary>The type of key. Can be one of &quot;auth&quot;, &quot;client&quot; or &quot;api&quot;.- &quot;auth&quot; refers to machine auth keys.- &quot;client&quot; refers to OAuth clients.- &quot;api&quot; refers to personal API access tokens or tokens generated using an OAuth client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyType { get; set; }
#nullable restore
#else
        public string KeyType { get; set; }
#endif
        /// <summary>The revoked property</summary>
        public DateTimeOffset? Revoked { get; set; }
        /// <summary>DoUpdate list of scopes granted to the key.Only applies to OAuth clients and API access tokens.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Scopes { get; set; }
#nullable restore
#else
        public List<string> Scopes { get; set; }
#endif
        /// <summary>DoUpdate list of tags associated to the OAuth client. Auth keys created with this client must have these exact tags, or tags owned by the client&apos;s tags. Mandatory if the scopes include &quot;devices:core&quot; or &quot;auth_keys&quot;. Only applies to OAuth clients.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>ID of the user who created this key, empty for keys created by OAuth clients.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.Key"/> and sets the default values.
        /// </summary>
        public Key()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.Key"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.Key CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.Key();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capabilities", n => { Capabilities = n.GetObjectValue<global::Tailscale.Client.Models.KeyCapabilities>(global::Tailscale.Client.Models.KeyCapabilities.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                { "expirySeconds", n => { ExpirySeconds = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invalid", n => { Invalid = n.GetBoolValue(); } },
                { "key", n => { KeyProp = n.GetStringValue(); } },
                { "keyType", n => { KeyType = n.GetStringValue(); } },
                { "revoked", n => { Revoked = n.GetDateTimeOffsetValue(); } },
                { "scopes", n => { Scopes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Tailscale.Client.Models.KeyCapabilities>("capabilities", Capabilities);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteDoubleValue("expirySeconds", ExpirySeconds);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("invalid", Invalid);
            writer.WriteStringValue("key", KeyProp);
            writer.WriteStringValue("keyType", KeyType);
            writer.WriteDateTimeOffsetValue("revoked", Revoked);
            writer.WriteCollectionOfPrimitiveValues<string>("scopes", Scopes);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
