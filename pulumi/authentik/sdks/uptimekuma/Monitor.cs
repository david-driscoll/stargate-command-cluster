// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Uptimekuma
{
    [UptimekumaResourceType("uptimekuma:index/monitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication method (basic, ntlm, mtls).
        /// </summary>
        [Output("authMethod")]
        public Output<string?> AuthMethod { get; private set; } = null!;

        /// <summary>
        /// Basic auth password.
        /// </summary>
        [Output("basicAuthPass")]
        public Output<string?> BasicAuthPass { get; private set; } = null!;

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Output("basicAuthUser")]
        public Output<string?> BasicAuthUser { get; private set; } = null!;

        /// <summary>
        /// Request body for http monitors.
        /// </summary>
        [Output("body")]
        public Output<string?> Body { get; private set; } = null!;

        /// <summary>
        /// Monitor description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Request headers for http monitors (JSON format).
        /// </summary>
        [Output("headers")]
        public Output<string?> Headers { get; private set; } = null!;

        /// <summary>
        /// Hostname for ping, port, etc. monitors.
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// Ignore TLS/SSL errors.
        /// </summary>
        [Output("ignoreTls")]
        public Output<bool?> IgnoreTls { get; private set; } = null!;

        /// <summary>
        /// Check interval in seconds.
        /// </summary>
        [Output("interval")]
        public Output<double> Interval { get; private set; } = null!;

        /// <summary>
        /// Keyword to search for in response.
        /// </summary>
        [Output("keyword")]
        public Output<string?> Keyword { get; private set; } = null!;

        /// <summary>
        /// Maximum number of redirects to follow.
        /// </summary>
        [Output("maxRedirects")]
        public Output<double?> MaxRedirects { get; private set; } = null!;

        /// <summary>
        /// Maximum number of retries.
        /// </summary>
        [Output("maxRetries")]
        public Output<double> MaxRetries { get; private set; } = null!;

        /// <summary>
        /// HTTP method (GET, POST, etc.) for http monitors.
        /// </summary>
        [Output("method")]
        public Output<string?> Method { get; private set; } = null!;

        /// <summary>
        /// Monitor identifier.
        /// </summary>
        [Output("monitorId")]
        public Output<double> MonitorId { get; private set; } = null!;

        /// <summary>
        /// Monitor name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Port number for port monitors.
        /// </summary>
        [Output("port")]
        public Output<double?> Port { get; private set; } = null!;

        /// <summary>
        /// Notification resend interval in seconds.
        /// </summary>
        [Output("resendInterval")]
        public Output<double> ResendInterval { get; private set; } = null!;

        /// <summary>
        /// Retry interval in seconds.
        /// </summary>
        [Output("retryInterval")]
        public Output<double> RetryInterval { get; private set; } = null!;

        /// <summary>
        /// Monitor type (http, ping, port, etc.).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Invert status (treat DOWN as UP and vice versa).
        /// </summary>
        [Output("upsideDown")]
        public Output<bool?> UpsideDown { get; private set; } = null!;

        /// <summary>
        /// URL to monitor (required for http, keyword monitors).
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("uptimekuma:index/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("uptimekuma:index/monitor:Monitor", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "basicAuthPass",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication method (basic, ntlm, mtls).
        /// </summary>
        [Input("authMethod")]
        public Input<string>? AuthMethod { get; set; }

        [Input("basicAuthPass")]
        private Input<string>? _basicAuthPass;

        /// <summary>
        /// Basic auth password.
        /// </summary>
        public Input<string>? BasicAuthPass
        {
            get => _basicAuthPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuthPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Input("basicAuthUser")]
        public Input<string>? BasicAuthUser { get; set; }

        /// <summary>
        /// Request body for http monitors.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// Monitor description.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Request headers for http monitors (JSON format).
        /// </summary>
        [Input("headers")]
        public Input<string>? Headers { get; set; }

        /// <summary>
        /// Hostname for ping, port, etc. monitors.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Ignore TLS/SSL errors.
        /// </summary>
        [Input("ignoreTls")]
        public Input<bool>? IgnoreTls { get; set; }

        /// <summary>
        /// Check interval in seconds.
        /// </summary>
        [Input("interval")]
        public Input<double>? Interval { get; set; }

        /// <summary>
        /// Keyword to search for in response.
        /// </summary>
        [Input("keyword")]
        public Input<string>? Keyword { get; set; }

        /// <summary>
        /// Maximum number of redirects to follow.
        /// </summary>
        [Input("maxRedirects")]
        public Input<double>? MaxRedirects { get; set; }

        /// <summary>
        /// Maximum number of retries.
        /// </summary>
        [Input("maxRetries")]
        public Input<double>? MaxRetries { get; set; }

        /// <summary>
        /// HTTP method (GET, POST, etc.) for http monitors.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Monitor name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Port number for port monitors.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Notification resend interval in seconds.
        /// </summary>
        [Input("resendInterval")]
        public Input<double>? ResendInterval { get; set; }

        /// <summary>
        /// Retry interval in seconds.
        /// </summary>
        [Input("retryInterval")]
        public Input<double>? RetryInterval { get; set; }

        /// <summary>
        /// Monitor type (http, ping, port, etc.).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Invert status (treat DOWN as UP and vice versa).
        /// </summary>
        [Input("upsideDown")]
        public Input<bool>? UpsideDown { get; set; }

        /// <summary>
        /// URL to monitor (required for http, keyword monitors).
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }

    public sealed class MonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication method (basic, ntlm, mtls).
        /// </summary>
        [Input("authMethod")]
        public Input<string>? AuthMethod { get; set; }

        [Input("basicAuthPass")]
        private Input<string>? _basicAuthPass;

        /// <summary>
        /// Basic auth password.
        /// </summary>
        public Input<string>? BasicAuthPass
        {
            get => _basicAuthPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuthPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Input("basicAuthUser")]
        public Input<string>? BasicAuthUser { get; set; }

        /// <summary>
        /// Request body for http monitors.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// Monitor description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Request headers for http monitors (JSON format).
        /// </summary>
        [Input("headers")]
        public Input<string>? Headers { get; set; }

        /// <summary>
        /// Hostname for ping, port, etc. monitors.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Ignore TLS/SSL errors.
        /// </summary>
        [Input("ignoreTls")]
        public Input<bool>? IgnoreTls { get; set; }

        /// <summary>
        /// Check interval in seconds.
        /// </summary>
        [Input("interval")]
        public Input<double>? Interval { get; set; }

        /// <summary>
        /// Keyword to search for in response.
        /// </summary>
        [Input("keyword")]
        public Input<string>? Keyword { get; set; }

        /// <summary>
        /// Maximum number of redirects to follow.
        /// </summary>
        [Input("maxRedirects")]
        public Input<double>? MaxRedirects { get; set; }

        /// <summary>
        /// Maximum number of retries.
        /// </summary>
        [Input("maxRetries")]
        public Input<double>? MaxRetries { get; set; }

        /// <summary>
        /// HTTP method (GET, POST, etc.) for http monitors.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Monitor identifier.
        /// </summary>
        [Input("monitorId")]
        public Input<double>? MonitorId { get; set; }

        /// <summary>
        /// Monitor name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Port number for port monitors.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Notification resend interval in seconds.
        /// </summary>
        [Input("resendInterval")]
        public Input<double>? ResendInterval { get; set; }

        /// <summary>
        /// Retry interval in seconds.
        /// </summary>
        [Input("retryInterval")]
        public Input<double>? RetryInterval { get; set; }

        /// <summary>
        /// Monitor type (http, ping, port, etc.).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Invert status (treat DOWN as UP and vice versa).
        /// </summary>
        [Input("upsideDown")]
        public Input<bool>? UpsideDown { get; set; }

        /// <summary>
        /// URL to monitor (required for http, keyword monitors).
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public MonitorState()
        {
        }
        public static new MonitorState Empty => new MonitorState();
    }
}
