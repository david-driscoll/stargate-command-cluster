// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetNetworkConfiguration
    {
        public static Task<GetNetworkConfigurationResult> InvokeAsync(GetNetworkConfigurationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkConfigurationResult>("truenas:index/getNetworkConfiguration:getNetworkConfiguration", args ?? new GetNetworkConfigurationArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetNetworkConfigurationResult> Invoke(GetNetworkConfigurationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkConfigurationResult>("truenas:index/getNetworkConfiguration:getNetworkConfiguration", args ?? new GetNetworkConfigurationInvokeArgs(), options.WithDefaults());

        public static Output<GetNetworkConfigurationResult> Invoke(GetNetworkConfigurationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkConfigurationResult>("truenas:index/getNetworkConfiguration:getNetworkConfiguration", args ?? new GetNetworkConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkConfigurationArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        public GetNetworkConfigurationArgs()
        {
        }
        public static new GetNetworkConfigurationArgs Empty => new GetNetworkConfigurationArgs();
    }

    public sealed class GetNetworkConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetNetworkConfigurationInvokeArgs()
        {
        }
        public static new GetNetworkConfigurationInvokeArgs Empty => new GetNetworkConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkConfigurationResult
    {
        public readonly string Domain;
        public readonly string Hostname;
        public readonly string Httpproxy;
        public readonly string Id;
        public readonly string Ipv4gateway;
        public readonly string Ipv6gateway;
        public readonly string Nameserver1;
        public readonly string Nameserver2;
        public readonly string Nameserver3;
        public readonly bool NetwaitEnabled;
        public readonly ImmutableArray<string> NetwaitIps;
        public readonly ImmutableArray<Outputs.GetNetworkConfigurationServiceAnnouncementResult> ServiceAnnouncements;

        [OutputConstructor]
        private GetNetworkConfigurationResult(
            string domain,

            string hostname,

            string httpproxy,

            string id,

            string ipv4gateway,

            string ipv6gateway,

            string nameserver1,

            string nameserver2,

            string nameserver3,

            bool netwaitEnabled,

            ImmutableArray<string> netwaitIps,

            ImmutableArray<Outputs.GetNetworkConfigurationServiceAnnouncementResult> serviceAnnouncements)
        {
            Domain = domain;
            Hostname = hostname;
            Httpproxy = httpproxy;
            Id = id;
            Ipv4gateway = ipv4gateway;
            Ipv6gateway = ipv6gateway;
            Nameserver1 = nameserver1;
            Nameserver2 = nameserver2;
            Nameserver3 = nameserver3;
            NetwaitEnabled = netwaitEnabled;
            NetwaitIps = netwaitIps;
            ServiceAnnouncements = serviceAnnouncements;
        }
    }
}
