// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Models;
using Tailscale.Client.Tailnet.Item.AwsExternalId.Item;
namespace Tailscale.Client.Tailnet.Item.AwsExternalId
{
    /// <summary>
    /// Builds and executes requests for operations under \tailnet\{tailnet}\aws-external-id
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AwsExternalIdRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Tailscale.Client.tailnet.item.awsExternalId.item collection</summary>
        /// <param name="position">The AWS external ID to validate.</param>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.AwsExternalId.Item.AwsExternalIdItemRequestBuilder"/></returns>
        public global::Tailscale.Client.Tailnet.Item.AwsExternalId.Item.AwsExternalIdItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Tailscale.Client.Tailnet.Item.AwsExternalId.Item.AwsExternalIdItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AwsExternalIdRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/aws-external-id", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AwsExternalIdRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/aws-external-id", rawUrl)
        {
        }
        /// <summary>
        /// Get an AWS external id to use for streaming tailnet logs to S3 using role-based authentication,creating a new one for this tailnet when necessary.OAuth Scope: `log_streaming`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.AwsExternalId"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Models.AwsExternalId?> PostAsync(global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Models.AwsExternalId> PostAsync(global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Models.AwsExternalId>(requestInfo, global::Tailscale.Client.Models.AwsExternalId.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get an AWS external id to use for streaming tailnet logs to S3 using role-based authentication,creating a new one for this tailnet when necessary.OAuth Scope: `log_streaming`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Tailnet.Item.AwsExternalId.AwsExternalIdRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AwsExternalIdRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
