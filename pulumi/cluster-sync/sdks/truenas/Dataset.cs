// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/dataset:Dataset")]
    public partial class Dataset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determine how chmod behaves when adjusting file ACLs. See the zfs(8) aclmode property.
        /// </summary>
        [Output("aclMode")]
        public Output<string> AclMode { get; private set; } = null!;

        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// Choose 'on' to update the access time for files when they are read. Choose 'off' to prevent producing log traffic when
        /// reading files
        /// </summary>
        [Output("atime")]
        public Output<string> Atime { get; private set; } = null!;

        [Output("caseSensitivity")]
        public Output<string> CaseSensitivity { get; private set; } = null!;

        /// <summary>
        /// Notes about the dataset.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        [Output("compression")]
        public Output<string> Compression { get; private set; } = null!;

        [Output("copies")]
        public Output<double> Copies { get; private set; } = null!;

        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        [Output("deduplication")]
        public Output<string> Deduplication { get; private set; } = null!;

        [Output("encrypted")]
        public Output<bool> Encrypted { get; private set; } = null!;

        [Output("encryptionAlgorithm")]
        public Output<string> EncryptionAlgorithm { get; private set; } = null!;

        [Output("encryptionKey")]
        public Output<string> EncryptionKey { get; private set; } = null!;

        [Output("exec")]
        public Output<string> Exec { get; private set; } = null!;

        [Output("generateKey")]
        public Output<bool> GenerateKey { get; private set; } = null!;

        [Output("inheritEncryption")]
        public Output<bool?> InheritEncryption { get; private set; } = null!;

        [Output("managedBy")]
        public Output<string> ManagedBy { get; private set; } = null!;

        [Output("mountPoint")]
        public Output<string> MountPoint { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the dataset. Cannot be changed after the dataset is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        [Output("pbkdf2iters")]
        public Output<double> Pbkdf2iters { get; private set; } = null!;

        [Output("pool")]
        public Output<string> Pool { get; private set; } = null!;

        [Output("quotaBytes")]
        public Output<double> QuotaBytes { get; private set; } = null!;

        [Output("quotaCritical")]
        public Output<double> QuotaCritical { get; private set; } = null!;

        [Output("quotaWarning")]
        public Output<double> QuotaWarning { get; private set; } = null!;

        [Output("readonly")]
        public Output<string> Readonly { get; private set; } = null!;

        [Output("recordSize")]
        public Output<string> RecordSize { get; private set; } = null!;

        [Output("refQuotaBytes")]
        public Output<double> RefQuotaBytes { get; private set; } = null!;

        [Output("refQuotaCritical")]
        public Output<double> RefQuotaCritical { get; private set; } = null!;

        [Output("refQuotaWarning")]
        public Output<double> RefQuotaWarning { get; private set; } = null!;

        [Output("shareType")]
        public Output<string> ShareType { get; private set; } = null!;

        [Output("snapDir")]
        public Output<string> SnapDir { get; private set; } = null!;

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Output("sync")]
        public Output<string> Sync { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DatasetTimeouts?> Timeouts { get; private set; } = null!;

        [Output("truenasDatasetId")]
        public Output<string> TruenasDatasetId { get; private set; } = null!;


        /// <summary>
        /// Create a Dataset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dataset(string name, DatasetArgs args, CustomResourceOptions? options = null)
            : base("truenas:index/dataset:Dataset", name, args ?? new DatasetArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Dataset(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/dataset:Dataset", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "encryptionKey",
                    "passphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dataset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dataset Get(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
        {
            return new Dataset(name, id, state, options);
        }
    }

    public sealed class DatasetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determine how chmod behaves when adjusting file ACLs. See the zfs(8) aclmode property.
        /// </summary>
        [Input("aclMode")]
        public Input<string>? AclMode { get; set; }

        /// <summary>
        /// Choose 'on' to update the access time for files when they are read. Choose 'off' to prevent producing log traffic when
        /// reading files
        /// </summary>
        [Input("atime")]
        public Input<string>? Atime { get; set; }

        [Input("caseSensitivity")]
        public Input<string>? CaseSensitivity { get; set; }

        /// <summary>
        /// Notes about the dataset.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("compression")]
        public Input<string>? Compression { get; set; }

        [Input("copies")]
        public Input<double>? Copies { get; set; }

        [Input("deduplication")]
        public Input<string>? Deduplication { get; set; }

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        [Input("encryptionKey")]
        private Input<string>? _encryptionKey;
        public Input<string>? EncryptionKey
        {
            get => _encryptionKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptionKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("exec")]
        public Input<string>? Exec { get; set; }

        [Input("generateKey")]
        public Input<bool>? GenerateKey { get; set; }

        [Input("inheritEncryption")]
        public Input<bool>? InheritEncryption { get; set; }

        /// <summary>
        /// Unique identifier for the dataset. Cannot be changed after the dataset is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pbkdf2iters")]
        public Input<double>? Pbkdf2iters { get; set; }

        [Input("pool", required: true)]
        public Input<string> Pool { get; set; } = null!;

        [Input("quotaBytes")]
        public Input<double>? QuotaBytes { get; set; }

        [Input("quotaCritical")]
        public Input<double>? QuotaCritical { get; set; }

        [Input("quotaWarning")]
        public Input<double>? QuotaWarning { get; set; }

        [Input("readonly")]
        public Input<string>? Readonly { get; set; }

        [Input("recordSize")]
        public Input<string>? RecordSize { get; set; }

        [Input("refQuotaBytes")]
        public Input<double>? RefQuotaBytes { get; set; }

        [Input("refQuotaCritical")]
        public Input<double>? RefQuotaCritical { get; set; }

        [Input("refQuotaWarning")]
        public Input<double>? RefQuotaWarning { get; set; }

        [Input("shareType")]
        public Input<string>? ShareType { get; set; }

        [Input("snapDir")]
        public Input<string>? SnapDir { get; set; }

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Input("sync")]
        public Input<string>? Sync { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DatasetTimeoutsArgs>? Timeouts { get; set; }

        [Input("truenasDatasetId")]
        public Input<string>? TruenasDatasetId { get; set; }

        public DatasetArgs()
        {
        }
        public static new DatasetArgs Empty => new DatasetArgs();
    }

    public sealed class DatasetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determine how chmod behaves when adjusting file ACLs. See the zfs(8) aclmode property.
        /// </summary>
        [Input("aclMode")]
        public Input<string>? AclMode { get; set; }

        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// Choose 'on' to update the access time for files when they are read. Choose 'off' to prevent producing log traffic when
        /// reading files
        /// </summary>
        [Input("atime")]
        public Input<string>? Atime { get; set; }

        [Input("caseSensitivity")]
        public Input<string>? CaseSensitivity { get; set; }

        /// <summary>
        /// Notes about the dataset.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("compression")]
        public Input<string>? Compression { get; set; }

        [Input("copies")]
        public Input<double>? Copies { get; set; }

        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        [Input("deduplication")]
        public Input<string>? Deduplication { get; set; }

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        [Input("encryptionKey")]
        private Input<string>? _encryptionKey;
        public Input<string>? EncryptionKey
        {
            get => _encryptionKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptionKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("exec")]
        public Input<string>? Exec { get; set; }

        [Input("generateKey")]
        public Input<bool>? GenerateKey { get; set; }

        [Input("inheritEncryption")]
        public Input<bool>? InheritEncryption { get; set; }

        [Input("managedBy")]
        public Input<string>? ManagedBy { get; set; }

        [Input("mountPoint")]
        public Input<string>? MountPoint { get; set; }

        /// <summary>
        /// Unique identifier for the dataset. Cannot be changed after the dataset is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pbkdf2iters")]
        public Input<double>? Pbkdf2iters { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("quotaBytes")]
        public Input<double>? QuotaBytes { get; set; }

        [Input("quotaCritical")]
        public Input<double>? QuotaCritical { get; set; }

        [Input("quotaWarning")]
        public Input<double>? QuotaWarning { get; set; }

        [Input("readonly")]
        public Input<string>? Readonly { get; set; }

        [Input("recordSize")]
        public Input<string>? RecordSize { get; set; }

        [Input("refQuotaBytes")]
        public Input<double>? RefQuotaBytes { get; set; }

        [Input("refQuotaCritical")]
        public Input<double>? RefQuotaCritical { get; set; }

        [Input("refQuotaWarning")]
        public Input<double>? RefQuotaWarning { get; set; }

        [Input("shareType")]
        public Input<string>? ShareType { get; set; }

        [Input("snapDir")]
        public Input<string>? SnapDir { get; set; }

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Input("sync")]
        public Input<string>? Sync { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DatasetTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("truenasDatasetId")]
        public Input<string>? TruenasDatasetId { get; set; }

        public DatasetState()
        {
        }
        public static new DatasetState Empty => new DatasetState();
    }
}
