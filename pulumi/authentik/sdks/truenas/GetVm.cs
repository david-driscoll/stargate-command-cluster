// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetVm
    {
        public static Task<GetVmResult> InvokeAsync(GetVmArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmResult>("truenas:index/getVm:getVm", args ?? new GetVmArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetVmResult> Invoke(GetVmInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmResult>("truenas:index/getVm:getVm", args ?? new GetVmInvokeArgs(), options.WithDefaults());

        public static Output<GetVmResult> Invoke(GetVmInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmResult>("truenas:index/getVm:getVm", args ?? new GetVmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("vmId", required: true)]
        public string VmId { get; set; } = null!;

        public GetVmArgs()
        {
        }
        public static new GetVmArgs Empty => new GetVmArgs();
    }

    public sealed class GetVmInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("vmId", required: true)]
        public Input<string> VmId { get; set; } = null!;

        public GetVmInvokeArgs()
        {
        }
        public static new GetVmInvokeArgs Empty => new GetVmInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmResult
    {
        public readonly bool Autostart;
        public readonly string Bootloader;
        public readonly double Cores;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVmDeviceResult> Devices;
        public readonly string Id;
        public readonly double Memory;
        public readonly string Name;
        public readonly double ShutdownTimeout;
        public readonly ImmutableArray<Outputs.GetVmStatusResult> Statuses;
        public readonly double Threads;
        public readonly string Time;
        public readonly double Vcpus;
        public readonly string VmId;

        [OutputConstructor]
        private GetVmResult(
            bool autostart,

            string bootloader,

            double cores,

            string description,

            ImmutableArray<Outputs.GetVmDeviceResult> devices,

            string id,

            double memory,

            string name,

            double shutdownTimeout,

            ImmutableArray<Outputs.GetVmStatusResult> statuses,

            double threads,

            string time,

            double vcpus,

            string vmId)
        {
            Autostart = autostart;
            Bootloader = bootloader;
            Cores = cores;
            Description = description;
            Devices = devices;
            Id = id;
            Memory = memory;
            Name = name;
            ShutdownTimeout = shutdownTimeout;
            Statuses = statuses;
            Threads = threads;
            Time = time;
            Vcpus = vcpus;
            VmId = vmId;
        }
    }
}
