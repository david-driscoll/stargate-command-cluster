<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Mappings.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Mappings.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Collections.Immutable;&#10;using System.Diagnostics;&#10;using System.Linq;&#10;using authentik.Models;&#10;using Humanizer;&#10;using k8s;&#10;using k8s.Models;&#10;using Pulumi;&#10;using Pulumi.Authentik;&#10;using Riok.Mapperly.Abstractions;&#10;&#10;[Mapper(AllowNullPropertyAssignment = false)]&#10;static partial class Mappings&#10;{&#10;  public static KumaUptimeResourceConfigArgs MapMonitor(ApplicationDefinition definition)&#10;  {&#10;    Debug.Assert(definition.Spec.Uptime != null, &quot;definition.Uptime != null&quot;);&#10;    var args = new KumaUptimeResourceConfigArgs()&#10;    {&#10;      Name = PostfixTitle(definition.Spec.Name),&#10;      Active = true,&#10;    };&#10;    switch (definition.Spec.Uptime)&#10;    {&#10;      case { Dns: { } dns }:&#10;        MapToUptime(args, dns);&#10;        break;&#10;      case { Http: { } http }:&#10;        MapToUptime(args, http);&#10;        break;&#10;      case { Ping: { } ping }:&#10;        MapToUptime(args, ping);&#10;        break;&#10;      case { Docker: { } docker }:&#10;        MapToUptime(args, docker);&#10;        break;&#10;      case { Gamedig: { } gamedig }:&#10;        MapToUptime(args, gamedig);&#10;        break;&#10;      case { Group: { } group }:&#10;        MapToUptime(args, group);&#10;        break;&#10;      case { GrpcKeyword: { } grpcKeyword }:&#10;        MapToUptime(args, grpcKeyword);&#10;        break;&#10;      case { JsonQuery: { } jsonQuery }:&#10;        MapToUptime(args, jsonQuery);&#10;        break;&#10;      case { KafkaProducer: { } kafkaProducer }:&#10;        MapToUptime(args, kafkaProducer);&#10;        break;&#10;      case { Keyword: { } keyword }:&#10;        MapToUptime(args, keyword);&#10;        break;&#10;      case { MongoDb: { } mongoDb }:&#10;        MapToUptime(args, mongoDb);&#10;        break;&#10;      case { Mqtt: { } mqtt }:&#10;        MapToUptime(args, mqtt);&#10;        break;&#10;      case { Mysql: { } mysql }:&#10;        MapToUptime(args, mysql);&#10;        break;&#10;      case { Port: { } port }:&#10;        MapToUptime(args, port);&#10;        break;&#10;      case { Postgres: { } postgres }:&#10;        MapToUptime(args, postgres);&#10;        break;&#10;      case { Push: { } push }:&#10;        MapToUptime(args, push);&#10;        break;&#10;      case { Radius: { } radius }:&#10;        MapToUptime(args, radius);&#10;        break;&#10;      case { RealBrowser: { } realBrowser }:&#10;        MapToUptime(args, realBrowser);&#10;        break;&#10;      case { Redis: { } redis }:&#10;        MapToUptime(args, redis);&#10;        break;&#10;      case { Steam: { } steam }:&#10;        MapToUptime(args, steam);&#10;        break;&#10;      case { SqlServer: { } sqlServer }:&#10;        MapToUptime(args, sqlServer);&#10;        break;&#10;      case { TailscalePing: { } tailscalePing }:&#10;        MapToUptime(args, tailscalePing);&#10;        break;&#10;      default:&#10;        throw new ArgumentOutOfRangeException(nameof(definition.Spec.Uptime));&#10;    }&#10;&#10;    return args;&#10;  }&#10;&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, DnsUptime uptime);&#10;&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, HttpUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, PingUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, DockerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, GamedigUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, GroupUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, GrpcKeywordUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, JsonQueryUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, KafkaProducerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, KeywordUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, MongoDbUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, MqttUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, MysqlUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, PortUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, PostgresUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, PushUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, RadiusUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, RealBrowserUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, RedisUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, SteamUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, SqlServerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public static partial void MapToUptime([MappingTarget] KumaUptimeResourceConfigArgs args, TailscalePingUptime uptime);&#10;&#10;  public static partial AuthentikProviderSaml MapToSaml(AuthentikSpec spec);&#10;  public static partial AuthentikProviderOauth2 MapToOauth2(AuthentikSpec spec);&#10;  public static partial AuthentikProviderScim MapToScim(AuthentikSpec spec);&#10;  public static partial AuthentikProviderSsf MapToSsf(AuthentikSpec spec);&#10;  public static partial AuthentikProviderProxy MapToProxy(AuthentikSpec spec);&#10;  public static partial AuthentikProviderRadius MapToRadius(AuthentikSpec spec);&#10;  public static partial AuthentikProviderRac MapToRac(AuthentikSpec spec);&#10;  public static partial AuthentikProviderLdap MapToLdap(AuthentikSpec spec);&#10;  public static partial AuthentikProviderMicrosoftEntra MapToMicrosoftEntra(AuthentikSpec spec);&#10;  public static partial AuthentikProviderGoogleWorkspace MapToGoogleWorkspace(AuthentikSpec spec);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderProxyArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderProxyArgs args, AuthentikProviderProxy instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderOauth2Args args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderOauth2Args args, AuthentikProviderOauth2 instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSamlArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSamlArgs args, AuthentikProviderSaml instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderLdapArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderLdapArgs args, AuthentikProviderLdap instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] SourceSamlArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] SourceSamlArgs args, AuthentikProviderSaml instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRacArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRacArgs args, AuthentikProviderRac instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRadiusArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRadiusArgs args, AuthentikProviderRadius instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSsfArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSsfArgs args, AuthentikProviderSsf instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderScimArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderScimArgs args, AuthentikProviderScim instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderMicrosoftEntraArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderMicrosoftEntraArgs args, AuthentikProviderMicrosoftEntra instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderGoogleWorkspaceArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderGoogleWorkspaceArgs args, AuthentikProviderGoogleWorkspace instance);&#10;&#10;  public static ApplicationDefinitionUptime MapFromUptimeData(IDictionary&lt;string, string&gt; data)&#10;  {&#10;    var jsonData = KubernetesJson.Serialize(data);&#10;    return data[&quot;type&quot;] switch&#10;    {&#10;      &quot;http&quot; =&gt; new ApplicationDefinitionUptime() { Http = KubernetesJson.Deserialize&lt;HttpUptime&gt;(jsonData), },&#10;      &quot;ping&quot; =&gt; new ApplicationDefinitionUptime() { Ping = KubernetesJson.Deserialize&lt;PingUptime&gt;(jsonData), },&#10;      &quot;docker&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Docker = KubernetesJson.Deserialize&lt;DockerUptime&gt;(jsonData), },&#10;      &quot;dns&quot; =&gt; new ApplicationDefinitionUptime() { Dns = KubernetesJson.Deserialize&lt;DnsUptime&gt;(jsonData), },&#10;      &quot;gamedig&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Gamedig = KubernetesJson.Deserialize&lt;GamedigUptime&gt;(jsonData), },&#10;      &quot;group&quot; =&gt; new ApplicationDefinitionUptime() { Group = KubernetesJson.Deserialize&lt;GroupUptime&gt;(jsonData), },&#10;      &quot;grpc-keyword&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { GrpcKeyword = KubernetesJson.Deserialize&lt;GrpcKeywordUptime&gt;(jsonData), },&#10;      &quot;json-query&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { JsonQuery = KubernetesJson.Deserialize&lt;JsonQueryUptime&gt;(jsonData), },&#10;      &quot;kafka-producer&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { KafkaProducer = KubernetesJson.Deserialize&lt;KafkaProducerUptime&gt;(jsonData), },&#10;      &quot;keyword&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Keyword = KubernetesJson.Deserialize&lt;KeywordUptime&gt;(jsonData), },&#10;      &quot;mongodb&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { MongoDb = KubernetesJson.Deserialize&lt;MongoDbUptime&gt;(jsonData), },&#10;      &quot;mqtt&quot; =&gt; new ApplicationDefinitionUptime() { Mqtt = KubernetesJson.Deserialize&lt;MqttUptime&gt;(jsonData), },&#10;      &quot;mysql&quot; =&gt; new ApplicationDefinitionUptime() { Mysql = KubernetesJson.Deserialize&lt;MysqlUptime&gt;(jsonData), },&#10;      &quot;port&quot; =&gt; new ApplicationDefinitionUptime() { Port = KubernetesJson.Deserialize&lt;PortUptime&gt;(jsonData), },&#10;      &quot;postgres&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Postgres = KubernetesJson.Deserialize&lt;PostgresUptime&gt;(jsonData), },&#10;      &quot;push&quot; =&gt; new ApplicationDefinitionUptime() { Push = KubernetesJson.Deserialize&lt;PushUptime&gt;(jsonData), },&#10;      &quot;radius&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Radius = KubernetesJson.Deserialize&lt;RadiusUptime&gt;(jsonData), },&#10;      &quot;real-browser&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { RealBrowser = KubernetesJson.Deserialize&lt;RealBrowserUptime&gt;(jsonData), },&#10;      &quot;redis&quot; =&gt; new ApplicationDefinitionUptime() { Redis = KubernetesJson.Deserialize&lt;RedisUptime&gt;(jsonData), },&#10;      &quot;steam&quot; =&gt; new ApplicationDefinitionUptime() { Steam = KubernetesJson.Deserialize&lt;SteamUptime&gt;(jsonData), },&#10;      &quot;sqlserver&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { SqlServer = KubernetesJson.Deserialize&lt;SqlServerUptime&gt;(jsonData), },&#10;      &quot;tailscale-ping&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { TailscalePing = KubernetesJson.Deserialize&lt;TailscalePingUptime&gt;(jsonData), },&#10;      _ =&gt; throw new ArgumentOutOfRangeException()&#10;    };&#10;  }&#10;&#10;&#10;  public static string ResourceName(ClusterApplicationResources.Args args, ApplicationDefinition resource) =&gt;&#10;    $&quot;{Prefix(args, resource)}-{resource.Metadata.Name}&quot;;&#10;&#10;  private static string Prefix(ClusterApplicationResources.Args args, ApplicationDefinition resource) =&gt;&#10;    resource.Namespace() is { } ns &amp;&amp; ns == args.ClusterName ? args.ClusterName : $&quot;{args.ClusterName}-{resource.Namespace()}&quot;;&#10;&#10;  private static Input&lt;string&gt; MapToStringInput(string value) =&gt; value;&#10;  private static InputList&lt;string&gt; MapToStringInput(ImmutableList&lt;string&gt; value) =&gt; [..value];&#10;  private static InputList&lt;double&gt; MapToDoubleInput(ImmutableList&lt;double&gt; value) =&gt; [..value];&#10;  private static Input&lt;bool&gt;? MapToBoolInput(bool? value) =&gt; value.HasValue ? (Input&lt;bool&gt;?)value : null;&#10;  private static Input&lt;int&gt;? MapToIntInput(int? value) =&gt; value.HasValue ? (Input&lt;int&gt;?)value : null;&#10;&#10;  [UserMapping(Default = false)]&#10;  private static Input&lt;string&gt;? MapToParentName(string? value) =&gt; value is null ? null : MapToStringInput(PostfixName(value));&#10;&#10;  [UserMapping(Ignore = true)]&#10;  public static string PostfixName(string name) =&gt; (OperatingSystem.IsLinux() ? name : $&quot;{name}-test&quot;).ToLowerInvariant().Dehumanize().Underscore().Dasherize();&#10;  [UserMapping(Ignore = true)]&#10;  public static string PostfixTitle(string name) =&gt; OperatingSystem.IsLinux() ? name : $&quot;[Test] {name}&quot;;&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Collections.Immutable;&#10;using System.Diagnostics;&#10;using System.Linq;&#10;using authentik.Models;&#10;using Humanizer;&#10;using k8s;&#10;using k8s.Models;&#10;using Pulumi;&#10;using Pulumi.Authentik;&#10;using Riok.Mapperly.Abstractions;&#10;&#10;[Mapper(AllowNullPropertyAssignment = false)]&#10;partial class Mappings&#10;{&#10;  private readonly KumaUptimeResourceConfigArgs _args;&#10;&#10;  public Mappings(KumaUptimeResourceConfigArgs args)&#10;  {&#10;    _args = args;&#10;  }&#10;&#10;  public KumaUptimeResourceConfigArgs MapMonitor(ApplicationDefinition definition)&#10;  {&#10;    Debug.Assert(definition.Spec.Uptime != null, &quot;definition.Uptime != null&quot;);&#10;    _args.Name = PostfixTitle(definition.Spec.Name);&#10;    _args.Active = true;&#10;    switch (definition.Spec.Uptime)&#10;    {&#10;      case { Dns: { } dns }:&#10;        MapToUptime(dns);&#10;        break;&#10;      case { Http: { } http }:&#10;        MapToUptime(http);&#10;        break;&#10;      case { Ping: { } ping }:&#10;        MapToUptime(ping);&#10;        break;&#10;      case { Docker: { } docker }:&#10;        MapToUptime(docker);&#10;        break;&#10;      case { Gamedig: { } gamedig }:&#10;        MapToUptime(gamedig);&#10;        break;&#10;      case { Group: { } group }:&#10;        MapToUptime(group);&#10;        break;&#10;      case { GrpcKeyword: { } grpcKeyword }:&#10;        MapToUptime(grpcKeyword);&#10;        break;&#10;      case { JsonQuery: { } jsonQuery }:&#10;        MapToUptime(jsonQuery);&#10;        break;&#10;      case { KafkaProducer: { } kafkaProducer }:&#10;        MapToUptime(kafkaProducer);&#10;        break;&#10;      case { Keyword: { } keyword }:&#10;        MapToUptime(keyword);&#10;        break;&#10;      case { MongoDb: { } mongoDb }:&#10;        MapToUptime(mongoDb);&#10;        break;&#10;      case { Mqtt: { } mqtt }:&#10;        MapToUptime(mqtt);&#10;        break;&#10;      case { Mysql: { } mysql }:&#10;        MapToUptime(mysql);&#10;        break;&#10;      case { Port: { } port }:&#10;        MapToUptime(port);&#10;        break;&#10;      case { Postgres: { } postgres }:&#10;        MapToUptime(postgres);&#10;        break;&#10;      case { Push: { } push }:&#10;        MapToUptime(push);&#10;        break;&#10;      case { Radius: { } radius }:&#10;        MapToUptime(radius);&#10;        break;&#10;      case { RealBrowser: { } realBrowser }:&#10;        MapToUptime(realBrowser);&#10;        break;&#10;      case { Redis: { } redis }:&#10;        MapToUptime(redis);&#10;        break;&#10;      case { Steam: { } steam }:&#10;        MapToUptime(steam);&#10;        break;&#10;      case { SqlServer: { } sqlServer }:&#10;        MapToUptime(sqlServer);&#10;        break;&#10;      case { TailscalePing: { } tailscalePing }:&#10;        MapToUptime(tailscalePing);&#10;        break;&#10;      default:&#10;        throw new ArgumentOutOfRangeException(nameof(definition.Spec.Uptime));&#10;    }&#10;&#10;    return _args;&#10;  }&#10;&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(DnsUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(HttpUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(PingUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(DockerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(GamedigUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(GroupUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(GrpcKeywordUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(JsonQueryUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(KafkaProducerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(KeywordUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(MongoDbUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(MqttUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(MysqlUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(PortUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(PostgresUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(PushUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(RadiusUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(RealBrowserUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(RedisUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(SteamUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(SqlServerUptime uptime);&#10;  [MapProperty(&quot;ParentName&quot;, nameof(KumaUptimeResourceConfigArgs.ParentName), Use = nameof(MapToParentName))]&#10;  public partial void MapToUptime(TailscalePingUptime uptime);&#10;&#10;  public static partial AuthentikProviderSaml MapToSaml(AuthentikSpec spec);&#10;  public static partial AuthentikProviderOauth2 MapToOauth2(AuthentikSpec spec);&#10;  public static partial AuthentikProviderScim MapToScim(AuthentikSpec spec);&#10;  public static partial AuthentikProviderSsf MapToSsf(AuthentikSpec spec);&#10;  public static partial AuthentikProviderProxy MapToProxy(AuthentikSpec spec);&#10;  public static partial AuthentikProviderRadius MapToRadius(AuthentikSpec spec);&#10;  public static partial AuthentikProviderRac MapToRac(AuthentikSpec spec);&#10;  public static partial AuthentikProviderLdap MapToLdap(AuthentikSpec spec);&#10;  public static partial AuthentikProviderMicrosoftEntra MapToMicrosoftEntra(AuthentikSpec spec);&#10;  public static partial AuthentikProviderGoogleWorkspace MapToGoogleWorkspace(AuthentikSpec spec);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderProxyArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderProxyArgs args, AuthentikProviderProxy instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderOauth2Args args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderOauth2Args args, AuthentikProviderOauth2 instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSamlArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSamlArgs args, AuthentikProviderSaml instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderLdapArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderLdapArgs args, AuthentikProviderLdap instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] SourceSamlArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] SourceSamlArgs args, AuthentikProviderSaml instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRacArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRacArgs args, AuthentikProviderRac instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRadiusArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderRadiusArgs args, AuthentikProviderRadius instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSsfArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderSsfArgs args, AuthentikProviderSsf instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderScimArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderScimArgs args, AuthentikProviderScim instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderMicrosoftEntraArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderMicrosoftEntraArgs args, AuthentikProviderMicrosoftEntra instance);&#10;&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderGoogleWorkspaceArgs args, ClusterApplicationResources.Args instance);&#10;  public static partial void MapProviderArgs([MappingTarget] ProviderGoogleWorkspaceArgs args, AuthentikProviderGoogleWorkspace instance);&#10;&#10;  public static ApplicationDefinitionUptime MapFromUptimeData(IDictionary&lt;string, string&gt; data)&#10;  {&#10;    var jsonData = KubernetesJson.Serialize(data);&#10;    return data[&quot;type&quot;] switch&#10;    {&#10;      &quot;http&quot; =&gt; new ApplicationDefinitionUptime() { Http = KubernetesJson.Deserialize&lt;HttpUptime&gt;(jsonData), },&#10;      &quot;ping&quot; =&gt; new ApplicationDefinitionUptime() { Ping = KubernetesJson.Deserialize&lt;PingUptime&gt;(jsonData), },&#10;      &quot;docker&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Docker = KubernetesJson.Deserialize&lt;DockerUptime&gt;(jsonData), },&#10;      &quot;dns&quot; =&gt; new ApplicationDefinitionUptime() { Dns = KubernetesJson.Deserialize&lt;DnsUptime&gt;(jsonData), },&#10;      &quot;gamedig&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Gamedig = KubernetesJson.Deserialize&lt;GamedigUptime&gt;(jsonData), },&#10;      &quot;group&quot; =&gt; new ApplicationDefinitionUptime() { Group = KubernetesJson.Deserialize&lt;GroupUptime&gt;(jsonData), },&#10;      &quot;grpc-keyword&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { GrpcKeyword = KubernetesJson.Deserialize&lt;GrpcKeywordUptime&gt;(jsonData), },&#10;      &quot;json-query&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { JsonQuery = KubernetesJson.Deserialize&lt;JsonQueryUptime&gt;(jsonData), },&#10;      &quot;kafka-producer&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { KafkaProducer = KubernetesJson.Deserialize&lt;KafkaProducerUptime&gt;(jsonData), },&#10;      &quot;keyword&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Keyword = KubernetesJson.Deserialize&lt;KeywordUptime&gt;(jsonData), },&#10;      &quot;mongodb&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { MongoDb = KubernetesJson.Deserialize&lt;MongoDbUptime&gt;(jsonData), },&#10;      &quot;mqtt&quot; =&gt; new ApplicationDefinitionUptime() { Mqtt = KubernetesJson.Deserialize&lt;MqttUptime&gt;(jsonData), },&#10;      &quot;mysql&quot; =&gt; new ApplicationDefinitionUptime() { Mysql = KubernetesJson.Deserialize&lt;MysqlUptime&gt;(jsonData), },&#10;      &quot;port&quot; =&gt; new ApplicationDefinitionUptime() { Port = KubernetesJson.Deserialize&lt;PortUptime&gt;(jsonData), },&#10;      &quot;postgres&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Postgres = KubernetesJson.Deserialize&lt;PostgresUptime&gt;(jsonData), },&#10;      &quot;push&quot; =&gt; new ApplicationDefinitionUptime() { Push = KubernetesJson.Deserialize&lt;PushUptime&gt;(jsonData), },&#10;      &quot;radius&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { Radius = KubernetesJson.Deserialize&lt;RadiusUptime&gt;(jsonData), },&#10;      &quot;real-browser&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { RealBrowser = KubernetesJson.Deserialize&lt;RealBrowserUptime&gt;(jsonData), },&#10;      &quot;redis&quot; =&gt; new ApplicationDefinitionUptime() { Redis = KubernetesJson.Deserialize&lt;RedisUptime&gt;(jsonData), },&#10;      &quot;steam&quot; =&gt; new ApplicationDefinitionUptime() { Steam = KubernetesJson.Deserialize&lt;SteamUptime&gt;(jsonData), },&#10;      &quot;sqlserver&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { SqlServer = KubernetesJson.Deserialize&lt;SqlServerUptime&gt;(jsonData), },&#10;      &quot;tailscale-ping&quot; =&gt; new ApplicationDefinitionUptime()&#10;        { TailscalePing = KubernetesJson.Deserialize&lt;TailscalePingUptime&gt;(jsonData), },&#10;      _ =&gt; throw new ArgumentOutOfRangeException()&#10;    };&#10;  }&#10;&#10;&#10;  public static string ResourceName(ClusterApplicationResources.Args args, ApplicationDefinition resource) =&gt;&#10;    $&quot;{Prefix(args, resource)}-{resource.Metadata.Name}&quot;;&#10;&#10;  private static string Prefix(ClusterApplicationResources.Args args, ApplicationDefinition resource) =&gt;&#10;    resource.Namespace() is { } ns &amp;&amp; ns == args.ClusterName ? args.ClusterName : $&quot;{args.ClusterName}-{resource.Namespace()}&quot;;&#10;&#10;  private static Input&lt;string&gt; MapToStringInput(string value) =&gt; value;&#10;  private static InputList&lt;string&gt; MapToStringInput(ImmutableList&lt;string&gt; value) =&gt; [..value];&#10;  private static InputList&lt;double&gt; MapToDoubleInput(ImmutableList&lt;double&gt; value) =&gt; [..value];&#10;  private static Input&lt;bool&gt;? MapToBoolInput(bool? value) =&gt; value.HasValue ? (Input&lt;bool&gt;?)value : null;&#10;  private static Input&lt;int&gt;? MapToIntInput(int? value) =&gt; value.HasValue ? (Input&lt;int&gt;?)value : null;&#10;&#10;  [UserMapping(Default = false)]&#10;  private static Input&lt;string&gt;? MapToParentName(string? value) =&gt; value is null ? null : MapToStringInput(PostfixName(value));&#10;&#10;  [UserMapping(Ignore = true)]&#10;  public static string PostfixName(string name) =&gt; (OperatingSystem.IsLinux() ? name : $&quot;{name}-test&quot;).ToLowerInvariant().Dehumanize().Underscore().Dasherize();&#10;  [UserMapping(Ignore = true)]&#10;  public static string PostfixTitle(string name) =&gt; OperatingSystem.IsLinux() ? name : $&quot;[Test] {name}&quot;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/ApplicationDefinitionUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/ApplicationDefinitionUptime.cs" />
              <option name="originalContent" value="using System.Text.Json.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public record ApplicationDefinitionUptime&#10;{&#10;  [JsonPropertyName(&quot;http&quot;)]&#10;  public HttpUptime? Http { get; set; }&#10;  [JsonPropertyName(&quot;ping&quot;)]&#10;  public PingUptime? Ping { get; set; }&#10;  [JsonPropertyName(&quot;docker&quot;)]&#10;  public DockerUptime? Docker { get; set; }&#10;  [JsonPropertyName(&quot;dns&quot;)]&#10;  public DnsUptime? Dns { get; set; }&#10;  [JsonPropertyName(&quot;gamedig&quot;)]&#10;  public GamedigUptime? Gamedig { get; set; }&#10;  [JsonPropertyName(&quot;group&quot;)]&#10;  public GroupUptime? Group { get; set; }&#10;  [JsonPropertyName(&quot;grpc-keyword&quot;)]&#10;  public GrpcKeywordUptime? GrpcKeyword { get; set; }&#10;  [JsonPropertyName(&quot;json-query&quot;)]&#10;  public JsonQueryUptime? JsonQuery { get; set; }&#10;  [JsonPropertyName(&quot;kafka-producer&quot;)]&#10;  public KafkaProducerUptime? KafkaProducer { get; set; }&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public KeywordUptime? Keyword { get; set; }&#10;  [JsonPropertyName(&quot;mongodb&quot;)]&#10;  public MongoDbUptime? MongoDb { get; set; }&#10;  [JsonPropertyName(&quot;mqtt&quot;)]&#10;  public MqttUptime? Mqtt { get; set; }&#10;  [JsonPropertyName(&quot;mysql&quot;)]&#10;  public MysqlUptime? Mysql { get; set; }&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public PortUptime? Port { get; init; }&#10;  [JsonPropertyName(&quot;postgres&quot;)]&#10;  public PostgresUptime? Postgres { get; init; }&#10;  [JsonPropertyName(&quot;push&quot;)]&#10;  public PushUptime? Push { get; init; }&#10;  [JsonPropertyName(&quot;radius&quot;)]&#10;  public RadiusUptime? Radius { get; init; }&#10;  [JsonPropertyName(&quot;real-browser&quot;)]&#10;  public RealBrowserUptime? RealBrowser { get; init; }&#10;  [JsonPropertyName(&quot;redis&quot;)]&#10;  public RedisUptime? Redis { get; init; }&#10;  [JsonPropertyName(&quot;steam&quot;)]&#10;  public SteamUptime? Steam { get; init; }&#10;  [JsonPropertyName(&quot;sqlserver&quot;)]&#10;  public SqlServerUptime? SqlServer { get; init; }&#10;  [JsonPropertyName(&quot;tailscale-ping&quot;)]&#10;  public TailscalePingUptime? TailscalePing { get; init; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public record ApplicationDefinitionUptime&#10;{&#10;  [YamlMember(Alias = &quot;http&quot;)]&#10;  [JsonPropertyName(&quot;http&quot;)]&#10;  public HttpUptime? Http { get; set; }&#10;  [YamlMember(Alias = &quot;ping&quot;)]&#10;  [JsonPropertyName(&quot;ping&quot;)]&#10;  public PingUptime? Ping { get; set; }&#10;  [YamlMember(Alias = &quot;docker&quot;)]&#10;  [JsonPropertyName(&quot;docker&quot;)]&#10;  public DockerUptime? Docker { get; set; }&#10;  [YamlMember(Alias = &quot;dns&quot;)]&#10;  [JsonPropertyName(&quot;dns&quot;)]&#10;  public DnsUptime? Dns { get; set; }&#10;  [YamlMember(Alias = &quot;gamedig&quot;)]&#10;  [JsonPropertyName(&quot;gamedig&quot;)]&#10;  public GamedigUptime? Gamedig { get; set; }&#10;  [YamlMember(Alias = &quot;group&quot;)]&#10;  [JsonPropertyName(&quot;group&quot;)]&#10;  public GroupUptime? Group { get; set; }&#10;  [YamlMember(Alias = &quot;grpc-keyword&quot;)]&#10;  [JsonPropertyName(&quot;grpc-keyword&quot;)]&#10;  public GrpcKeywordUptime? GrpcKeyword { get; set; }&#10;  [YamlMember(Alias = &quot;json-query&quot;)]&#10;  [JsonPropertyName(&quot;json-query&quot;)]&#10;  public JsonQueryUptime? JsonQuery { get; set; }&#10;  [YamlMember(Alias = &quot;kafka-producer&quot;)]&#10;  [JsonPropertyName(&quot;kafka-producer&quot;)]&#10;  public KafkaProducerUptime? KafkaProducer { get; set; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public KeywordUptime? Keyword { get; set; }&#10;  [YamlMember(Alias = &quot;mongodb&quot;)]&#10;  [JsonPropertyName(&quot;mongodb&quot;)]&#10;  public MongoDbUptime? MongoDb { get; set; }&#10;  [YamlMember(Alias = &quot;mqtt&quot;)]&#10;  [JsonPropertyName(&quot;mqtt&quot;)]&#10;  public MqttUptime? Mqtt { get; set; }&#10;  [YamlMember(Alias = &quot;mysql&quot;)]&#10;  [JsonPropertyName(&quot;mysql&quot;)]&#10;  public MysqlUptime? Mysql { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public PortUptime? Port { get; init; }&#10;  [YamlMember(Alias = &quot;postgres&quot;)]&#10;  [JsonPropertyName(&quot;postgres&quot;)]&#10;  public PostgresUptime? Postgres { get; init; }&#10;  [YamlMember(Alias = &quot;push&quot;)]&#10;  [JsonPropertyName(&quot;push&quot;)]&#10;  public PushUptime? Push { get; init; }&#10;  [YamlMember(Alias = &quot;radius&quot;)]&#10;  [JsonPropertyName(&quot;radius&quot;)]&#10;  public RadiusUptime? Radius { get; init; }&#10;  [YamlMember(Alias = &quot;real-browser&quot;)]&#10;  [JsonPropertyName(&quot;real-browser&quot;)]&#10;  public RealBrowserUptime? RealBrowser { get; init; }&#10;  [YamlMember(Alias = &quot;redis&quot;)]&#10;  [JsonPropertyName(&quot;redis&quot;)]&#10;  public RedisUptime? Redis { get; init; }&#10;  [YamlMember(Alias = &quot;steam&quot;)]&#10;  [JsonPropertyName(&quot;steam&quot;)]&#10;  public SteamUptime? Steam { get; init; }&#10;  [YamlMember(Alias = &quot;sqlserver&quot;)]&#10;  [JsonPropertyName(&quot;sqlserver&quot;)]&#10;  public SqlServerUptime? SqlServer { get; init; }&#10;  [YamlMember(Alias = &quot;tailscale-ping&quot;)]&#10;  [JsonPropertyName(&quot;tailscale-ping&quot;)]&#10;  public TailscalePingUptime? TailscalePing { get; init; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/GrpcKeywordUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/GrpcKeywordUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class GrpcKeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;grpc-keyword&quot;;&#10;  public string GrpcBody { get; set; }&#10;  public bool? GrpcEnableTls { get; set; }&#10;  public string GrpcMetadata { get; set; }&#10;  public string GrpcMethod { get; set; }&#10;  public string GrpcProtobuf { get; set; }&#10;  public string GrpcServiceName { get; set; }&#10;  public string GrpcUrl { get; set; }&#10;  public bool? InvertKeyword { get; init; }&#10;  public string Keyword { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class GrpcKeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;grpc-keyword&quot;;&#10;  [YamlMember(Alias = &quot;grpc_body&quot;)]&#10;  [JsonPropertyName(&quot;grpc_body&quot;)]&#10;  public string GrpcBody { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_enable_tls&quot;)]&#10;  [JsonPropertyName(&quot;grpc_enable_tls&quot;)]&#10;  public bool? GrpcEnableTls { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_metadata&quot;)]&#10;  [JsonPropertyName(&quot;grpc_metadata&quot;)]&#10;  public string GrpcMetadata { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_method&quot;)]&#10;  [JsonPropertyName(&quot;grpc_method&quot;)]&#10;  public string GrpcMethod { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_protobuf&quot;)]&#10;  [JsonPropertyName(&quot;grpc_protobuf&quot;)]&#10;  public string GrpcProtobuf { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_service_name&quot;)]&#10;  [JsonPropertyName(&quot;grpc_service_name&quot;)]&#10;  public string GrpcServiceName { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_url&quot;)]&#10;  [JsonPropertyName(&quot;grpc_url&quot;)]&#10;  public string GrpcUrl { get; set; }&#10;  [YamlMember(Alias = &quot;invert_keyword&quot;)]&#10;  [JsonPropertyName(&quot;invert_keyword&quot;)]&#10;  public bool? InvertKeyword { get; init; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public string Keyword { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/KeywordUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/KeywordUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class KeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;keyword&quot;;&#10;  public string Url { get; set; }&#10;  public string Keyword { get; set; }&#10;  public bool? InvertKeyword { get; set; }&#10;  public string Method { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;  public string? AuthDomain { get; init; }&#10;  public string? AuthMethod { get; init; }&#10;  public string? AuthWorkstation { get; init; }&#10;  public string? BasicAuthUser { get; init; }&#10;  public string? BasicAuthPass { get; init; }&#10;  public string? Body { get; init; }&#10;&#10;  public bool? ExpiryNotification { get; init; }&#10;  public string? HttpBodyEncoding { get; init; }&#10;  public bool? IgnoreTls { get; init; }&#10;  public int? MaxRedirects { get; init; }&#10;  public string? OauthAuthMethod { get; init; }&#10;  public string? OauthClientId { get; init; }&#10;  public string? OauthClientSecret { get; init; }&#10;  public string? OauthScopes { get; init; }&#10;  public string? OauthTokenUrl { get; init; }&#10;  public string? ProxyId { get; init; }&#10;  public int? ResendInterval { get; init; }&#10;  public int? Timeout { get; init; }&#10;  public string? TlsCa { get; init; }&#10;  public string? TlsCert { get; init; }&#10;  public string? TlsKey { get; init; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class KeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;keyword&quot;;&#10;  [YamlMember(Alias = &quot;url&quot;)]&#10;  [JsonPropertyName(&quot;url&quot;)]&#10;  public string Url { get; set; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public string Keyword { get; set; }&#10;  [YamlMember(Alias = &quot;invert_keyword&quot;)]&#10;  [JsonPropertyName(&quot;invert_keyword&quot;)]&#10;  public bool? InvertKeyword { get; set; }&#10;  [YamlMember(Alias = &quot;method&quot;)]&#10;  [JsonPropertyName(&quot;method&quot;)]&#10;  public string Method { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;  [YamlMember(Alias = &quot;auth_domain&quot;)]&#10;  [JsonPropertyName(&quot;auth_domain&quot;)]&#10;  public string? AuthDomain { get; init; }&#10;  [YamlMember(Alias = &quot;auth_method&quot;)]&#10;  [JsonPropertyName(&quot;auth_method&quot;)]&#10;  public string? AuthMethod { get; init; }&#10;  [YamlMember(Alias = &quot;auth_workstation&quot;)]&#10;  [JsonPropertyName(&quot;auth_workstation&quot;)]&#10;  public string? AuthWorkstation { get; init; }&#10;  [YamlMember(Alias = &quot;basic_auth_user&quot;)]&#10;  [JsonPropertyName(&quot;basic_auth_user&quot;)]&#10;  public string? BasicAuthUser { get; init; }&#10;  [YamlMember(Alias = &quot;basic_auth_pass&quot;)]&#10;  [JsonPropertyName(&quot;basic_auth_pass&quot;)]&#10;  public string? BasicAuthPass { get; init; }&#10;  [YamlMember(Alias = &quot;body&quot;)]&#10;  [JsonPropertyName(&quot;body&quot;)]&#10;  public string? Body { get; init; }&#10;  [YamlMember(Alias = &quot;expiry_notification&quot;)]&#10;  [JsonPropertyName(&quot;expiry_notification&quot;)]&#10;  public bool? ExpiryNotification { get; init; }&#10;  [YamlMember(Alias = &quot;http_body_encoding&quot;)]&#10;  [JsonPropertyName(&quot;http_body_encoding&quot;)]&#10;  public string? HttpBodyEncoding { get; init; }&#10;  [YamlMember(Alias = &quot;ignore_tls&quot;)]&#10;  [JsonPropertyName(&quot;ignore_tls&quot;)]&#10;  public bool? IgnoreTls { get; init; }&#10;  [YamlMember(Alias = &quot;max_redirects&quot;)]&#10;  [JsonPropertyName(&quot;max_redirects&quot;)]&#10;  public int? MaxRedirects { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_auth_method&quot;)]&#10;  [JsonPropertyName(&quot;oauth_auth_method&quot;)]&#10;  public string? OauthAuthMethod { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_client_id&quot;)]&#10;  [JsonPropertyName(&quot;oauth_client_id&quot;)]&#10;  public string? OauthClientId { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_client_secret&quot;)]&#10;  [JsonPropertyName(&quot;oauth_client_secret&quot;)]&#10;  public string? OauthClientSecret { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_scopes&quot;)]&#10;  [JsonPropertyName(&quot;oauth_scopes&quot;)]&#10;  public string? OauthScopes { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_token_url&quot;)]&#10;  [JsonPropertyName(&quot;oauth_token_url&quot;)]&#10;  public string? OauthTokenUrl { get; init; }&#10;  [YamlMember(Alias = &quot;proxy_id&quot;)]&#10;  [JsonPropertyName(&quot;proxy_id&quot;)]&#10;  public string? ProxyId { get; init; }&#10;  [YamlMember(Alias = &quot;resend_interval&quot;)]&#10;  [JsonPropertyName(&quot;resend_interval&quot;)]&#10;  public int? ResendInterval { get; init; }&#10;  [YamlMember(Alias = &quot;timeout&quot;)]&#10;  [JsonPropertyName(&quot;timeout&quot;)]&#10;  public int? Timeout { get; init; }&#10;  [YamlMember(Alias = &quot;tls_ca&quot;)]&#10;  [JsonPropertyName(&quot;tls_ca&quot;)]&#10;  public string? TlsCa { get; init; }&#10;  [YamlMember(Alias = &quot;tls_cert&quot;)]&#10;  [JsonPropertyName(&quot;tls_cert&quot;)]&#10;  public string? TlsCert { get; init; }&#10;  [YamlMember(Alias = &quot;tls_key&quot;)]&#10;  [JsonPropertyName(&quot;tls_key&quot;)]&#10;  public string? TlsKey { get; init; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/PushUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/PushUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class PushUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;push&quot;;&#10;  public string PushToken { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class PushUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;push&quot;;&#10;  [YamlMember(Alias = &quot;push_token&quot;)]&#10;  [JsonPropertyName(&quot;push_token&quot;)]&#10;  public string PushToken { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/RadiusUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/RadiusUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class RadiusUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;radius&quot;;&#10;  public string Hostname { get; set; }&#10;  public int? Port { get; init; }&#10;  public string RadiusCalledStationId { get; init; }&#10;  public string RadiusCallingStationId { get; init; }&#10;  public string RadiusPassword { get; init; }&#10;  public string RadiusSecret { get; init; }&#10;  public string RadiusUsername { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class RadiusUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;radius&quot;;&#10;  [YamlMember(Alias = &quot;hostname&quot;)]&#10;  [JsonPropertyName(&quot;hostname&quot;)]&#10;  public string Hostname { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;radius_called_station_id&quot;)]&#10;  [JsonPropertyName(&quot;radius_called_station_id&quot;)]&#10;  public string RadiusCalledStationId { get; init; }&#10;  [YamlMember(Alias = &quot;radius_calling_station_id&quot;)]&#10;  [JsonPropertyName(&quot;radius_calling_station_id&quot;)]&#10;  public string RadiusCallingStationId { get; init; }&#10;  [YamlMember(Alias = &quot;radius_password&quot;)]&#10;  [JsonPropertyName(&quot;radius_password&quot;)]&#10;  public string RadiusPassword { get; init; }&#10;  [YamlMember(Alias = &quot;radius_secret&quot;)]&#10;  [JsonPropertyName(&quot;radius_secret&quot;)]&#10;  public string RadiusSecret { get; init; }&#10;  [YamlMember(Alias = &quot;radius_username&quot;)]&#10;  [JsonPropertyName(&quot;radius_username&quot;)]&#10;  public string RadiusUsername { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/SqlServerUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/SqlServerUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SqlServerUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;sqlserver&quot;;&#10;  public string DatabaseConnectionString { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SqlServerUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;sqlserver&quot;;&#10;  [YamlMember(Alias = &quot;database_connection_string&quot;)]&#10;  [JsonPropertyName(&quot;database_connection_string&quot;)]&#10;  public string DatabaseConnectionString { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/SteamUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/SteamUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SteamUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;steam&quot;;&#10;  public string Hostname { get; set; }&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SteamUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;steam&quot;;&#10;  [YamlMember(Alias = &quot;hostname&quot;)]&#10;  [JsonPropertyName(&quot;hostname&quot;)]&#10;  public string Hostname { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>