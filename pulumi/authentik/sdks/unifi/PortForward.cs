// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/portForward:PortForward")]
    public partial class PortForward : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The external port(s) that will be forwarded. Can be a single port (e.g., '80') or a port range (e.g., '8080:8090').
        /// </summary>
        [Output("dstPort")]
        public Output<string?> DstPort { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The internal IPv4 address of the device or service that will receive the forwarded traffic (e.g., '192.168.1.100').
        /// </summary>
        [Output("fwdIp")]
        public Output<string?> FwdIp { get; private set; } = null!;

        /// <summary>
        /// The internal port(s) that will receive the forwarded traffic. Can be a single port (e.g., '8080') or a port range (e.g., '8080:8090').
        /// </summary>
        [Output("fwdPort")]
        public Output<string?> FwdPort { get; private set; } = null!;

        /// <summary>
        /// Enable logging of traffic matching this port forwarding rule. Useful for monitoring and troubleshooting. Defaults to `false`.
        /// </summary>
        [Output("log")]
        public Output<bool?> Log { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the port forwarding rule to help identify its purpose (e.g., 'Web Server' or 'Game Server').
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The WAN interface to apply the port forwarding rule to. Valid values are:
        ///   * `wan` - Primary WAN interface
        ///   * `wan2` - Secondary WAN interface
        ///   * `both` - Both WAN interfaces
        /// </summary>
        [Output("portForwardInterface")]
        public Output<string?> PortForwardInterface { get; private set; } = null!;

        /// <summary>
        /// The network protocol(s) this rule applies to. Valid values are:
        ///   * `tcp_udp` - Both TCP and UDP (default)
        ///   * `tcp` - TCP only
        ///   * `udp` - UDP only Defaults to `tcp_udp`.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the port forwarding rule should be created. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The source IP address or network in CIDR notation that is allowed to use this port forward. Use 'any' to allow all source IPs. Examples: '203.0.113.1' for a single IP, '203.0.113.0/24' for a network, or 'any' for all IPs. Defaults to `any`.
        /// </summary>
        [Output("srcIp")]
        public Output<string?> SrcIp { get; private set; } = null!;


        /// <summary>
        /// Create a PortForward resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PortForward(string name, PortForwardArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/portForward:PortForward", name, args ?? new PortForwardArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private PortForward(string name, Input<string> id, PortForwardState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/portForward:PortForward", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PortForward resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PortForward Get(string name, Input<string> id, PortForwardState? state = null, CustomResourceOptions? options = null)
        {
            return new PortForward(name, id, state, options);
        }
    }

    public sealed class PortForwardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external port(s) that will be forwarded. Can be a single port (e.g., '80') or a port range (e.g., '8080:8090').
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The internal IPv4 address of the device or service that will receive the forwarded traffic (e.g., '192.168.1.100').
        /// </summary>
        [Input("fwdIp")]
        public Input<string>? FwdIp { get; set; }

        /// <summary>
        /// The internal port(s) that will receive the forwarded traffic. Can be a single port (e.g., '8080') or a port range (e.g., '8080:8090').
        /// </summary>
        [Input("fwdPort")]
        public Input<string>? FwdPort { get; set; }

        /// <summary>
        /// Enable logging of traffic matching this port forwarding rule. Useful for monitoring and troubleshooting. Defaults to `false`.
        /// </summary>
        [Input("log")]
        public Input<bool>? Log { get; set; }

        /// <summary>
        /// A friendly name for the port forwarding rule to help identify its purpose (e.g., 'Web Server' or 'Game Server').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The WAN interface to apply the port forwarding rule to. Valid values are:
        ///   * `wan` - Primary WAN interface
        ///   * `wan2` - Secondary WAN interface
        ///   * `both` - Both WAN interfaces
        /// </summary>
        [Input("portForwardInterface")]
        public Input<string>? PortForwardInterface { get; set; }

        /// <summary>
        /// The network protocol(s) this rule applies to. Valid values are:
        ///   * `tcp_udp` - Both TCP and UDP (default)
        ///   * `tcp` - TCP only
        ///   * `udp` - UDP only Defaults to `tcp_udp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The name of the UniFi site where the port forwarding rule should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The source IP address or network in CIDR notation that is allowed to use this port forward. Use 'any' to allow all source IPs. Examples: '203.0.113.1' for a single IP, '203.0.113.0/24' for a network, or 'any' for all IPs. Defaults to `any`.
        /// </summary>
        [Input("srcIp")]
        public Input<string>? SrcIp { get; set; }

        public PortForwardArgs()
        {
        }
        public static new PortForwardArgs Empty => new PortForwardArgs();
    }

    public sealed class PortForwardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The external port(s) that will be forwarded. Can be a single port (e.g., '80') or a port range (e.g., '8080:8090').
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The internal IPv4 address of the device or service that will receive the forwarded traffic (e.g., '192.168.1.100').
        /// </summary>
        [Input("fwdIp")]
        public Input<string>? FwdIp { get; set; }

        /// <summary>
        /// The internal port(s) that will receive the forwarded traffic. Can be a single port (e.g., '8080') or a port range (e.g., '8080:8090').
        /// </summary>
        [Input("fwdPort")]
        public Input<string>? FwdPort { get; set; }

        /// <summary>
        /// Enable logging of traffic matching this port forwarding rule. Useful for monitoring and troubleshooting. Defaults to `false`.
        /// </summary>
        [Input("log")]
        public Input<bool>? Log { get; set; }

        /// <summary>
        /// A friendly name for the port forwarding rule to help identify its purpose (e.g., 'Web Server' or 'Game Server').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The WAN interface to apply the port forwarding rule to. Valid values are:
        ///   * `wan` - Primary WAN interface
        ///   * `wan2` - Secondary WAN interface
        ///   * `both` - Both WAN interfaces
        /// </summary>
        [Input("portForwardInterface")]
        public Input<string>? PortForwardInterface { get; set; }

        /// <summary>
        /// The network protocol(s) this rule applies to. Valid values are:
        ///   * `tcp_udp` - Both TCP and UDP (default)
        ///   * `tcp` - TCP only
        ///   * `udp` - UDP only Defaults to `tcp_udp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The name of the UniFi site where the port forwarding rule should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The source IP address or network in CIDR notation that is allowed to use this port forward. Use 'any' to allow all source IPs. Examples: '203.0.113.1' for a single IP, '203.0.113.0/24' for a network, or 'any' for all IPs. Defaults to `any`.
        /// </summary>
        [Input("srcIp")]
        public Input<string>? SrcIp { get; set; }

        public PortForwardState()
        {
        }
        public static new PortForwardState Empty => new PortForwardState();
    }
}
