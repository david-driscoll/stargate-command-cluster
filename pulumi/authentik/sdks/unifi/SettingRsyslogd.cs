// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingRsyslogd:SettingRsyslogd")]
    public partial class SettingRsyslogd : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of log types to include in the remote syslog. Valid values: device, client, firewall_default_policy, triggers, updates, admin_activity, critical, security_detections, vpn.
        /// </summary>
        [Output("contents")]
        public Output<ImmutableArray<string>> Contents { get; private set; } = null!;

        /// <summary>
        /// Whether debug logging is enabled.
        /// </summary>
        [Output("debug")]
        public Output<bool> Debug { get; private set; } = null!;

        /// <summary>
        /// Whether remote syslog is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// IP address of the remote syslog server.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// Whether to log all content types.
        /// </summary>
        [Output("logAllContents")]
        public Output<bool> LogAllContents { get; private set; } = null!;

        /// <summary>
        /// Whether netconsole logging is enabled.
        /// </summary>
        [Output("netconsoleEnabled")]
        public Output<bool> NetconsoleEnabled { get; private set; } = null!;

        /// <summary>
        /// Hostname or IP address of the netconsole server.
        /// </summary>
        [Output("netconsoleHost")]
        public Output<string> NetconsoleHost { get; private set; } = null!;

        /// <summary>
        /// Port number for the netconsole server. Valid values: 1-65535.
        /// </summary>
        [Output("netconsolePort")]
        public Output<double> NetconsolePort { get; private set; } = null!;

        /// <summary>
        /// Port number for the remote syslog server. Valid values: 1-65535.
        /// </summary>
        [Output("port")]
        public Output<double> Port { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Whether to use this controller as the syslog server.
        /// </summary>
        [Output("thisController")]
        public Output<bool> ThisController { get; private set; } = null!;

        /// <summary>
        /// Whether to only use encrypted connections to this controller for syslog.
        /// </summary>
        [Output("thisControllerEncryptedOnly")]
        public Output<bool> ThisControllerEncryptedOnly { get; private set; } = null!;


        /// <summary>
        /// Create a SettingRsyslogd resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingRsyslogd(string name, SettingRsyslogdArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/settingRsyslogd:SettingRsyslogd", name, args ?? new SettingRsyslogdArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingRsyslogd(string name, Input<string> id, SettingRsyslogdState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingRsyslogd:SettingRsyslogd", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingRsyslogd resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingRsyslogd Get(string name, Input<string> id, SettingRsyslogdState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingRsyslogd(name, id, state, options);
        }
    }

    public sealed class SettingRsyslogdArgs : global::Pulumi.ResourceArgs
    {
        [Input("contents")]
        private InputList<string>? _contents;

        /// <summary>
        /// List of log types to include in the remote syslog. Valid values: device, client, firewall_default_policy, triggers, updates, admin_activity, critical, security_detections, vpn.
        /// </summary>
        public InputList<string> Contents
        {
            get => _contents ?? (_contents = new InputList<string>());
            set => _contents = value;
        }

        /// <summary>
        /// Whether debug logging is enabled.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// Whether remote syslog is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// IP address of the remote syslog server.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Whether to log all content types.
        /// </summary>
        [Input("logAllContents")]
        public Input<bool>? LogAllContents { get; set; }

        /// <summary>
        /// Whether netconsole logging is enabled.
        /// </summary>
        [Input("netconsoleEnabled")]
        public Input<bool>? NetconsoleEnabled { get; set; }

        /// <summary>
        /// Hostname or IP address of the netconsole server.
        /// </summary>
        [Input("netconsoleHost")]
        public Input<string>? NetconsoleHost { get; set; }

        /// <summary>
        /// Port number for the netconsole server. Valid values: 1-65535.
        /// </summary>
        [Input("netconsolePort")]
        public Input<double>? NetconsolePort { get; set; }

        /// <summary>
        /// Port number for the remote syslog server. Valid values: 1-65535.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Whether to use this controller as the syslog server.
        /// </summary>
        [Input("thisController")]
        public Input<bool>? ThisController { get; set; }

        /// <summary>
        /// Whether to only use encrypted connections to this controller for syslog.
        /// </summary>
        [Input("thisControllerEncryptedOnly")]
        public Input<bool>? ThisControllerEncryptedOnly { get; set; }

        public SettingRsyslogdArgs()
        {
        }
        public static new SettingRsyslogdArgs Empty => new SettingRsyslogdArgs();
    }

    public sealed class SettingRsyslogdState : global::Pulumi.ResourceArgs
    {
        [Input("contents")]
        private InputList<string>? _contents;

        /// <summary>
        /// List of log types to include in the remote syslog. Valid values: device, client, firewall_default_policy, triggers, updates, admin_activity, critical, security_detections, vpn.
        /// </summary>
        public InputList<string> Contents
        {
            get => _contents ?? (_contents = new InputList<string>());
            set => _contents = value;
        }

        /// <summary>
        /// Whether debug logging is enabled.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// Whether remote syslog is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// IP address of the remote syslog server.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Whether to log all content types.
        /// </summary>
        [Input("logAllContents")]
        public Input<bool>? LogAllContents { get; set; }

        /// <summary>
        /// Whether netconsole logging is enabled.
        /// </summary>
        [Input("netconsoleEnabled")]
        public Input<bool>? NetconsoleEnabled { get; set; }

        /// <summary>
        /// Hostname or IP address of the netconsole server.
        /// </summary>
        [Input("netconsoleHost")]
        public Input<string>? NetconsoleHost { get; set; }

        /// <summary>
        /// Port number for the netconsole server. Valid values: 1-65535.
        /// </summary>
        [Input("netconsolePort")]
        public Input<double>? NetconsolePort { get; set; }

        /// <summary>
        /// Port number for the remote syslog server. Valid values: 1-65535.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Whether to use this controller as the syslog server.
        /// </summary>
        [Input("thisController")]
        public Input<bool>? ThisController { get; set; }

        /// <summary>
        /// Whether to only use encrypted connections to this controller for syslog.
        /// </summary>
        [Input("thisControllerEncryptedOnly")]
        public Input<bool>? ThisControllerEncryptedOnly { get; set; }

        public SettingRsyslogdState()
        {
        }
        public static new SettingRsyslogdState Empty => new SettingRsyslogdState();
    }
}
