// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetDataset
    {
        public static Task<GetDatasetResult> InvokeAsync(GetDatasetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatasetResult>("truenas:index/getDataset:getDataset", args ?? new GetDatasetArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetDatasetResult> Invoke(GetDatasetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatasetResult>("truenas:index/getDataset:getDataset", args ?? new GetDatasetInvokeArgs(), options.WithDefaults());

        public static Output<GetDatasetResult> Invoke(GetDatasetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatasetResult>("truenas:index/getDataset:getDataset", args ?? new GetDatasetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasetArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        public GetDatasetArgs()
        {
        }
        public static new GetDatasetArgs Empty => new GetDatasetArgs();
    }

    public sealed class GetDatasetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetDatasetInvokeArgs()
        {
        }
        public static new GetDatasetInvokeArgs Empty => new GetDatasetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatasetResult
    {
        public readonly string AclMode;
        public readonly string AclType;
        public readonly string Atime;
        public readonly string CaseSensitivity;
        public readonly string Comments;
        public readonly string Compression;
        public readonly double Copies;
        public readonly string DatasetId;
        public readonly string Deduplication;
        public readonly bool Encrypted;
        public readonly string EncryptionAlgorithm;
        public readonly string EncryptionRoot;
        public readonly string Exec;
        public readonly string Id;
        public readonly bool InheritEncryption;
        public readonly string KeyFormat;
        public readonly bool KeyLoaded;
        public readonly bool Locked;
        public readonly string ManagedBy;
        public readonly string MountPoint;
        public readonly string Name;
        public readonly string Origin;
        public readonly string Parent;
        public readonly double Pbkdf2iters;
        public readonly string Pool;
        public readonly double QuotaBytes;
        public readonly double QuotaCritical;
        public readonly double QuotaWarning;
        public readonly string Readonly;
        public readonly string RecordSize;
        public readonly double RecordSizeBytes;
        public readonly double RefQuotaBytes;
        public readonly double RefQuotaCritical;
        public readonly double RefQuotaWarning;
        public readonly double RefReservation;
        public readonly double Reservation;
        public readonly string SnapDir;
        public readonly string Sync;
        public readonly string Xattr;

        [OutputConstructor]
        private GetDatasetResult(
            string aclMode,

            string aclType,

            string atime,

            string caseSensitivity,

            string comments,

            string compression,

            double copies,

            string datasetId,

            string deduplication,

            bool encrypted,

            string encryptionAlgorithm,

            string encryptionRoot,

            string exec,

            string id,

            bool inheritEncryption,

            string keyFormat,

            bool keyLoaded,

            bool locked,

            string managedBy,

            string mountPoint,

            string name,

            string origin,

            string parent,

            double pbkdf2iters,

            string pool,

            double quotaBytes,

            double quotaCritical,

            double quotaWarning,

            string @readonly,

            string recordSize,

            double recordSizeBytes,

            double refQuotaBytes,

            double refQuotaCritical,

            double refQuotaWarning,

            double refReservation,

            double reservation,

            string snapDir,

            string sync,

            string xattr)
        {
            AclMode = aclMode;
            AclType = aclType;
            Atime = atime;
            CaseSensitivity = caseSensitivity;
            Comments = comments;
            Compression = compression;
            Copies = copies;
            DatasetId = datasetId;
            Deduplication = deduplication;
            Encrypted = encrypted;
            EncryptionAlgorithm = encryptionAlgorithm;
            EncryptionRoot = encryptionRoot;
            Exec = exec;
            Id = id;
            InheritEncryption = inheritEncryption;
            KeyFormat = keyFormat;
            KeyLoaded = keyLoaded;
            Locked = locked;
            ManagedBy = managedBy;
            MountPoint = mountPoint;
            Name = name;
            Origin = origin;
            Parent = parent;
            Pbkdf2iters = pbkdf2iters;
            Pool = pool;
            QuotaBytes = quotaBytes;
            QuotaCritical = quotaCritical;
            QuotaWarning = quotaWarning;
            Readonly = @readonly;
            RecordSize = recordSize;
            RecordSizeBytes = recordSizeBytes;
            RefQuotaBytes = refQuotaBytes;
            RefQuotaCritical = refQuotaCritical;
            RefQuotaWarning = refQuotaWarning;
            RefReservation = refReservation;
            Reservation = reservation;
            SnapDir = snapDir;
            Sync = sync;
            Xattr = xattr;
        }
    }
}
