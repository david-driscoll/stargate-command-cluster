// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Device.Item.Attributes.Item;
using Tailscale.Client.Models;
namespace Tailscale.Client.Device.Item.Attributes
{
    /// <summary>
    /// Builds and executes requests for operations under \device\{deviceId}\attributes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AttributesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Tailscale.Client.device.item.attributes.item collection</summary>
        /// <param name="position">The name of the posture attribute to set.This must be prefixed with `custom`:Keys have a maximum length of 50 characters including the namespace,and can only contain letters, numbers, underscores, and colon.Keys are case-sensitive. Keys must be unique,but are checked for uniqueness in a case-insensitive manner.For example, `custom:MyAttribute` and `custom:myattribute` cannot both be set within a single tailnet.All values for a given key need to be of the same type,which is determined when the first value is written for a given key.For example, `custom:myattribute` cannot have a numeric value (`87`) for one node and a string value (`&quot;78&quot;`)for another node within the same tailnet.</param>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Device.Item.Attributes.Item.WithAttributeKeyItemRequestBuilder"/></returns>
        public global::Tailscale.Client.Device.Item.Attributes.Item.WithAttributeKeyItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("attributeKey", position);
                return new global::Tailscale.Client.Device.Item.Attributes.Item.WithAttributeKeyItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttributesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/device/{deviceId}/attributes", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttributesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/device/{deviceId}/attributes", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve all posture attributes for the specified device.This returns a JSON object of all the key-value pairs of posture attributes for the device.OAuth Scope: `devices:posture_attributes:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.DevicePostureAttributes"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Models.DevicePostureAttributes?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Models.DevicePostureAttributes> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Models.DevicePostureAttributes>(requestInfo, global::Tailscale.Client.Models.DevicePostureAttributes.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all posture attributes for the specified device.This returns a JSON object of all the key-value pairs of posture attributes for the device.OAuth Scope: `devices:posture_attributes:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AttributesRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
