// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    [AuthentikResourceType("authentik:index/certificateKeyPair:CertificateKeyPair")]
    public partial class CertificateKeyPair : global::Pulumi.CustomResource
    {
        [Output("certificateData")]
        public Output<string> CertificateData { get; private set; } = null!;

        [Output("certificateKeyPairId")]
        public Output<string> CertificateKeyPairId { get; private set; } = null!;

        [Output("keyData")]
        public Output<string?> KeyData { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateKeyPair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateKeyPair(string name, CertificateKeyPairArgs args, CustomResourceOptions? options = null)
            : base("authentik:index/certificateKeyPair:CertificateKeyPair", name, args ?? new CertificateKeyPairArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private CertificateKeyPair(string name, Input<string> id, CertificateKeyPairState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/certificateKeyPair:CertificateKeyPair", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "keyData",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateKeyPair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateKeyPair Get(string name, Input<string> id, CertificateKeyPairState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateKeyPair(name, id, state, options);
        }
    }

    public sealed class CertificateKeyPairArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateData", required: true)]
        public Input<string> CertificateData { get; set; } = null!;

        [Input("certificateKeyPairId")]
        public Input<string>? CertificateKeyPairId { get; set; }

        [Input("keyData")]
        private Input<string>? _keyData;
        public Input<string>? KeyData
        {
            get => _keyData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public CertificateKeyPairArgs()
        {
        }
        public static new CertificateKeyPairArgs Empty => new CertificateKeyPairArgs();
    }

    public sealed class CertificateKeyPairState : global::Pulumi.ResourceArgs
    {
        [Input("certificateData")]
        public Input<string>? CertificateData { get; set; }

        [Input("certificateKeyPairId")]
        public Input<string>? CertificateKeyPairId { get; set; }

        [Input("keyData")]
        private Input<string>? _keyData;
        public Input<string>? KeyData
        {
            get => _keyData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public CertificateKeyPairState()
        {
        }
        public static new CertificateKeyPairState Empty => new CertificateKeyPairState();
    }
}
