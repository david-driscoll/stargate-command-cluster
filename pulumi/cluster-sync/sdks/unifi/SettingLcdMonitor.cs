// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingLcdMonitor:SettingLcdMonitor")]
    public partial class SettingLcdMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The brightness level of the LCD display. Valid values are 1-100.
        /// </summary>
        [Output("brightness")]
        public Output<double?> Brightness { get; private set; } = null!;

        /// <summary>
        /// Whether the LCD display is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The time in seconds after which the display turns off when idle. Valid values are 10-3600.
        /// </summary>
        [Output("idleTimeout")]
        public Output<double?> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Whether to synchronize display settings across multiple devices.
        /// </summary>
        [Output("sync")]
        public Output<bool?> Sync { get; private set; } = null!;

        /// <summary>
        /// Whether touch interactions with the display are enabled.
        /// </summary>
        [Output("touchEvent")]
        public Output<bool?> TouchEvent { get; private set; } = null!;


        /// <summary>
        /// Create a SettingLcdMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingLcdMonitor(string name, SettingLcdMonitorArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/settingLcdMonitor:SettingLcdMonitor", name, args ?? new SettingLcdMonitorArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingLcdMonitor(string name, Input<string> id, SettingLcdMonitorState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingLcdMonitor:SettingLcdMonitor", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingLcdMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingLcdMonitor Get(string name, Input<string> id, SettingLcdMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingLcdMonitor(name, id, state, options);
        }
    }

    public sealed class SettingLcdMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The brightness level of the LCD display. Valid values are 1-100.
        /// </summary>
        [Input("brightness")]
        public Input<double>? Brightness { get; set; }

        /// <summary>
        /// Whether the LCD display is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The time in seconds after which the display turns off when idle. Valid values are 10-3600.
        /// </summary>
        [Input("idleTimeout")]
        public Input<double>? IdleTimeout { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Whether to synchronize display settings across multiple devices.
        /// </summary>
        [Input("sync")]
        public Input<bool>? Sync { get; set; }

        /// <summary>
        /// Whether touch interactions with the display are enabled.
        /// </summary>
        [Input("touchEvent")]
        public Input<bool>? TouchEvent { get; set; }

        public SettingLcdMonitorArgs()
        {
        }
        public static new SettingLcdMonitorArgs Empty => new SettingLcdMonitorArgs();
    }

    public sealed class SettingLcdMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The brightness level of the LCD display. Valid values are 1-100.
        /// </summary>
        [Input("brightness")]
        public Input<double>? Brightness { get; set; }

        /// <summary>
        /// Whether the LCD display is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The time in seconds after which the display turns off when idle. Valid values are 10-3600.
        /// </summary>
        [Input("idleTimeout")]
        public Input<double>? IdleTimeout { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Whether to synchronize display settings across multiple devices.
        /// </summary>
        [Input("sync")]
        public Input<bool>? Sync { get; set; }

        /// <summary>
        /// Whether touch interactions with the display are enabled.
        /// </summary>
        [Input("touchEvent")]
        public Input<bool>? TouchEvent { get; set; }

        public SettingLcdMonitorState()
        {
        }
        public static new SettingLcdMonitorState Empty => new SettingLcdMonitorState();
    }
}
