// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/dnsRecord:DnsRecord")]
    public partial class DnsRecord : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the DNS record is active. Defaults to true. Set to false to temporarily disable resolution without removing the
        /// record.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// DNS record name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The port number for SRV records. Valid values are between 1 and 65535. Only used with SRV records.
        /// </summary>
        [Output("port")]
        public Output<double> Port { get; private set; } = null!;

        /// <summary>
        /// Priority value for MX and SRV records. Lower values indicate higher priority. Required for MX and SRV records, ignored
        /// for other types.
        /// </summary>
        [Output("priority")]
        public Output<double> Priority { get; private set; } = null!;

        /// <summary>
        /// The content of the DNS record. The expected value depends on the record type: * For A records: IPv4 address (e.g.,
        /// '192.168.1.10') * For AAAA records: IPv6 address * For CNAME records: Canonical name (e.g., 'server1.example.com') * For
        /// MX records: Mail server hostname * For TXT records: Text content (e.g., 'v=spf1 include:_spf.example.com ~all')
        /// </summary>
        [Output("record")]
        public Output<string> Record { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Time To Live (TTL) in seconds, determines how long DNS resolvers should cache this record. Set to 0 for automatic TTL.
        /// Common values: 300 (5 minutes), 3600 (1 hour), 86400 (1 day).
        /// </summary>
        [Output("ttl")]
        public Output<double> Ttl { get; private set; } = null!;

        /// <summary>
        /// The type of DNS record. Valid values are: * `A` - Maps a hostname to IPv4 address * `AAAA` - Maps a hostname to IPv6
        /// address * `CNAME` - Creates an alias for another domain name * `MX` - Specifies mail servers for the domain * `NS` -
        /// Delegates a subdomain to a set of name servers * `PTR` - Creates a pointer to a canonical name (reverse DNS) * `SOA` -
        /// Specifies authoritative information about the domain * `SRV` - Specifies location of services (hostname and port) *
        /// `TXT` - Holds descriptive text
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A relative weight for SRV records with the same priority. Higher values get proportionally more traffic. Only used with
        /// SRV records.
        /// </summary>
        [Output("weight")]
        public Output<double> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a DnsRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsRecord(string name, DnsRecordArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/dnsRecord:DnsRecord", name, args ?? new DnsRecordArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private DnsRecord(string name, Input<string> id, DnsRecordState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/dnsRecord:DnsRecord", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsRecord Get(string name, Input<string> id, DnsRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsRecord(name, id, state, options);
        }
    }

    public sealed class DnsRecordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the DNS record is active. Defaults to true. Set to false to temporarily disable resolution without removing the
        /// record.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// DNS record name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port number for SRV records. Valid values are between 1 and 65535. Only used with SRV records.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Priority value for MX and SRV records. Lower values indicate higher priority. Required for MX and SRV records, ignored
        /// for other types.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// The content of the DNS record. The expected value depends on the record type: * For A records: IPv4 address (e.g.,
        /// '192.168.1.10') * For AAAA records: IPv6 address * For CNAME records: Canonical name (e.g., 'server1.example.com') * For
        /// MX records: Mail server hostname * For TXT records: Text content (e.g., 'v=spf1 include:_spf.example.com ~all')
        /// </summary>
        [Input("record", required: true)]
        public Input<string> Record { get; set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Time To Live (TTL) in seconds, determines how long DNS resolvers should cache this record. Set to 0 for automatic TTL.
        /// Common values: 300 (5 minutes), 3600 (1 hour), 86400 (1 day).
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        /// <summary>
        /// The type of DNS record. Valid values are: * `A` - Maps a hostname to IPv4 address * `AAAA` - Maps a hostname to IPv6
        /// address * `CNAME` - Creates an alias for another domain name * `MX` - Specifies mail servers for the domain * `NS` -
        /// Delegates a subdomain to a set of name servers * `PTR` - Creates a pointer to a canonical name (reverse DNS) * `SOA` -
        /// Specifies authoritative information about the domain * `SRV` - Specifies location of services (hostname and port) *
        /// `TXT` - Holds descriptive text
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// A relative weight for SRV records with the same priority. Higher values get proportionally more traffic. Only used with
        /// SRV records.
        /// </summary>
        [Input("weight")]
        public Input<double>? Weight { get; set; }

        public DnsRecordArgs()
        {
        }
        public static new DnsRecordArgs Empty => new DnsRecordArgs();
    }

    public sealed class DnsRecordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the DNS record is active. Defaults to true. Set to false to temporarily disable resolution without removing the
        /// record.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// DNS record name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port number for SRV records. Valid values are between 1 and 65535. Only used with SRV records.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Priority value for MX and SRV records. Lower values indicate higher priority. Required for MX and SRV records, ignored
        /// for other types.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// The content of the DNS record. The expected value depends on the record type: * For A records: IPv4 address (e.g.,
        /// '192.168.1.10') * For AAAA records: IPv6 address * For CNAME records: Canonical name (e.g., 'server1.example.com') * For
        /// MX records: Mail server hostname * For TXT records: Text content (e.g., 'v=spf1 include:_spf.example.com ~all')
        /// </summary>
        [Input("record")]
        public Input<string>? Record { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Time To Live (TTL) in seconds, determines how long DNS resolvers should cache this record. Set to 0 for automatic TTL.
        /// Common values: 300 (5 minutes), 3600 (1 hour), 86400 (1 day).
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        /// <summary>
        /// The type of DNS record. Valid values are: * `A` - Maps a hostname to IPv4 address * `AAAA` - Maps a hostname to IPv6
        /// address * `CNAME` - Creates an alias for another domain name * `MX` - Specifies mail servers for the domain * `NS` -
        /// Delegates a subdomain to a set of name servers * `PTR` - Creates a pointer to a canonical name (reverse DNS) * `SOA` -
        /// Specifies authoritative information about the domain * `SRV` - Specifies location of services (hostname and port) *
        /// `TXT` - Holds descriptive text
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A relative weight for SRV records with the same priority. Higher values get proportionally more traffic. Only used with
        /// SRV records.
        /// </summary>
        [Input("weight")]
        public Input<double>? Weight { get; set; }

        public DnsRecordState()
        {
        }
        public static new DnsRecordState Empty => new DnsRecordState();
    }
}
