// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Proxmox
{
    [ProxmoxResourceType("proxmox:index/lxc:Lxc")]
    public partial class Lxc : global::Pulumi.CustomResource
    {
        [Output("arch")]
        public Output<string?> Arch { get; private set; } = null!;

        [Output("bwlimit")]
        public Output<double?> Bwlimit { get; private set; } = null!;

        [Output("clone")]
        public Output<string?> Clone { get; private set; } = null!;

        [Output("cloneStorage")]
        public Output<string?> CloneStorage { get; private set; } = null!;

        [Output("cmode")]
        public Output<string?> Cmode { get; private set; } = null!;

        [Output("console")]
        public Output<bool?> Console { get; private set; } = null!;

        [Output("cores")]
        public Output<double?> Cores { get; private set; } = null!;

        [Output("cpulimit")]
        public Output<double?> Cpulimit { get; private set; } = null!;

        [Output("cpuunits")]
        public Output<double?> Cpuunits { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("features")]
        public Output<Outputs.LxcFeatures?> Features { get; private set; } = null!;

        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        [Output("full")]
        public Output<bool?> Full { get; private set; } = null!;

        [Output("hagroup")]
        public Output<string?> Hagroup { get; private set; } = null!;

        [Output("hastate")]
        public Output<string?> Hastate { get; private set; } = null!;

        [Output("hookscript")]
        public Output<string?> Hookscript { get; private set; } = null!;

        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        [Output("ignoreUnpackErrors")]
        public Output<bool?> IgnoreUnpackErrors { get; private set; } = null!;

        [Output("lock")]
        public Output<string?> Lock { get; private set; } = null!;

        [Output("lxcId")]
        public Output<string> LxcId { get; private set; } = null!;

        [Output("memory")]
        public Output<double?> Memory { get; private set; } = null!;

        [Output("mountpoints")]
        public Output<ImmutableArray<Outputs.LxcMountpoint>> Mountpoints { get; private set; } = null!;

        [Output("nameserver")]
        public Output<string?> Nameserver { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.LxcNetwork>> Networks { get; private set; } = null!;

        [Output("onboot")]
        public Output<bool?> Onboot { get; private set; } = null!;

        [Output("ostemplate")]
        public Output<string?> Ostemplate { get; private set; } = null!;

        [Output("ostype")]
        public Output<string> Ostype { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("pool")]
        public Output<string?> Pool { get; private set; } = null!;

        [Output("protection")]
        public Output<bool?> Protection { get; private set; } = null!;

        [Output("restore")]
        public Output<bool?> Restore { get; private set; } = null!;

        [Output("rootfs")]
        public Output<Outputs.LxcRootfs?> Rootfs { get; private set; } = null!;

        [Output("searchdomain")]
        public Output<string?> Searchdomain { get; private set; } = null!;

        [Output("sshPublicKeys")]
        public Output<string?> SshPublicKeys { get; private set; } = null!;

        [Output("start")]
        public Output<bool?> Start { get; private set; } = null!;

        [Output("startup")]
        public Output<string?> Startup { get; private set; } = null!;

        [Output("swap")]
        public Output<double?> Swap { get; private set; } = null!;

        [Output("tags")]
        public Output<string?> Tags { get; private set; } = null!;

        [Output("targetNode")]
        public Output<string> TargetNode { get; private set; } = null!;

        [Output("template")]
        public Output<bool?> Template { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.LxcTimeouts?> Timeouts { get; private set; } = null!;

        [Output("tty")]
        public Output<double?> Tty { get; private set; } = null!;

        [Output("unique")]
        public Output<bool?> Unique { get; private set; } = null!;

        [Output("unprivileged")]
        public Output<bool?> Unprivileged { get; private set; } = null!;

        [Output("unuseds")]
        public Output<ImmutableArray<string>> Unuseds { get; private set; } = null!;

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Output("vmid")]
        public Output<double> Vmid { get; private set; } = null!;


        /// <summary>
        /// Create a Lxc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Lxc(string name, LxcArgs args, CustomResourceOptions? options = null)
            : base("proxmox:index/lxc:Lxc", name, args ?? new LxcArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Lxc(string name, Input<string> id, LxcState? state = null, CustomResourceOptions? options = null)
            : base("proxmox:index/lxc:Lxc", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Lxc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Lxc Get(string name, Input<string> id, LxcState? state = null, CustomResourceOptions? options = null)
        {
            return new Lxc(name, id, state, options);
        }
    }

    public sealed class LxcArgs : global::Pulumi.ResourceArgs
    {
        [Input("arch")]
        public Input<string>? Arch { get; set; }

        [Input("bwlimit")]
        public Input<double>? Bwlimit { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneStorage")]
        public Input<string>? CloneStorage { get; set; }

        [Input("cmode")]
        public Input<string>? Cmode { get; set; }

        [Input("console")]
        public Input<bool>? Console { get; set; }

        [Input("cores")]
        public Input<double>? Cores { get; set; }

        [Input("cpulimit")]
        public Input<double>? Cpulimit { get; set; }

        [Input("cpuunits")]
        public Input<double>? Cpuunits { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("features")]
        public Input<Inputs.LxcFeaturesArgs>? Features { get; set; }

        [Input("force")]
        public Input<bool>? Force { get; set; }

        [Input("full")]
        public Input<bool>? Full { get; set; }

        [Input("hagroup")]
        public Input<string>? Hagroup { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hookscript")]
        public Input<string>? Hookscript { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("ignoreUnpackErrors")]
        public Input<bool>? IgnoreUnpackErrors { get; set; }

        [Input("lock")]
        public Input<string>? Lock { get; set; }

        [Input("lxcId")]
        public Input<string>? LxcId { get; set; }

        [Input("memory")]
        public Input<double>? Memory { get; set; }

        [Input("mountpoints")]
        private InputList<Inputs.LxcMountpointArgs>? _mountpoints;
        public InputList<Inputs.LxcMountpointArgs> Mountpoints
        {
            get => _mountpoints ?? (_mountpoints = new InputList<Inputs.LxcMountpointArgs>());
            set => _mountpoints = value;
        }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.LxcNetworkArgs>? _networks;
        public InputList<Inputs.LxcNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.LxcNetworkArgs>());
            set => _networks = value;
        }

        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        [Input("ostemplate")]
        public Input<string>? Ostemplate { get; set; }

        [Input("ostype")]
        public Input<string>? Ostype { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("protection")]
        public Input<bool>? Protection { get; set; }

        [Input("restore")]
        public Input<bool>? Restore { get; set; }

        [Input("rootfs")]
        public Input<Inputs.LxcRootfsArgs>? Rootfs { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("sshPublicKeys")]
        public Input<string>? SshPublicKeys { get; set; }

        [Input("start")]
        public Input<bool>? Start { get; set; }

        [Input("startup")]
        public Input<string>? Startup { get; set; }

        [Input("swap")]
        public Input<double>? Swap { get; set; }

        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("targetNode", required: true)]
        public Input<string> TargetNode { get; set; } = null!;

        [Input("template")]
        public Input<bool>? Template { get; set; }

        [Input("timeouts")]
        public Input<Inputs.LxcTimeoutsArgs>? Timeouts { get; set; }

        [Input("tty")]
        public Input<double>? Tty { get; set; }

        [Input("unique")]
        public Input<bool>? Unique { get; set; }

        [Input("unprivileged")]
        public Input<bool>? Unprivileged { get; set; }

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Input("vmid")]
        public Input<double>? Vmid { get; set; }

        public LxcArgs()
        {
        }
        public static new LxcArgs Empty => new LxcArgs();
    }

    public sealed class LxcState : global::Pulumi.ResourceArgs
    {
        [Input("arch")]
        public Input<string>? Arch { get; set; }

        [Input("bwlimit")]
        public Input<double>? Bwlimit { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneStorage")]
        public Input<string>? CloneStorage { get; set; }

        [Input("cmode")]
        public Input<string>? Cmode { get; set; }

        [Input("console")]
        public Input<bool>? Console { get; set; }

        [Input("cores")]
        public Input<double>? Cores { get; set; }

        [Input("cpulimit")]
        public Input<double>? Cpulimit { get; set; }

        [Input("cpuunits")]
        public Input<double>? Cpuunits { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("features")]
        public Input<Inputs.LxcFeaturesGetArgs>? Features { get; set; }

        [Input("force")]
        public Input<bool>? Force { get; set; }

        [Input("full")]
        public Input<bool>? Full { get; set; }

        [Input("hagroup")]
        public Input<string>? Hagroup { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hookscript")]
        public Input<string>? Hookscript { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("ignoreUnpackErrors")]
        public Input<bool>? IgnoreUnpackErrors { get; set; }

        [Input("lock")]
        public Input<string>? Lock { get; set; }

        [Input("lxcId")]
        public Input<string>? LxcId { get; set; }

        [Input("memory")]
        public Input<double>? Memory { get; set; }

        [Input("mountpoints")]
        private InputList<Inputs.LxcMountpointGetArgs>? _mountpoints;
        public InputList<Inputs.LxcMountpointGetArgs> Mountpoints
        {
            get => _mountpoints ?? (_mountpoints = new InputList<Inputs.LxcMountpointGetArgs>());
            set => _mountpoints = value;
        }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.LxcNetworkGetArgs>? _networks;
        public InputList<Inputs.LxcNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.LxcNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        [Input("ostemplate")]
        public Input<string>? Ostemplate { get; set; }

        [Input("ostype")]
        public Input<string>? Ostype { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("protection")]
        public Input<bool>? Protection { get; set; }

        [Input("restore")]
        public Input<bool>? Restore { get; set; }

        [Input("rootfs")]
        public Input<Inputs.LxcRootfsGetArgs>? Rootfs { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("sshPublicKeys")]
        public Input<string>? SshPublicKeys { get; set; }

        [Input("start")]
        public Input<bool>? Start { get; set; }

        [Input("startup")]
        public Input<string>? Startup { get; set; }

        [Input("swap")]
        public Input<double>? Swap { get; set; }

        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("targetNode")]
        public Input<string>? TargetNode { get; set; }

        [Input("template")]
        public Input<bool>? Template { get; set; }

        [Input("timeouts")]
        public Input<Inputs.LxcTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("tty")]
        public Input<double>? Tty { get; set; }

        [Input("unique")]
        public Input<bool>? Unique { get; set; }

        [Input("unprivileged")]
        public Input<bool>? Unprivileged { get; set; }

        [Input("unuseds")]
        private InputList<string>? _unuseds;
        public InputList<string> Unuseds
        {
            get => _unuseds ?? (_unuseds = new InputList<string>());
            set => _unuseds = value;
        }

        /// <summary>
        /// The VM identifier in proxmox (100-999999999)
        /// </summary>
        [Input("vmid")]
        public Input<double>? Vmid { get; set; }

        public LxcState()
        {
        }
        public static new LxcState Empty => new LxcState();
    }
}
