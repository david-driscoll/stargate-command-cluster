// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Proxmox
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("proxmox");

        private static readonly __Value<string?> _pmApiTokenId = new __Value<string?>(() => __config.Get("pmApiTokenId"));
        /// <summary>
        /// API TokenID e.g. root@pam!mytesttoken
        /// </summary>
        public static string? PmApiTokenId
        {
            get => _pmApiTokenId.Get();
            set => _pmApiTokenId.Set(value);
        }

        private static readonly __Value<string?> _pmApiTokenSecret = new __Value<string?>(() => __config.Get("pmApiTokenSecret"));
        /// <summary>
        /// The secret uuid corresponding to a TokenID
        /// </summary>
        public static string? PmApiTokenSecret
        {
            get => _pmApiTokenSecret.Get();
            set => _pmApiTokenSecret.Set(value);
        }

        private static readonly __Value<string?> _pmApiUrl = new __Value<string?>(() => __config.Get("pmApiUrl"));
        /// <summary>
        /// https://host.fqdn:8006/api2/json
        /// </summary>
        public static string? PmApiUrl
        {
            get => _pmApiUrl.Get();
            set => _pmApiUrl.Set(value);
        }

        private static readonly __Value<bool?> _pmDangerouslyIgnoreUnknownAttributes = new __Value<bool?>(() => __config.GetBoolean("pmDangerouslyIgnoreUnknownAttributes"));
        /// <summary>
        /// By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of
        /// VMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set
        /// this to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of
        /// the danger in doing so.
        /// </summary>
        public static bool? PmDangerouslyIgnoreUnknownAttributes
        {
            get => _pmDangerouslyIgnoreUnknownAttributes.Get();
            set => _pmDangerouslyIgnoreUnknownAttributes.Set(value);
        }

        private static readonly __Value<bool?> _pmDebug = new __Value<bool?>(() => __config.GetBoolean("pmDebug"));
        /// <summary>
        /// Enable or disable the verbose debug output from proxmox api
        /// </summary>
        public static bool? PmDebug
        {
            get => _pmDebug.Get();
            set => _pmDebug.Set(value);
        }

        private static readonly __Value<string?> _pmHttpHeaders = new __Value<string?>(() => __config.Get("pmHttpHeaders"));
        /// <summary>
        /// Set custom http headers e.g. Key,Value,Key1,Value1
        /// </summary>
        public static string? PmHttpHeaders
        {
            get => _pmHttpHeaders.Get();
            set => _pmHttpHeaders.Set(value);
        }

        private static readonly __Value<bool?> _pmLogEnable = new __Value<bool?>(() => __config.GetBoolean("pmLogEnable"));
        /// <summary>
        /// Enable provider logging to get proxmox API logs
        /// </summary>
        public static bool? PmLogEnable
        {
            get => _pmLogEnable.Get();
            set => _pmLogEnable.Set(value);
        }

        private static readonly __Value<string?> _pmLogFile = new __Value<string?>(() => __config.Get("pmLogFile"));
        /// <summary>
        /// Write logs to this specific file
        /// </summary>
        public static string? PmLogFile
        {
            get => _pmLogFile.Get();
            set => _pmLogFile.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, string>?> _pmLogLevels = new __Value<ImmutableDictionary<string, string>?>(() => __config.GetObject<ImmutableDictionary<string, string>>("pmLogLevels"));
        /// <summary>
        /// Configure the logging level to display; trace, debug, info, warn, etc
        /// </summary>
        public static ImmutableDictionary<string, string>? PmLogLevels
        {
            get => _pmLogLevels.Get();
            set => _pmLogLevels.Set(value);
        }

        private static readonly __Value<string?> _pmOtp = new __Value<string?>(() => __config.Get("pmOtp"));
        /// <summary>
        /// OTP 2FA code (if required)
        /// </summary>
        public static string? PmOtp
        {
            get => _pmOtp.Get();
            set => _pmOtp.Set(value);
        }

        private static readonly __Value<double?> _pmParallel = new __Value<double?>(() => __config.GetDouble("pmParallel"));
        public static double? PmParallel
        {
            get => _pmParallel.Get();
            set => _pmParallel.Set(value);
        }

        private static readonly __Value<string?> _pmPassword = new __Value<string?>(() => __config.Get("pmPassword"));
        /// <summary>
        /// Password to authenticate into proxmox
        /// </summary>
        public static string? PmPassword
        {
            get => _pmPassword.Get();
            set => _pmPassword.Set(value);
        }

        private static readonly __Value<string?> _pmProxyServer = new __Value<string?>(() => __config.Get("pmProxyServer"));
        /// <summary>
        /// Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
        /// </summary>
        public static string? PmProxyServer
        {
            get => _pmProxyServer.Get();
            set => _pmProxyServer.Set(value);
        }

        private static readonly __Value<double?> _pmTimeout = new __Value<double?>(() => __config.GetDouble("pmTimeout"));
        /// <summary>
        /// How many seconds to wait for operations for both provider and api-client, default is 20m
        /// </summary>
        public static double? PmTimeout
        {
            get => _pmTimeout.Get();
            set => _pmTimeout.Set(value);
        }

        private static readonly __Value<bool?> _pmTlsInsecure = new __Value<bool?>(() => __config.GetBoolean("pmTlsInsecure"));
        public static bool? PmTlsInsecure
        {
            get => _pmTlsInsecure.Get();
            set => _pmTlsInsecure.Set(value);
        }

        private static readonly __Value<string?> _pmUser = new __Value<string?>(() => __config.Get("pmUser"));
        /// <summary>
        /// Username e.g. myuser or myuser@pam
        /// </summary>
        public static string? PmUser
        {
            get => _pmUser.Get();
            set => _pmUser.Set(value);
        }

    }
}
