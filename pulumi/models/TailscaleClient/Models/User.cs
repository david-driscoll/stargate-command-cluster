// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// Representation of a user within a tailnet.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class User : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The time the user joined their tailnet.</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>`true` when the user has a node currently connected to the control server.</summary>
        public bool? CurrentlyConnected { get; set; }
        /// <summary>Number of devices the user owns.</summary>
        public double? DeviceCount { get; set; }
        /// <summary>The name of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The unique identifier for the user.Supply this value wherever {userId} is indicated in an endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The later of either:- The last time any of the user&apos;s nodes were connected to the network.- The last time the user authenticated to any tailscale service, including the admin panel.</summary>
        public DateTimeOffset? LastSeen { get; set; }
        /// <summary>The emailish login name of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginName { get; set; }
#nullable restore
#else
        public string LoginName { get; set; }
#endif
        /// <summary>The profile pic URL for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePicUrl { get; set; }
#nullable restore
#else
        public string ProfilePicUrl { get; set; }
#endif
        /// <summary>The role of the user. Learn more about [user roles](kb/1138/user-roles).</summary>
        public global::Tailscale.Client.Models.User_role? Role { get; set; }
        /// <summary>The status of the user.</summary>
        public global::Tailscale.Client.Models.User_status? Status { get; set; }
        /// <summary>The tailnet that owns the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TailnetId { get; set; }
#nullable restore
#else
        public string TailnetId { get; set; }
#endif
        /// <summary>The type of relation this user has to the tailnet associated with the request.</summary>
        public global::Tailscale.Client.Models.User_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.User"/> and sets the default values.
        /// </summary>
        public User()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.User"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.User CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "currentlyConnected", n => { CurrentlyConnected = n.GetBoolValue(); } },
                { "deviceCount", n => { DeviceCount = n.GetDoubleValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "lastSeen", n => { LastSeen = n.GetDateTimeOffsetValue(); } },
                { "loginName", n => { LoginName = n.GetStringValue(); } },
                { "profilePicUrl", n => { ProfilePicUrl = n.GetStringValue(); } },
                { "role", n => { Role = n.GetEnumValue<global::Tailscale.Client.Models.User_role>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Tailscale.Client.Models.User_status>(); } },
                { "tailnetId", n => { TailnetId = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Tailscale.Client.Models.User_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteBoolValue("currentlyConnected", CurrentlyConnected);
            writer.WriteDoubleValue("deviceCount", DeviceCount);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("lastSeen", LastSeen);
            writer.WriteStringValue("loginName", LoginName);
            writer.WriteStringValue("profilePicUrl", ProfilePicUrl);
            writer.WriteEnumValue<global::Tailscale.Client.Models.User_role>("role", Role);
            writer.WriteEnumValue<global::Tailscale.Client.Models.User_status>("status", Status);
            writer.WriteStringValue("tailnetId", TailnetId);
            writer.WriteEnumValue<global::Tailscale.Client.Models.User_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
