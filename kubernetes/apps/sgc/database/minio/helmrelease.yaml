---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app minio
spec:
  interval: 60m
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          securityContext:
            fsGroup: 568
            fsGroupChangePolicy: "OnRootMismatch"
            supplementalGroups:
              - 100

        containers:
          *app :
            image:
              repository: quay.io/minio/minio
              tag: RELEASE.2025-02-28T09-55-16Z@sha256:a929054ae025fa7997857cd0e2a2e3029238e31ad89877326dc032f4c1a14259

            env:
              MINIO_UPDATE: "off"
              MINIO_BROWSER_REDIRECT_URL: "https://{{ .Release.Name }}.${CLUSTER_DOMAIN}"
              MINIO_SERVER_URL: "https://s3.${CLUSTER_DOMAIN}"
              MINIO_API_CORS_ALLOW_ORIGIN: https://{{ .Release.Name }}.${CLUSTER_DOMAIN},https://s3.${CLUSTER_DOMAIN}
              MINIO_ROOT_USER:
                valueFrom:
                  secretKeyRef:
                    name: minio-secret
                    key: username
              MINIO_ROOT_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: minio-secret
                    key: password
              # MINIO_PROMETHEUS_JOB_ID: minio
              # MINIO_PROMETHEUS_URL: https://prometheus.witl.xyz
              # MINIO_PROMETHEUS_AUTH_TYPE: public

            args: ["server", "/data", "--console-address", ":9001"]

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /minio/health/live
                    port: 9000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 6
              readiness: *probes

            resources:
              requests:
                memory: 100Mi
                cpu: 100m
              limits:
                memory: 4000Mi

    service:
      app:
        controller: *app
        ports:
          http:
            port: &port-console 9001
          api:
            enabled: true
            port: &port-api 9000

    # serviceMonitor:
    #   app:
    #     serviceName: minio
    #     endpoints:
    #       - port: s3
    #         scheme: http
    #         path: /minio/v2/metrics/cluster
    #         interval: 1m
    #         scrapeTimeout: 10s

    ingress:
      internal:
        className: internal
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - host: "{{ .Release.Name }}.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http

      s3:
        className: internal
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - host: "s3.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: api

      sss:
        className: internal
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          # traefik.ingress.kubernetes.io/router.middlewares: network-strip-query-string@kubernetescrd
        hosts:
          - host: "sss.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: api

    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /data
