// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi.Outputs
{

    [OutputType]
    public sealed class SettingGuestAccessPortalCustomization
    {
        /// <summary>
        /// Custom authentication text for the portal.
        /// </summary>
        public readonly string? AuthenticationText;
        /// <summary>
        /// Background color for the custom portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? BgColor;
        /// <summary>
        /// ID of the background image portal file. File must exist in controller, use `unifi.PortalFile` to manage it.
        /// </summary>
        public readonly string? BgImageFileId;
        /// <summary>
        /// Tile the background image.
        /// </summary>
        public readonly bool? BgImageTile;
        /// <summary>
        /// Type of portal background. Valid values are:
        /// * `color` - Solid color background
        /// * `image` - (not yet supported!) Custom image background
        /// * `gallery` - Image from Unsplash gallery
        /// </summary>
        public readonly string? BgType;
        /// <summary>
        /// Color of the login box in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? BoxColor;
        /// <summary>
        /// Color of links in the login box. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? BoxLinkColor;
        /// <summary>
        /// Opacity of the login box (0-100).
        /// </summary>
        public readonly double? BoxOpacity;
        /// <summary>
        /// Border radius of the login box in pixels.
        /// </summary>
        public readonly double? BoxRadius;
        /// <summary>
        /// Text color in the login box. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? BoxTextColor;
        /// <summary>
        /// Button color in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? ButtonColor;
        /// <summary>
        /// Custom text for the login button.
        /// </summary>
        public readonly string? ButtonText;
        /// <summary>
        /// Button text color. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? ButtonTextColor;
        /// <summary>
        /// Whether the portal is customized.
        /// </summary>
        public readonly bool? Customized;
        /// <summary>
        /// List of enabled languages for the portal.
        /// </summary>
        public readonly ImmutableArray<string> Languages;
        /// <summary>
        /// Color for links in the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? LinkColor;
        /// <summary>
        /// ID of the logo image portal file. File must exist in controller, use `unifi.PortalFile` to manage it.
        /// </summary>
        public readonly string? LogoFileId;
        /// <summary>
        /// Position of the logo in the portal. Valid values are: left, center, right.
        /// </summary>
        public readonly string? LogoPosition;
        /// <summary>
        /// Size of the logo in pixels.
        /// </summary>
        public readonly double? LogoSize;
        /// <summary>
        /// Text displayed after successful authentication.
        /// </summary>
        public readonly string? SuccessText;
        /// <summary>
        /// Main text color for the portal. Must be a valid hex color code (e.g., #FFF or #FFFFFF).
        /// </summary>
        public readonly string? TextColor;
        /// <summary>
        /// Title of the portal page.
        /// </summary>
        public readonly string? Title;
        /// <summary>
        /// Terms of service text.
        /// </summary>
        public readonly string? Tos;
        /// <summary>
        /// Enable terms of service acceptance requirement.
        /// </summary>
        public readonly bool? TosEnabled;
        /// <summary>
        /// Name of the Unsplash author for gallery background.
        /// </summary>
        public readonly string? UnsplashAuthorName;
        /// <summary>
        /// Username of the Unsplash author for gallery background.
        /// </summary>
        public readonly string? UnsplashAuthorUsername;
        /// <summary>
        /// Welcome text displayed on the portal.
        /// </summary>
        public readonly string? WelcomeText;
        /// <summary>
        /// Enable welcome text display.
        /// </summary>
        public readonly bool? WelcomeTextEnabled;
        /// <summary>
        /// Position of the welcome text. Valid values are: `under_logo`, `above_boxes`.
        /// </summary>
        public readonly string? WelcomeTextPosition;

        [OutputConstructor]
        private SettingGuestAccessPortalCustomization(
            string? authenticationText,

            string? bgColor,

            string? bgImageFileId,

            bool? bgImageTile,

            string? bgType,

            string? boxColor,

            string? boxLinkColor,

            double? boxOpacity,

            double? boxRadius,

            string? boxTextColor,

            string? buttonColor,

            string? buttonText,

            string? buttonTextColor,

            bool? customized,

            ImmutableArray<string> languages,

            string? linkColor,

            string? logoFileId,

            string? logoPosition,

            double? logoSize,

            string? successText,

            string? textColor,

            string? title,

            string? tos,

            bool? tosEnabled,

            string? unsplashAuthorName,

            string? unsplashAuthorUsername,

            string? welcomeText,

            bool? welcomeTextEnabled,

            string? welcomeTextPosition)
        {
            AuthenticationText = authenticationText;
            BgColor = bgColor;
            BgImageFileId = bgImageFileId;
            BgImageTile = bgImageTile;
            BgType = bgType;
            BoxColor = boxColor;
            BoxLinkColor = boxLinkColor;
            BoxOpacity = boxOpacity;
            BoxRadius = boxRadius;
            BoxTextColor = boxTextColor;
            ButtonColor = buttonColor;
            ButtonText = buttonText;
            ButtonTextColor = buttonTextColor;
            Customized = customized;
            Languages = languages;
            LinkColor = linkColor;
            LogoFileId = logoFileId;
            LogoPosition = logoPosition;
            LogoSize = logoSize;
            SuccessText = successText;
            TextColor = textColor;
            Title = title;
            Tos = tos;
            TosEnabled = tosEnabled;
            UnsplashAuthorName = unsplashAuthorName;
            UnsplashAuthorUsername = unsplashAuthorUsername;
            WelcomeText = welcomeText;
            WelcomeTextEnabled = welcomeTextEnabled;
            WelcomeTextPosition = welcomeTextPosition;
        }
    }
}
