// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// Identifies features supported by the client.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Device_clientConnectivity_clientSupports : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>&apos;true&apos; if your router can route connectionsfrom endpoints on your LAN back to your LAN using those endpointsâ€™globally-mapped IPv4 addresses/ports.</summary>
        public bool? HairPinning { get; set; }
        /// <summary>&apos;true&apos; if the device OS supports IPv6,regardless of whether IPv6 internet connectivity is available.</summary>
        public bool? Ipv6 { get; set; }
        /// <summary>&apos;true&apos; if PCP port-mapping service exists on your router.</summary>
        public bool? Pcp { get; set; }
        /// <summary>&apos;true&apos; if NAT-PMP port-mapping service exists on your router.</summary>
        public bool? Pmp { get; set; }
        /// <summary>&apos;true&apos; if UDP traffic is enabled on the current network;if &apos;false&apos;, Tailscale may be unable to make direct connections, and will rely on our DERP servers.</summary>
        public bool? Udp { get; set; }
        /// <summary>&apos;true&apos; if UPnP port-mapping service exists on your router.</summary>
        public bool? Upnp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.Device_clientConnectivity_clientSupports"/> and sets the default values.
        /// </summary>
        public Device_clientConnectivity_clientSupports()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.Device_clientConnectivity_clientSupports"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.Device_clientConnectivity_clientSupports CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.Device_clientConnectivity_clientSupports();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hairPinning", n => { HairPinning = n.GetBoolValue(); } },
                { "ipv6", n => { Ipv6 = n.GetBoolValue(); } },
                { "pcp", n => { Pcp = n.GetBoolValue(); } },
                { "pmp", n => { Pmp = n.GetBoolValue(); } },
                { "udp", n => { Udp = n.GetBoolValue(); } },
                { "upnp", n => { Upnp = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("hairPinning", HairPinning);
            writer.WriteBoolValue("ipv6", Ipv6);
            writer.WriteBoolValue("pcp", Pcp);
            writer.WriteBoolValue("pmp", Pmp);
            writer.WriteBoolValue("udp", Udp);
            writer.WriteBoolValue("upnp", Upnp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
