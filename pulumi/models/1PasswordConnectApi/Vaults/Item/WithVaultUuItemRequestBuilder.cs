// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using OnePasswordConnectApi.Client.Models;
using OnePasswordConnectApi.Client.Vaults.Item.Items;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace OnePasswordConnectApi.Client.Vaults.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \vaults\{vaultUuid}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithVaultUuItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The items property</summary>
        public global::OnePasswordConnectApi.Client.Vaults.Item.Items.ItemsRequestBuilder Items
        {
            get => new global::OnePasswordConnectApi.Client.Vaults.Item.Items.ItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.WithVaultUuItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithVaultUuItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{vaultUuid}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.WithVaultUuItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithVaultUuItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/vaults/{vaultUuid}", rawUrl)
        {
        }
        /// <summary>
        /// Get Vault details and metadata
        /// </summary>
        /// <returns>A <see cref="global::OnePasswordConnectApi.Client.Models.Vault"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::OnePasswordConnectApi.Client.Models.ErrorResponse">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::OnePasswordConnectApi.Client.Models.Vault?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::OnePasswordConnectApi.Client.Models.Vault> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "403", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "404", global::OnePasswordConnectApi.Client.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::OnePasswordConnectApi.Client.Models.Vault>(requestInfo, global::OnePasswordConnectApi.Client.Models.Vault.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Vault details and metadata
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::OnePasswordConnectApi.Client.Vaults.Item.WithVaultUuItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::OnePasswordConnectApi.Client.Vaults.Item.WithVaultUuItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::OnePasswordConnectApi.Client.Vaults.Item.WithVaultUuItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithVaultUuItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
