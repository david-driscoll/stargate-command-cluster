// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    /// <summary>
    /// The provider type for the unifi package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [UnifiResourceType("pulumi:providers:unifi")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// API Key for the user accessing the API. Can be specified with the `UNIFI_API_KEY` environment variable. Controller
        /// version 9.0.108 or later is required.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
        /// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
        /// standard controller paths.
        /// </summary>
        [Output("apiUrl")]
        public Output<string?> ApiUrl { get; private set; } = null!;

        /// <summary>
        /// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
        /// Default: `default`
        /// </summary>
        [Output("site")]
        public Output<string?> Site { get; private set; } = null!;

        /// <summary>
        /// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiKey",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ImmutableDictionary<string, object>> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:unifi/terraformConfig", CallArgs.Empty, this, null, Utilities.PackageParameterization()).Apply(v => v.Result);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
        /// API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
        /// </summary>
        [Input("allowInsecure", json: true)]
        public Input<bool>? AllowInsecure { get; set; }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// API Key for the user accessing the API. Can be specified with the `UNIFI_API_KEY` environment variable. Controller
        /// version 9.0.108 or later is required.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
        /// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
        /// standard controller paths.
        /// </summary>
        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
        /// Default: `default`
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    internal sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
