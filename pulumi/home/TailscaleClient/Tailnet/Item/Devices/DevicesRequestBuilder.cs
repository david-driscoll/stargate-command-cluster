// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Models;
namespace Tailscale.Client.Tailnet.Item.Devices
{
    /// <summary>
    /// Builds and executes requests for operations under \tailnet\{tailnet}\devices
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DevicesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/devices{?fields*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/devices{?fields*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists the devices in a tailnet.OAuth Scope: `devices:core:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Devices.DevicesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Devices.DevicesGetResponse?> GetAsDevicesGetResponseAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Devices.DevicesGetResponse> GetAsDevicesGetResponseAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Devices.DevicesGetResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Devices.DevicesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists the devices in a tailnet.OAuth Scope: `devices:core:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Devices.DevicesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsDevicesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Devices.DevicesResponse?> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Devices.DevicesResponse> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Devices.DevicesResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Devices.DevicesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists the devices in a tailnet.OAuth Scope: `devices:core:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists the devices in a tailnet.OAuth Scope: `devices:core:read`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DevicesRequestBuilderGetQueryParameters 
        {
            /// <summary>Optionally controls whether the response returns **all** fields or only a predefined subset of fields.Currently, there are two supported options:- **`all`:** return all fields in the response- **`default`:** return the following fields  - `addresses`  - `id`  - `nodeId`  - `user`  - `name`  - `hostname`  - `clientVersion`  - `updateAvailable`  - `os`  - `created`  - `lastSeen`  - `keyExpiryDisabled`  - `expires`  - `authorized`  - `isExternal`  - `machineKey`  - `nodeKey`  - `blocksIncomingConnections`  - `tailnetLockKey`  - `tailnetLockError`  - `tags`  - `isEphemeral`If the `fields` parameter is not supplied, then the default (limited fields) option is used.</summary>
            [Obsolete("This property is deprecated, use FieldsAsGetFieldsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string Fields { get; set; }
#endif
            /// <summary>Optionally controls whether the response returns **all** fields or only a predefined subset of fields.Currently, there are two supported options:- **`all`:** return all fields in the response- **`default`:** return the following fields  - `addresses`  - `id`  - `nodeId`  - `user`  - `name`  - `hostname`  - `clientVersion`  - `updateAvailable`  - `os`  - `created`  - `lastSeen`  - `keyExpiryDisabled`  - `expires`  - `authorized`  - `isExternal`  - `machineKey`  - `nodeKey`  - `blocksIncomingConnections`  - `tailnetLockKey`  - `tailnetLockError`  - `tags`  - `isEphemeral`If the `fields` parameter is not supplied, then the default (limited fields) option is used.</summary>
            [QueryParameter("fields")]
            public global::Tailscale.Client.Tailnet.Item.Devices.GetFieldsQueryParameterType? FieldsAsGetFieldsQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DevicesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Tailscale.Client.Tailnet.Item.Devices.DevicesRequestBuilder.DevicesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
