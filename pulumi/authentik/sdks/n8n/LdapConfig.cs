// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.N8n
{
    [N8nResourceType("n8n:index/ldapConfig:LdapConfig")]
    public partial class LdapConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bind DN for LDAP connection (e.g., cn=admin,dc=example,dc=com)
        /// </summary>
        [Output("bindDn")]
        public Output<string> BindDn { get; private set; } = null!;

        /// <summary>
        /// Bind password for LDAP connection
        /// </summary>
        [Output("bindPassword")]
        public Output<string> BindPassword { get; private set; } = null!;

        /// <summary>
        /// CA certificate for TLS connection (PEM format)
        /// </summary>
        [Output("caCertificate")]
        public Output<string?> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// Group search base DN (e.g., ou=groups,dc=example,dc=com)
        /// </summary>
        [Output("groupSearchBase")]
        public Output<string?> GroupSearchBase { get; private set; } = null!;

        /// <summary>
        /// Group search filter (e.g., (member={{userDN}}))
        /// </summary>
        [Output("groupSearchFilter")]
        public Output<string> GroupSearchFilter { get; private set; } = null!;

        /// <summary>
        /// User search base DN (e.g., ou=users,dc=example,dc=com)
        /// </summary>
        [Output("searchBase")]
        public Output<string> SearchBase { get; private set; } = null!;

        /// <summary>
        /// User search filter (e.g., (uid={{username}}))
        /// </summary>
        [Output("searchFilter")]
        public Output<string> SearchFilter { get; private set; } = null!;

        /// <summary>
        /// LDAP server URL (e.g., ldap://ldap.example.com:389 or ldaps://ldap.example.com:636)
        /// </summary>
        [Output("serverUrl")]
        public Output<string> ServerUrl { get; private set; } = null!;

        /// <summary>
        /// Enable TLS connection
        /// </summary>
        [Output("tlsEnabled")]
        public Output<bool> TlsEnabled { get; private set; } = null!;

        /// <summary>
        /// Attribute for user email
        /// </summary>
        [Output("userEmailAttribute")]
        public Output<string> UserEmailAttribute { get; private set; } = null!;

        /// <summary>
        /// Attribute for user first name
        /// </summary>
        [Output("userFirstNameAttribute")]
        public Output<string> UserFirstNameAttribute { get; private set; } = null!;

        /// <summary>
        /// Attribute for user ID
        /// </summary>
        [Output("userIdAttribute")]
        public Output<string> UserIdAttribute { get; private set; } = null!;

        /// <summary>
        /// Attribute for user last name
        /// </summary>
        [Output("userLastNameAttribute")]
        public Output<string> UserLastNameAttribute { get; private set; } = null!;


        /// <summary>
        /// Create a LdapConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LdapConfig(string name, LdapConfigArgs args, CustomResourceOptions? options = null)
            : base("n8n:index/ldapConfig:LdapConfig", name, args ?? new LdapConfigArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private LdapConfig(string name, Input<string> id, LdapConfigState? state = null, CustomResourceOptions? options = null)
            : base("n8n:index/ldapConfig:LdapConfig", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "bindPassword",
                    "caCertificate",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LdapConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LdapConfig Get(string name, Input<string> id, LdapConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LdapConfig(name, id, state, options);
        }
    }

    public sealed class LdapConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bind DN for LDAP connection (e.g., cn=admin,dc=example,dc=com)
        /// </summary>
        [Input("bindDn", required: true)]
        public Input<string> BindDn { get; set; } = null!;

        [Input("bindPassword", required: true)]
        private Input<string>? _bindPassword;

        /// <summary>
        /// Bind password for LDAP connection
        /// </summary>
        public Input<string>? BindPassword
        {
            get => _bindPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bindPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("caCertificate")]
        private Input<string>? _caCertificate;

        /// <summary>
        /// CA certificate for TLS connection (PEM format)
        /// </summary>
        public Input<string>? CaCertificate
        {
            get => _caCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Group search base DN (e.g., ou=groups,dc=example,dc=com)
        /// </summary>
        [Input("groupSearchBase")]
        public Input<string>? GroupSearchBase { get; set; }

        /// <summary>
        /// Group search filter (e.g., (member={{userDN}}))
        /// </summary>
        [Input("groupSearchFilter")]
        public Input<string>? GroupSearchFilter { get; set; }

        /// <summary>
        /// User search base DN (e.g., ou=users,dc=example,dc=com)
        /// </summary>
        [Input("searchBase")]
        public Input<string>? SearchBase { get; set; }

        /// <summary>
        /// User search filter (e.g., (uid={{username}}))
        /// </summary>
        [Input("searchFilter")]
        public Input<string>? SearchFilter { get; set; }

        /// <summary>
        /// LDAP server URL (e.g., ldap://ldap.example.com:389 or ldaps://ldap.example.com:636)
        /// </summary>
        [Input("serverUrl", required: true)]
        public Input<string> ServerUrl { get; set; } = null!;

        /// <summary>
        /// Enable TLS connection
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        /// <summary>
        /// Attribute for user email
        /// </summary>
        [Input("userEmailAttribute")]
        public Input<string>? UserEmailAttribute { get; set; }

        /// <summary>
        /// Attribute for user first name
        /// </summary>
        [Input("userFirstNameAttribute")]
        public Input<string>? UserFirstNameAttribute { get; set; }

        /// <summary>
        /// Attribute for user ID
        /// </summary>
        [Input("userIdAttribute")]
        public Input<string>? UserIdAttribute { get; set; }

        /// <summary>
        /// Attribute for user last name
        /// </summary>
        [Input("userLastNameAttribute")]
        public Input<string>? UserLastNameAttribute { get; set; }

        public LdapConfigArgs()
        {
        }
        public static new LdapConfigArgs Empty => new LdapConfigArgs();
    }

    public sealed class LdapConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bind DN for LDAP connection (e.g., cn=admin,dc=example,dc=com)
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("bindPassword")]
        private Input<string>? _bindPassword;

        /// <summary>
        /// Bind password for LDAP connection
        /// </summary>
        public Input<string>? BindPassword
        {
            get => _bindPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bindPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("caCertificate")]
        private Input<string>? _caCertificate;

        /// <summary>
        /// CA certificate for TLS connection (PEM format)
        /// </summary>
        public Input<string>? CaCertificate
        {
            get => _caCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Group search base DN (e.g., ou=groups,dc=example,dc=com)
        /// </summary>
        [Input("groupSearchBase")]
        public Input<string>? GroupSearchBase { get; set; }

        /// <summary>
        /// Group search filter (e.g., (member={{userDN}}))
        /// </summary>
        [Input("groupSearchFilter")]
        public Input<string>? GroupSearchFilter { get; set; }

        /// <summary>
        /// User search base DN (e.g., ou=users,dc=example,dc=com)
        /// </summary>
        [Input("searchBase")]
        public Input<string>? SearchBase { get; set; }

        /// <summary>
        /// User search filter (e.g., (uid={{username}}))
        /// </summary>
        [Input("searchFilter")]
        public Input<string>? SearchFilter { get; set; }

        /// <summary>
        /// LDAP server URL (e.g., ldap://ldap.example.com:389 or ldaps://ldap.example.com:636)
        /// </summary>
        [Input("serverUrl")]
        public Input<string>? ServerUrl { get; set; }

        /// <summary>
        /// Enable TLS connection
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        /// <summary>
        /// Attribute for user email
        /// </summary>
        [Input("userEmailAttribute")]
        public Input<string>? UserEmailAttribute { get; set; }

        /// <summary>
        /// Attribute for user first name
        /// </summary>
        [Input("userFirstNameAttribute")]
        public Input<string>? UserFirstNameAttribute { get; set; }

        /// <summary>
        /// Attribute for user ID
        /// </summary>
        [Input("userIdAttribute")]
        public Input<string>? UserIdAttribute { get; set; }

        /// <summary>
        /// Attribute for user last name
        /// </summary>
        [Input("userLastNameAttribute")]
        public Input<string>? UserLastNameAttribute { get; set; }

        public LdapConfigState()
        {
        }
        public static new LdapConfigState Empty => new LdapConfigState();
    }
}
