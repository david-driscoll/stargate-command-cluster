---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app adguard-home
spec:
  timeout: 5m
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: 3
  upgrade:
    force: true
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      *app :
        type: statefulset
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 3
        containers:
          app:
            image:
              repository: adguard/adguardhome
              tag: v0.107.61@sha256:a2085b04bbfc4759e68fa1d13d4e1558aede67c783c55820e036a95a36dd3ebf
              pullPolicy: IfNotPresent
            env:
              TZ: "${TIMEZONE}"
            probes:
              liveness: &probes
                enabled: true
                type: HTTP
                port: &ui-port 3000
                path: /login.html
              readiness: *probes
              startup:
                <<: *probes
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
            securityContext:
              allowPrivilegeEscalation: true
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi
        pod:
          priorityClassName: system-cluster-critical
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/name: *app
                      app.kubernetes.io/component: *app
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - key: node-role.kubernetes.io/control-plane
            operator: Exists
            effect: NoSchedule
          - key: node-role.kubernetes.io/master
            operator: Exists
            effect: NoSchedule
        statefulset:
          persistentVolumeClaimRetentionPolicy:
            whenDeleted: Delete
            whenScaled: Delete
          volumeClaimTemplates:
          - name: data
            storageClass: longhorn
            accessMode: ReadWriteOnce
            size: 4Gi
            globalMounts:
            - path: /opt/adguardhome/conf
              subPath: conf
      sync:
        containers:
          node-sync:
            image:
              repository: ghcr.io/bakito/adguardhome-sync
              tag: alpine-v0.7.3@sha256:1a5dfe5814c3239d814f504703ca6e3219f7cd2bb2313b8db04b2eebb5dd36ac
              pullPolicy: IfNotPresent
            args: [run]
            env:
              ORIGIN_URL: "https://adguard.driscoll.tech"
              ORIGIN_WEB_URL: https://adguard.driscoll.tech
              ORIGIN_AUTO_SETUP: "true"
              ORIGIN_USERNAME:
                secretKeyRef:
                  name: adguard-secret
                  key: username
              ORIGIN_PASSWORD:
                secretKeyRef:
                  name: adguard-secret
                  key: password
              REPLICA1_URL: "http://{{ .Release.Name }}-primary.${CLUSTER_CNAME}:3000"
              REPLICA1_WEB_URL: "https://{{ .Release.Name }}-primary.${CLUSTER_CNAME}"
              REPLICA1_AUTO_SETUP: "true"
              REPLICA1_USERNAME:
                secretKeyRef:
                  name: adguard-secret
                  key: username
              REPLICA1_PASSWORD:
                secretKeyRef:
                  name: adguard-secret
                  key: password
              REPLICA2_URL: "http://{{ .Release.Name }}-secondary.${CLUSTER_CNAME}:3000"
              REPLICA2_WEB_URL: "https://{{ .Release.Name }}-secondary.${CLUSTER_CNAME}"
              REPLICA2_AUTO_SETUP: "true"
              REPLICA2_USERNAME:
                secretKeyRef:
                  name: adguard-secret
                  key: username
              REPLICA2_PASSWORD:
                secretKeyRef:
                  name: adguard-secret
                  key: password
              REPLICA3_URL: http://{{ .Release.Name }}-tertiary.${CLUSTER_CNAME}:3000
              REPLICA3_WEB_URL: https://{{ .Release.Name }}-tertiary.${CLUSTER_CNAME}
              REPLICA3_AUTO_SETUP: "true"
              REPLICA3_USERNAME:
                secretKeyRef:
                  name: adguard-secret
                  key: username
              REPLICA3_PASSWORD:
                secretKeyRef:
                  name: adguard-secret
                  key: password
              CRON: "*/5 * * * *"
            securityContext:
              readOnlyRootFilesystem: true
        pod:
          securityContext:
            runAsNonRoot: true

    persistence:
      certs:
        name: le-production-tls
        type: secret
        globalMounts:
          - path: '/certs'
      work:
        type: emptyDir
        globalMounts:
        - path: /opt/adguardhome/work

    service:
      dns:
        controller: *app
        type: LoadBalancer
        loadBalancerIP: "${ADGUARD_VIP}"
        annotations:
          io.cilium/lb-ipam-ips: "${ADGUARD_VIP}"
          tailscale.com/expose: "true"
          tailscale.com/hostname: *app
        externalIPs:
          - "${ADGUARD_VIP}"
        externalTrafficPolicy: Cluster
        ports: &dns-ports
          dns-tcp:
            port: &dns-port 53
            protocol: TCP
          dns-udp:
            port: *dns-port
            protocol: UDP
          dns-https:
            port: 443
            protocol: TCP
          tls-tcp:
            port: 853
            protocol: TCP

      sync:
        controller: sync
        ports:
          http:
            port: &sync-port 8080

      primary: &primary
        controller: *app
        ports:
          http:
            port: *ui-port
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "0"
      primary-dns: &primary-dns
        controller: *app
        type: LoadBalancer
        externalTrafficPolicy: Local
        ports: *dns-ports
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "0"
      secondary:
        <<: *primary
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "1"
      secondary-dns:
        <<: *primary-dns
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "1"
      tertiary:
        <<: *primary
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "2"
      tertiary-dns:
        <<: *primary-dns
        extraSelectorLabels:
          apps.kubernetes.io/pod-index: "2"

    ingress:
      internal:
        className: internal
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
        hosts:
          - host: "{{ .Release.Name }}.${ROOT_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: primary
                  port: http
      tailscale:
        className: tailscale
        annotations:
          reloader.stakater.com/auto: "true"
        hosts:
          - host: "{{ .Release.Name }}.${TAILSCALE_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: primary
                  port: http
      primary: &ingress
        className: internal
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
        hosts:
          - host: "{{ .Release.Name }}-primary.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: primary
                  port: http
      secondary:
        <<: *ingress
        hosts:
          - host: "{{ .Release.Name }}-secondary.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: secondary
                  port: http
      tertiary:
        <<: *ingress
        hosts:
          - host: "{{ .Release.Name }}-tertiary.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: tertiary
                  port: http
