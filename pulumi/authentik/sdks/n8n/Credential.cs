// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.N8n
{
    [N8nResourceType("n8n:index/credential:Credential")]
    public partial class Credential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the credential was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// JSON string containing the credential configuration data. This field is sensitive and will be encrypted in state.
        /// </summary>
        [Output("data")]
        public Output<string?> Data { get; private set; } = null!;

        /// <summary>
        /// The name of the credential. Must be unique within the n8n instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of node names that can access this credential. If empty, all nodes can access it.
        /// </summary>
        [Output("nodeAccesses")]
        public Output<ImmutableArray<string>> NodeAccesses { get; private set; } = null!;

        /// <summary>
        /// The type of credential (e.g., 'httpBasicAuth', 'oAuth2Api', 'apiKey'). Determines the required data fields.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the credential was last updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Credential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Credential(string name, CredentialArgs args, CustomResourceOptions? options = null)
            : base("n8n:index/credential:Credential", name, args ?? new CredentialArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Credential(string name, Input<string> id, CredentialState? state = null, CustomResourceOptions? options = null)
            : base("n8n:index/credential:Credential", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "data",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Credential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Credential Get(string name, Input<string> id, CredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new Credential(name, id, state, options);
        }
    }

    public sealed class CredentialArgs : global::Pulumi.ResourceArgs
    {
        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// JSON string containing the credential configuration data. This field is sensitive and will be encrypted in state.
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the credential. Must be unique within the n8n instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAccesses")]
        private InputList<string>? _nodeAccesses;

        /// <summary>
        /// List of node names that can access this credential. If empty, all nodes can access it.
        /// </summary>
        public InputList<string> NodeAccesses
        {
            get => _nodeAccesses ?? (_nodeAccesses = new InputList<string>());
            set => _nodeAccesses = value;
        }

        /// <summary>
        /// The type of credential (e.g., 'httpBasicAuth', 'oAuth2Api', 'apiKey'). Determines the required data fields.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public CredentialArgs()
        {
        }
        public static new CredentialArgs Empty => new CredentialArgs();
    }

    public sealed class CredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the credential was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// JSON string containing the credential configuration data. This field is sensitive and will be encrypted in state.
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the credential. Must be unique within the n8n instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAccesses")]
        private InputList<string>? _nodeAccesses;

        /// <summary>
        /// List of node names that can access this credential. If empty, all nodes can access it.
        /// </summary>
        public InputList<string> NodeAccesses
        {
            get => _nodeAccesses ?? (_nodeAccesses = new InputList<string>());
            set => _nodeAccesses = value;
        }

        /// <summary>
        /// The type of credential (e.g., 'httpBasicAuth', 'oAuth2Api', 'apiKey'). Determines the required data fields.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Timestamp when the credential was last updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public CredentialState()
        {
        }
        public static new CredentialState Empty => new CredentialState();
    }
}
