// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    [AuthentikResourceType("authentik:index/policyGeoip:PolicyGeoip")]
    public partial class PolicyGeoip : global::Pulumi.CustomResource
    {
        [Output("asns")]
        public Output<ImmutableArray<double>> Asns { get; private set; } = null!;

        [Output("checkHistoryDistance")]
        public Output<bool?> CheckHistoryDistance { get; private set; } = null!;

        [Output("checkImpossibleTravel")]
        public Output<bool?> CheckImpossibleTravel { get; private set; } = null!;

        /// <summary>
        /// Allowed values:
        ///   - `AF`
        ///   - `AX`
        ///   - `AL`
        ///   - `DZ`
        ///   - `AS`
        ///   - `AD`
        ///   - `AO`
        ///   - `AI`
        ///   - `AQ`
        ///   - `AG`
        ///   - `AR`
        ///   - `AM`
        ///   - `AW`
        ///   - `AU`
        ///   - `AT`
        ///   - `AZ`
        ///   - `BS`
        ///   - `BH`
        ///   - `BD`
        ///   - `BB`
        ///   - `BY`
        ///   - `BE`
        ///   - `BZ`
        ///   - `BJ`
        ///   - `BM`
        ///   - `BT`
        ///   - `BO`
        ///   - `BQ`
        ///   - `BA`
        ///   - `BW`
        ///   - `BV`
        ///   - `BR`
        ///   - `IO`
        ///   - `BN`
        ///   - `BG`
        ///   - `BF`
        ///   - `BI`
        ///   - `CV`
        ///   - `KH`
        ///   - `CM`
        ///   - `CA`
        ///   - `KY`
        ///   - `CF`
        ///   - `TD`
        ///   - `CL`
        ///   - `CN`
        ///   - `CX`
        ///   - `CC`
        ///   - `CO`
        ///   - `KM`
        ///   - `CG`
        ///   - `CD`
        ///   - `CK`
        ///   - `CR`
        ///   - `CI`
        ///   - `HR`
        ///   - `CU`
        ///   - `CW`
        ///   - `CY`
        ///   - `CZ`
        ///   - `DK`
        ///   - `DJ`
        ///   - `DM`
        ///   - `DO`
        ///   - `EC`
        ///   - `EG`
        ///   - `SV`
        ///   - `GQ`
        ///   - `ER`
        ///   - `EE`
        ///   - `SZ`
        ///   - `ET`
        ///   - `FK`
        ///   - `FO`
        ///   - `FJ`
        ///   - `FI`
        ///   - `FR`
        ///   - `GF`
        ///   - `PF`
        ///   - `TF`
        ///   - `GA`
        ///   - `GM`
        ///   - `GE`
        ///   - `DE`
        ///   - `GH`
        ///   - `GI`
        ///   - `GR`
        ///   - `GL`
        ///   - `GD`
        ///   - `GP`
        ///   - `GU`
        ///   - `GT`
        ///   - `GG`
        ///   - `GN`
        ///   - `GW`
        ///   - `GY`
        ///   - `HT`
        ///   - `HM`
        ///   - `VA`
        ///   - `HN`
        ///   - `HK`
        ///   - `HU`
        ///   - `IS`
        ///   - `IN`
        ///   - `ID`
        ///   - `IR`
        ///   - `IQ`
        ///   - `IE`
        ///   - `IM`
        ///   - `IL`
        ///   - `IT`
        ///   - `JM`
        ///   - `JP`
        ///   - `JE`
        ///   - `JO`
        ///   - `KZ`
        ///   - `KE`
        ///   - `KI`
        ///   - `KW`
        ///   - `KG`
        ///   - `LA`
        ///   - `LV`
        ///   - `LB`
        ///   - `LS`
        ///   - `LR`
        ///   - `LY`
        ///   - `LI`
        ///   - `LT`
        ///   - `LU`
        ///   - `MO`
        ///   - `MG`
        ///   - `MW`
        ///   - `MY`
        ///   - `MV`
        ///   - `ML`
        ///   - `MT`
        ///   - `MH`
        ///   - `MQ`
        ///   - `MR`
        ///   - `MU`
        ///   - `YT`
        ///   - `MX`
        ///   - `FM`
        ///   - `MD`
        ///   - `MC`
        ///   - `MN`
        ///   - `ME`
        ///   - `MS`
        ///   - `MA`
        ///   - `MZ`
        ///   - `MM`
        ///   - `NA`
        ///   - `NR`
        ///   - `NP`
        ///   - `NL`
        ///   - `NC`
        ///   - `NZ`
        ///   - `NI`
        ///   - `NE`
        ///   - `NG`
        ///   - `NU`
        ///   - `NF`
        ///   - `KP`
        ///   - `MK`
        ///   - `MP`
        ///   - `NO`
        ///   - `OM`
        ///   - `PK`
        ///   - `PW`
        ///   - `PS`
        ///   - `PA`
        ///   - `PG`
        ///   - `PY`
        ///   - `PE`
        ///   - `PH`
        ///   - `PN`
        ///   - `PL`
        ///   - `PT`
        ///   - `PR`
        ///   - `QA`
        ///   - `RE`
        ///   - `RO`
        ///   - `RU`
        ///   - `RW`
        ///   - `BL`
        ///   - `SH`
        ///   - `KN`
        ///   - `LC`
        ///   - `MF`
        ///   - `PM`
        ///   - `VC`
        ///   - `WS`
        ///   - `SM`
        ///   - `ST`
        ///   - `SA`
        ///   - `SN`
        ///   - `RS`
        ///   - `SC`
        ///   - `SL`
        ///   - `SG`
        ///   - `SX`
        ///   - `SK`
        ///   - `SI`
        ///   - `SB`
        ///   - `SO`
        ///   - `ZA`
        ///   - `GS`
        ///   - `KR`
        ///   - `SS`
        ///   - `ES`
        ///   - `LK`
        ///   - `SD`
        ///   - `SR`
        ///   - `SJ`
        ///   - `SE`
        ///   - `CH`
        ///   - `SY`
        ///   - `TW`
        ///   - `TJ`
        ///   - `TZ`
        ///   - `TH`
        ///   - `TL`
        ///   - `TG`
        ///   - `TK`
        ///   - `TO`
        ///   - `TT`
        ///   - `TN`
        ///   - `TR`
        ///   - `TM`
        ///   - `TC`
        ///   - `TV`
        ///   - `UG`
        ///   - `UA`
        ///   - `AE`
        ///   - `GB`
        ///   - `UM`
        ///   - `US`
        ///   - `UY`
        ///   - `UZ`
        ///   - `VU`
        ///   - `VE`
        ///   - `VN`
        ///   - `VG`
        ///   - `VI`
        ///   - `WF`
        ///   - `EH`
        ///   - `YE`
        ///   - `ZM`
        ///   - `ZW`
        /// </summary>
        [Output("countries")]
        public Output<ImmutableArray<string>> Countries { get; private set; } = null!;

        /// <summary>
        /// Defaults to `50`.
        /// </summary>
        [Output("distanceToleranceKm")]
        public Output<double?> DistanceToleranceKm { get; private set; } = null!;

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Output("executionLogging")]
        public Output<bool?> ExecutionLogging { get; private set; } = null!;

        /// <summary>
        /// Defaults to `5`.
        /// </summary>
        [Output("historyLoginCount")]
        public Output<double?> HistoryLoginCount { get; private set; } = null!;

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Output("historyMaxDistanceKm")]
        public Output<double?> HistoryMaxDistanceKm { get; private set; } = null!;

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Output("impossibleToleranceKm")]
        public Output<double?> ImpossibleToleranceKm { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policyGeoipId")]
        public Output<string> PolicyGeoipId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyGeoip resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyGeoip(string name, PolicyGeoipArgs? args = null, CustomResourceOptions? options = null)
            : base("authentik:index/policyGeoip:PolicyGeoip", name, args ?? new PolicyGeoipArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private PolicyGeoip(string name, Input<string> id, PolicyGeoipState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/policyGeoip:PolicyGeoip", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyGeoip resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyGeoip Get(string name, Input<string> id, PolicyGeoipState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyGeoip(name, id, state, options);
        }
    }

    public sealed class PolicyGeoipArgs : global::Pulumi.ResourceArgs
    {
        [Input("asns")]
        private InputList<double>? _asns;
        public InputList<double> Asns
        {
            get => _asns ?? (_asns = new InputList<double>());
            set => _asns = value;
        }

        [Input("checkHistoryDistance")]
        public Input<bool>? CheckHistoryDistance { get; set; }

        [Input("checkImpossibleTravel")]
        public Input<bool>? CheckImpossibleTravel { get; set; }

        [Input("countries")]
        private InputList<string>? _countries;

        /// <summary>
        /// Allowed values:
        ///   - `AF`
        ///   - `AX`
        ///   - `AL`
        ///   - `DZ`
        ///   - `AS`
        ///   - `AD`
        ///   - `AO`
        ///   - `AI`
        ///   - `AQ`
        ///   - `AG`
        ///   - `AR`
        ///   - `AM`
        ///   - `AW`
        ///   - `AU`
        ///   - `AT`
        ///   - `AZ`
        ///   - `BS`
        ///   - `BH`
        ///   - `BD`
        ///   - `BB`
        ///   - `BY`
        ///   - `BE`
        ///   - `BZ`
        ///   - `BJ`
        ///   - `BM`
        ///   - `BT`
        ///   - `BO`
        ///   - `BQ`
        ///   - `BA`
        ///   - `BW`
        ///   - `BV`
        ///   - `BR`
        ///   - `IO`
        ///   - `BN`
        ///   - `BG`
        ///   - `BF`
        ///   - `BI`
        ///   - `CV`
        ///   - `KH`
        ///   - `CM`
        ///   - `CA`
        ///   - `KY`
        ///   - `CF`
        ///   - `TD`
        ///   - `CL`
        ///   - `CN`
        ///   - `CX`
        ///   - `CC`
        ///   - `CO`
        ///   - `KM`
        ///   - `CG`
        ///   - `CD`
        ///   - `CK`
        ///   - `CR`
        ///   - `CI`
        ///   - `HR`
        ///   - `CU`
        ///   - `CW`
        ///   - `CY`
        ///   - `CZ`
        ///   - `DK`
        ///   - `DJ`
        ///   - `DM`
        ///   - `DO`
        ///   - `EC`
        ///   - `EG`
        ///   - `SV`
        ///   - `GQ`
        ///   - `ER`
        ///   - `EE`
        ///   - `SZ`
        ///   - `ET`
        ///   - `FK`
        ///   - `FO`
        ///   - `FJ`
        ///   - `FI`
        ///   - `FR`
        ///   - `GF`
        ///   - `PF`
        ///   - `TF`
        ///   - `GA`
        ///   - `GM`
        ///   - `GE`
        ///   - `DE`
        ///   - `GH`
        ///   - `GI`
        ///   - `GR`
        ///   - `GL`
        ///   - `GD`
        ///   - `GP`
        ///   - `GU`
        ///   - `GT`
        ///   - `GG`
        ///   - `GN`
        ///   - `GW`
        ///   - `GY`
        ///   - `HT`
        ///   - `HM`
        ///   - `VA`
        ///   - `HN`
        ///   - `HK`
        ///   - `HU`
        ///   - `IS`
        ///   - `IN`
        ///   - `ID`
        ///   - `IR`
        ///   - `IQ`
        ///   - `IE`
        ///   - `IM`
        ///   - `IL`
        ///   - `IT`
        ///   - `JM`
        ///   - `JP`
        ///   - `JE`
        ///   - `JO`
        ///   - `KZ`
        ///   - `KE`
        ///   - `KI`
        ///   - `KW`
        ///   - `KG`
        ///   - `LA`
        ///   - `LV`
        ///   - `LB`
        ///   - `LS`
        ///   - `LR`
        ///   - `LY`
        ///   - `LI`
        ///   - `LT`
        ///   - `LU`
        ///   - `MO`
        ///   - `MG`
        ///   - `MW`
        ///   - `MY`
        ///   - `MV`
        ///   - `ML`
        ///   - `MT`
        ///   - `MH`
        ///   - `MQ`
        ///   - `MR`
        ///   - `MU`
        ///   - `YT`
        ///   - `MX`
        ///   - `FM`
        ///   - `MD`
        ///   - `MC`
        ///   - `MN`
        ///   - `ME`
        ///   - `MS`
        ///   - `MA`
        ///   - `MZ`
        ///   - `MM`
        ///   - `NA`
        ///   - `NR`
        ///   - `NP`
        ///   - `NL`
        ///   - `NC`
        ///   - `NZ`
        ///   - `NI`
        ///   - `NE`
        ///   - `NG`
        ///   - `NU`
        ///   - `NF`
        ///   - `KP`
        ///   - `MK`
        ///   - `MP`
        ///   - `NO`
        ///   - `OM`
        ///   - `PK`
        ///   - `PW`
        ///   - `PS`
        ///   - `PA`
        ///   - `PG`
        ///   - `PY`
        ///   - `PE`
        ///   - `PH`
        ///   - `PN`
        ///   - `PL`
        ///   - `PT`
        ///   - `PR`
        ///   - `QA`
        ///   - `RE`
        ///   - `RO`
        ///   - `RU`
        ///   - `RW`
        ///   - `BL`
        ///   - `SH`
        ///   - `KN`
        ///   - `LC`
        ///   - `MF`
        ///   - `PM`
        ///   - `VC`
        ///   - `WS`
        ///   - `SM`
        ///   - `ST`
        ///   - `SA`
        ///   - `SN`
        ///   - `RS`
        ///   - `SC`
        ///   - `SL`
        ///   - `SG`
        ///   - `SX`
        ///   - `SK`
        ///   - `SI`
        ///   - `SB`
        ///   - `SO`
        ///   - `ZA`
        ///   - `GS`
        ///   - `KR`
        ///   - `SS`
        ///   - `ES`
        ///   - `LK`
        ///   - `SD`
        ///   - `SR`
        ///   - `SJ`
        ///   - `SE`
        ///   - `CH`
        ///   - `SY`
        ///   - `TW`
        ///   - `TJ`
        ///   - `TZ`
        ///   - `TH`
        ///   - `TL`
        ///   - `TG`
        ///   - `TK`
        ///   - `TO`
        ///   - `TT`
        ///   - `TN`
        ///   - `TR`
        ///   - `TM`
        ///   - `TC`
        ///   - `TV`
        ///   - `UG`
        ///   - `UA`
        ///   - `AE`
        ///   - `GB`
        ///   - `UM`
        ///   - `US`
        ///   - `UY`
        ///   - `UZ`
        ///   - `VU`
        ///   - `VE`
        ///   - `VN`
        ///   - `VG`
        ///   - `VI`
        ///   - `WF`
        ///   - `EH`
        ///   - `YE`
        ///   - `ZM`
        ///   - `ZW`
        /// </summary>
        public InputList<string> Countries
        {
            get => _countries ?? (_countries = new InputList<string>());
            set => _countries = value;
        }

        /// <summary>
        /// Defaults to `50`.
        /// </summary>
        [Input("distanceToleranceKm")]
        public Input<double>? DistanceToleranceKm { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("executionLogging")]
        public Input<bool>? ExecutionLogging { get; set; }

        /// <summary>
        /// Defaults to `5`.
        /// </summary>
        [Input("historyLoginCount")]
        public Input<double>? HistoryLoginCount { get; set; }

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Input("historyMaxDistanceKm")]
        public Input<double>? HistoryMaxDistanceKm { get; set; }

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Input("impossibleToleranceKm")]
        public Input<double>? ImpossibleToleranceKm { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyGeoipId")]
        public Input<string>? PolicyGeoipId { get; set; }

        public PolicyGeoipArgs()
        {
        }
        public static new PolicyGeoipArgs Empty => new PolicyGeoipArgs();
    }

    public sealed class PolicyGeoipState : global::Pulumi.ResourceArgs
    {
        [Input("asns")]
        private InputList<double>? _asns;
        public InputList<double> Asns
        {
            get => _asns ?? (_asns = new InputList<double>());
            set => _asns = value;
        }

        [Input("checkHistoryDistance")]
        public Input<bool>? CheckHistoryDistance { get; set; }

        [Input("checkImpossibleTravel")]
        public Input<bool>? CheckImpossibleTravel { get; set; }

        [Input("countries")]
        private InputList<string>? _countries;

        /// <summary>
        /// Allowed values:
        ///   - `AF`
        ///   - `AX`
        ///   - `AL`
        ///   - `DZ`
        ///   - `AS`
        ///   - `AD`
        ///   - `AO`
        ///   - `AI`
        ///   - `AQ`
        ///   - `AG`
        ///   - `AR`
        ///   - `AM`
        ///   - `AW`
        ///   - `AU`
        ///   - `AT`
        ///   - `AZ`
        ///   - `BS`
        ///   - `BH`
        ///   - `BD`
        ///   - `BB`
        ///   - `BY`
        ///   - `BE`
        ///   - `BZ`
        ///   - `BJ`
        ///   - `BM`
        ///   - `BT`
        ///   - `BO`
        ///   - `BQ`
        ///   - `BA`
        ///   - `BW`
        ///   - `BV`
        ///   - `BR`
        ///   - `IO`
        ///   - `BN`
        ///   - `BG`
        ///   - `BF`
        ///   - `BI`
        ///   - `CV`
        ///   - `KH`
        ///   - `CM`
        ///   - `CA`
        ///   - `KY`
        ///   - `CF`
        ///   - `TD`
        ///   - `CL`
        ///   - `CN`
        ///   - `CX`
        ///   - `CC`
        ///   - `CO`
        ///   - `KM`
        ///   - `CG`
        ///   - `CD`
        ///   - `CK`
        ///   - `CR`
        ///   - `CI`
        ///   - `HR`
        ///   - `CU`
        ///   - `CW`
        ///   - `CY`
        ///   - `CZ`
        ///   - `DK`
        ///   - `DJ`
        ///   - `DM`
        ///   - `DO`
        ///   - `EC`
        ///   - `EG`
        ///   - `SV`
        ///   - `GQ`
        ///   - `ER`
        ///   - `EE`
        ///   - `SZ`
        ///   - `ET`
        ///   - `FK`
        ///   - `FO`
        ///   - `FJ`
        ///   - `FI`
        ///   - `FR`
        ///   - `GF`
        ///   - `PF`
        ///   - `TF`
        ///   - `GA`
        ///   - `GM`
        ///   - `GE`
        ///   - `DE`
        ///   - `GH`
        ///   - `GI`
        ///   - `GR`
        ///   - `GL`
        ///   - `GD`
        ///   - `GP`
        ///   - `GU`
        ///   - `GT`
        ///   - `GG`
        ///   - `GN`
        ///   - `GW`
        ///   - `GY`
        ///   - `HT`
        ///   - `HM`
        ///   - `VA`
        ///   - `HN`
        ///   - `HK`
        ///   - `HU`
        ///   - `IS`
        ///   - `IN`
        ///   - `ID`
        ///   - `IR`
        ///   - `IQ`
        ///   - `IE`
        ///   - `IM`
        ///   - `IL`
        ///   - `IT`
        ///   - `JM`
        ///   - `JP`
        ///   - `JE`
        ///   - `JO`
        ///   - `KZ`
        ///   - `KE`
        ///   - `KI`
        ///   - `KW`
        ///   - `KG`
        ///   - `LA`
        ///   - `LV`
        ///   - `LB`
        ///   - `LS`
        ///   - `LR`
        ///   - `LY`
        ///   - `LI`
        ///   - `LT`
        ///   - `LU`
        ///   - `MO`
        ///   - `MG`
        ///   - `MW`
        ///   - `MY`
        ///   - `MV`
        ///   - `ML`
        ///   - `MT`
        ///   - `MH`
        ///   - `MQ`
        ///   - `MR`
        ///   - `MU`
        ///   - `YT`
        ///   - `MX`
        ///   - `FM`
        ///   - `MD`
        ///   - `MC`
        ///   - `MN`
        ///   - `ME`
        ///   - `MS`
        ///   - `MA`
        ///   - `MZ`
        ///   - `MM`
        ///   - `NA`
        ///   - `NR`
        ///   - `NP`
        ///   - `NL`
        ///   - `NC`
        ///   - `NZ`
        ///   - `NI`
        ///   - `NE`
        ///   - `NG`
        ///   - `NU`
        ///   - `NF`
        ///   - `KP`
        ///   - `MK`
        ///   - `MP`
        ///   - `NO`
        ///   - `OM`
        ///   - `PK`
        ///   - `PW`
        ///   - `PS`
        ///   - `PA`
        ///   - `PG`
        ///   - `PY`
        ///   - `PE`
        ///   - `PH`
        ///   - `PN`
        ///   - `PL`
        ///   - `PT`
        ///   - `PR`
        ///   - `QA`
        ///   - `RE`
        ///   - `RO`
        ///   - `RU`
        ///   - `RW`
        ///   - `BL`
        ///   - `SH`
        ///   - `KN`
        ///   - `LC`
        ///   - `MF`
        ///   - `PM`
        ///   - `VC`
        ///   - `WS`
        ///   - `SM`
        ///   - `ST`
        ///   - `SA`
        ///   - `SN`
        ///   - `RS`
        ///   - `SC`
        ///   - `SL`
        ///   - `SG`
        ///   - `SX`
        ///   - `SK`
        ///   - `SI`
        ///   - `SB`
        ///   - `SO`
        ///   - `ZA`
        ///   - `GS`
        ///   - `KR`
        ///   - `SS`
        ///   - `ES`
        ///   - `LK`
        ///   - `SD`
        ///   - `SR`
        ///   - `SJ`
        ///   - `SE`
        ///   - `CH`
        ///   - `SY`
        ///   - `TW`
        ///   - `TJ`
        ///   - `TZ`
        ///   - `TH`
        ///   - `TL`
        ///   - `TG`
        ///   - `TK`
        ///   - `TO`
        ///   - `TT`
        ///   - `TN`
        ///   - `TR`
        ///   - `TM`
        ///   - `TC`
        ///   - `TV`
        ///   - `UG`
        ///   - `UA`
        ///   - `AE`
        ///   - `GB`
        ///   - `UM`
        ///   - `US`
        ///   - `UY`
        ///   - `UZ`
        ///   - `VU`
        ///   - `VE`
        ///   - `VN`
        ///   - `VG`
        ///   - `VI`
        ///   - `WF`
        ///   - `EH`
        ///   - `YE`
        ///   - `ZM`
        ///   - `ZW`
        /// </summary>
        public InputList<string> Countries
        {
            get => _countries ?? (_countries = new InputList<string>());
            set => _countries = value;
        }

        /// <summary>
        /// Defaults to `50`.
        /// </summary>
        [Input("distanceToleranceKm")]
        public Input<double>? DistanceToleranceKm { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("executionLogging")]
        public Input<bool>? ExecutionLogging { get; set; }

        /// <summary>
        /// Defaults to `5`.
        /// </summary>
        [Input("historyLoginCount")]
        public Input<double>? HistoryLoginCount { get; set; }

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Input("historyMaxDistanceKm")]
        public Input<double>? HistoryMaxDistanceKm { get; set; }

        /// <summary>
        /// Defaults to `100`.
        /// </summary>
        [Input("impossibleToleranceKm")]
        public Input<double>? ImpossibleToleranceKm { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyGeoipId")]
        public Input<string>? PolicyGeoipId { get; set; }

        public PolicyGeoipState()
        {
        }
        public static new PolicyGeoipState Empty => new PolicyGeoipState();
    }
}
