// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// `create` specifies the key&apos;s permissions when creating devices.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class KeyCapabilities_devices_create : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ephemeral for auth keys only; ephemeral keys are used to connect and then clean up short-lived devices.Learn about ephemeral nodes at https://tailscale.com/kb/1111/.</summary>
        public bool? Ephemeral { get; set; }
        /// <summary>preauthorized for auth keys only; these are also referred to as &quot;pre-approved&quot; keys. &apos;true&apos; means that devicesregistered with this key won&apos;t require additional approval from a tailnet admin.Learn about device approval at https://tailscale.com/kb/1099/.</summary>
        public bool? Preauthorized { get; set; }
        /// <summary>reusable for auth keys only; reusable auth keys can be used multiple times to register different devices.Learn more about reusable auth keys at https://tailscale.com/kb/1085/#types-of-auth-keys.</summary>
        public bool? Reusable { get; set; }
        /// <summary>tags are the tags that will be set on devices registered with this key.Learn about tags at https://tailscale.com/kb/1068/.Whether tags are required or optional depends on the owner of the auth key:- When creating an auth key owned by the tailnet (using OAuth), it must have tags. The auth tags specified for that new auth key must exactly match the tags that are on the OAuth client used to create that auth key (or they must be tags that are owned by the tags that are on the OAuth client used to create the auth key).- When creating an auth key owned by a user (using a user&apos;s access token), tags are optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.KeyCapabilities_devices_create"/> and sets the default values.
        /// </summary>
        public KeyCapabilities_devices_create()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.KeyCapabilities_devices_create"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.KeyCapabilities_devices_create CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.KeyCapabilities_devices_create();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ephemeral", n => { Ephemeral = n.GetBoolValue(); } },
                { "preauthorized", n => { Preauthorized = n.GetBoolValue(); } },
                { "reusable", n => { Reusable = n.GetBoolValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("ephemeral", Ephemeral);
            writer.WriteBoolValue("preauthorized", Preauthorized);
            writer.WriteBoolValue("reusable", Reusable);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
