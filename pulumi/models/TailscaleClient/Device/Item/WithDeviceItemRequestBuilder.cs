// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Device.Item.Attributes;
using Tailscale.Client.Device.Item.Authorized;
using Tailscale.Client.Device.Item.DeviceInvites;
using Tailscale.Client.Device.Item.Expire;
using Tailscale.Client.Device.Item.Ip;
using Tailscale.Client.Device.Item.Key;
using Tailscale.Client.Device.Item.Name;
using Tailscale.Client.Device.Item.Routes;
using Tailscale.Client.Device.Item.Tags;
using Tailscale.Client.Models;
namespace Tailscale.Client.Device.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \device\{deviceId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithDeviceItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The attributes property</summary>
        public global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder Attributes
        {
            get => new global::Tailscale.Client.Device.Item.Attributes.AttributesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The authorized property</summary>
        public global::Tailscale.Client.Device.Item.Authorized.AuthorizedRequestBuilder Authorized
        {
            get => new global::Tailscale.Client.Device.Item.Authorized.AuthorizedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The deviceInvites property</summary>
        public global::Tailscale.Client.Device.Item.DeviceInvites.DeviceInvitesRequestBuilder DeviceInvites
        {
            get => new global::Tailscale.Client.Device.Item.DeviceInvites.DeviceInvitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expire property</summary>
        public global::Tailscale.Client.Device.Item.Expire.ExpireRequestBuilder Expire
        {
            get => new global::Tailscale.Client.Device.Item.Expire.ExpireRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ip property</summary>
        public global::Tailscale.Client.Device.Item.Ip.IpRequestBuilder Ip
        {
            get => new global::Tailscale.Client.Device.Item.Ip.IpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The key property</summary>
        public global::Tailscale.Client.Device.Item.Key.KeyRequestBuilder Key
        {
            get => new global::Tailscale.Client.Device.Item.Key.KeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The name property</summary>
        public global::Tailscale.Client.Device.Item.Name.NameRequestBuilder Name
        {
            get => new global::Tailscale.Client.Device.Item.Name.NameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The routes property</summary>
        public global::Tailscale.Client.Device.Item.Routes.RoutesRequestBuilder Routes
        {
            get => new global::Tailscale.Client.Device.Item.Routes.RoutesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Tailscale.Client.Device.Item.Tags.TagsRequestBuilder Tags
        {
            get => new global::Tailscale.Client.Device.Item.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDeviceItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/device/{deviceId}{?fields*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDeviceItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/device/{deviceId}{?fields*}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the device from its tailnet.The device must belong to the requesting user&apos;s tailnet.Deleting devices shared with the tailnet is not supported.OAuth Scope: `devices:core`.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 501 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "501", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the details for the specified device.OAuth Scope: `devices:core:read`.
        /// </summary>
        /// <returns>A <see cref="global::Tailscale.Client.Models.Device"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Models.Device?> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder.WithDeviceItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Models.Device> GetAsync(Action<RequestConfiguration<global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder.WithDeviceItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Models.Device>(requestInfo, global::Tailscale.Client.Models.Device.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the device from its tailnet.The device must belong to the requesting user&apos;s tailnet.Deleting devices shared with the tailnet is not supported.OAuth Scope: `devices:core`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieve the details for the specified device.OAuth Scope: `devices:core:read`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder.WithDeviceItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder.WithDeviceItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDeviceItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Retrieve the details for the specified device.OAuth Scope: `devices:core:read`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDeviceItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Optionally controls whether the response returns **all** fields or only a predefined subset of fields.Currently, there are two supported options:- **`all`:** return all fields in the response- **`default`:** return the following fields  - `addresses`  - `id`  - `nodeId`  - `user`  - `name`  - `hostname`  - `clientVersion`  - `updateAvailable`  - `os`  - `created`  - `lastSeen`  - `keyExpiryDisabled`  - `expires`  - `authorized`  - `isExternal`  - `machineKey`  - `nodeKey`  - `blocksIncomingConnections`  - `tailnetLockKey`  - `tailnetLockError`  - `tags`  - `isEphemeral`If the `fields` parameter is not supplied, then the default (limited fields) option is used.</summary>
            [Obsolete("This property is deprecated, use FieldsAsGetFieldsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string Fields { get; set; }
#endif
            /// <summary>Optionally controls whether the response returns **all** fields or only a predefined subset of fields.Currently, there are two supported options:- **`all`:** return all fields in the response- **`default`:** return the following fields  - `addresses`  - `id`  - `nodeId`  - `user`  - `name`  - `hostname`  - `clientVersion`  - `updateAvailable`  - `os`  - `created`  - `lastSeen`  - `keyExpiryDisabled`  - `expires`  - `authorized`  - `isExternal`  - `machineKey`  - `nodeKey`  - `blocksIncomingConnections`  - `tailnetLockKey`  - `tailnetLockError`  - `tags`  - `isEphemeral`If the `fields` parameter is not supplied, then the default (limited fields) option is used.</summary>
            [QueryParameter("fields")]
            public global::Tailscale.Client.Device.Item.GetFieldsQueryParameterType? FieldsAsGetFieldsQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDeviceItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Tailscale.Client.Device.Item.WithDeviceItemRequestBuilder.WithDeviceItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
