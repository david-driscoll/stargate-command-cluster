// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// Settings for a tailnet.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TailnetSettings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Link to the external tailnet policy definition or management solution for this tailnet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AclsExternalLink { get; set; }
#nullable restore
#else
        public string AclsExternalLink { get; set; }
#endif
        /// <summary>Prevents users from editing policies in the admin console to avoid conflicts with external management workflows like GitOps or Terraform.</summary>
        public bool? AclsExternallyManagedOn { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether [device approval](/kb/1099/device-approval) is enabled for the tailnet.</summary>
        public bool? DevicesApprovalOn { get; set; }
        /// <summary>Whether [auto updates](/kb/1067/update#auto-updates) are enabled for devices that belong to this tailnet.</summary>
        public bool? DevicesAutoUpdatesOn { get; set; }
        /// <summary>The [key expiry](/kb/1028/key-expiry) duration for devices on this tailnet.</summary>
        public int? DevicesKeyDurationDays { get; set; }
        /// <summary>Whether [network flog logs](/kb/1219/network-flow-logs) are enabled for the tailnet.</summary>
        public bool? NetworkFlowLoggingOn { get; set; }
        /// <summary>Whether [identity collection](/kb/1326/device-identity) is enabled for [device posture](/kb/1288/device-posture) integrations for the tailnet.</summary>
        public bool? PostureIdentityCollectionOn { get; set; }
        /// <summary>Whether [regional routing](/kb/1115/high-availability#regional-routing) is enabled for the tailnet.</summary>
        public bool? RegionalRoutingOn { get; set; }
        /// <summary>Whether [user approval](/kb/1239/user-approval) is enabled for this tailnet.</summary>
        public bool? UsersApprovalOn { get; set; }
        /// <summary>Which user roles are allowed to [join external tailnets](/kb/1271/invite-any-user).</summary>
        public global::Tailscale.Client.Models.TailnetSettings_usersRoleAllowedToJoinExternalTailnets? UsersRoleAllowedToJoinExternalTailnets { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.TailnetSettings"/> and sets the default values.
        /// </summary>
        public TailnetSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.TailnetSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.TailnetSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.TailnetSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aclsExternalLink", n => { AclsExternalLink = n.GetStringValue(); } },
                { "aclsExternallyManagedOn", n => { AclsExternallyManagedOn = n.GetBoolValue(); } },
                { "devicesApprovalOn", n => { DevicesApprovalOn = n.GetBoolValue(); } },
                { "devicesAutoUpdatesOn", n => { DevicesAutoUpdatesOn = n.GetBoolValue(); } },
                { "devicesKeyDurationDays", n => { DevicesKeyDurationDays = n.GetIntValue(); } },
                { "networkFlowLoggingOn", n => { NetworkFlowLoggingOn = n.GetBoolValue(); } },
                { "postureIdentityCollectionOn", n => { PostureIdentityCollectionOn = n.GetBoolValue(); } },
                { "regionalRoutingOn", n => { RegionalRoutingOn = n.GetBoolValue(); } },
                { "usersApprovalOn", n => { UsersApprovalOn = n.GetBoolValue(); } },
                { "usersRoleAllowedToJoinExternalTailnets", n => { UsersRoleAllowedToJoinExternalTailnets = n.GetEnumValue<global::Tailscale.Client.Models.TailnetSettings_usersRoleAllowedToJoinExternalTailnets>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("aclsExternalLink", AclsExternalLink);
            writer.WriteBoolValue("aclsExternallyManagedOn", AclsExternallyManagedOn);
            writer.WriteBoolValue("devicesApprovalOn", DevicesApprovalOn);
            writer.WriteBoolValue("devicesAutoUpdatesOn", DevicesAutoUpdatesOn);
            writer.WriteIntValue("devicesKeyDurationDays", DevicesKeyDurationDays);
            writer.WriteBoolValue("networkFlowLoggingOn", NetworkFlowLoggingOn);
            writer.WriteBoolValue("postureIdentityCollectionOn", PostureIdentityCollectionOn);
            writer.WriteBoolValue("regionalRoutingOn", RegionalRoutingOn);
            writer.WriteBoolValue("usersApprovalOn", UsersApprovalOn);
            writer.WriteEnumValue<global::Tailscale.Client.Models.TailnetSettings_usersRoleAllowedToJoinExternalTailnets>("usersRoleAllowedToJoinExternalTailnets", UsersRoleAllowedToJoinExternalTailnets);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
