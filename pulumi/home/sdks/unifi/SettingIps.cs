// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingIps:SettingIps")]
    public partial class SettingIps : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of network IDs to enable ad blocking for. If any networks are configured, ad blocking will be automatically enabled. Each entry should be a valid network ID from your UniFi configuration. Leave empty to disable ad blocking.
        /// </summary>
        [Output("adBlockedNetworks")]
        public Output<ImmutableArray<string>> AdBlockedNetworks { get; private set; } = null!;

        /// <summary>
        /// The advanced filtering preference for IPS. Valid values are:
        ///   * `disabled` - Advanced filtering is disabled
        ///   * `manual` - Advanced filtering is enabled and manually configured
        /// </summary>
        [Output("advancedFilteringPreference")]
        public Output<string> AdvancedFilteringPreference { get; private set; } = null!;

        /// <summary>
        /// DNS filters configuration. If any filters are configured, DNS filtering will be automatically enabled. Each filter can be applied to a specific network and provides content filtering capabilities.
        /// </summary>
        [Output("dnsFilters")]
        public Output<ImmutableArray<Outputs.SettingIpsDnsFilter>> DnsFilters { get; private set; } = null!;

        /// <summary>
        /// List of enabled IPS threat categories. Each entry enables detection and prevention for a specific type of threat. The list of valid categories includes common threats like malware, exploits, scanning, and policy violations. See the validator for the complete list of available categories.
        /// </summary>
        [Output("enabledCategories")]
        public Output<ImmutableArray<string>> EnabledCategories { get; private set; } = null!;

        /// <summary>
        /// List of network IDs to enable IPS protection for. Each entry should be a valid network ID from your UniFi configuration. IPS will only monitor and protect traffic on these networks.
        /// </summary>
        [Output("enabledNetworks")]
        public Output<ImmutableArray<string>> EnabledNetworks { get; private set; } = null!;

        /// <summary>
        /// Honeypots configuration. Honeypots are decoy systems designed to detect, deflect, or study hacking attempts. They appear as legitimate parts of the network but are isolated and monitored.
        /// </summary>
        [Output("honeypots")]
        public Output<ImmutableArray<Outputs.SettingIpsHoneypot>> Honeypots { get; private set; } = null!;

        /// <summary>
        /// The IPS operation mode. Valid values are:
        ///   * `ids` - Intrusion Detection System mode (detect and log threats only)
        ///   * `ips` - Intrusion Prevention System mode (detect and block threats)
        ///   * `ipsInline` - Inline Intrusion Prevention System mode (more aggressive blocking)
        ///   * `disabled` - IPS functionality is completely disabled
        /// </summary>
        [Output("ipsMode")]
        public Output<string> IpsMode { get; private set; } = null!;

        /// <summary>
        /// Whether memory optimization is enabled for IPS. When set to `true`, the system will use less memory at the cost of potentially reduced detection capabilities. Useful for devices with limited resources. Defaults to `false`. Requires controller version 9.0 or later.
        /// </summary>
        [Output("memoryOptimized")]
        public Output<bool> MemoryOptimized { get; private set; } = null!;

        /// <summary>
        /// Whether to restrict BitTorrent and other peer-to-peer file sharing traffic. When set to `true`, the system will block P2P traffic across the network. Defaults to `false`.
        /// </summary>
        [Output("restrictTorrents")]
        public Output<bool> RestrictTorrents { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Suppression configuration for IPS. This allows you to customize which alerts are suppressed or tracked, and define whitelisted traffic that should never trigger IPS alerts.
        /// </summary>
        [Output("suppression")]
        public Output<Outputs.SettingIpsSuppression> Suppression { get; private set; } = null!;


        /// <summary>
        /// Create a SettingIps resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingIps(string name, SettingIpsArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingIps:SettingIps", name, args ?? new SettingIpsArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingIps(string name, Input<string> id, SettingIpsState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingIps:SettingIps", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingIps resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingIps Get(string name, Input<string> id, SettingIpsState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingIps(name, id, state, options);
        }
    }

    public sealed class SettingIpsArgs : global::Pulumi.ResourceArgs
    {
        [Input("adBlockedNetworks")]
        private InputList<string>? _adBlockedNetworks;

        /// <summary>
        /// List of network IDs to enable ad blocking for. If any networks are configured, ad blocking will be automatically enabled. Each entry should be a valid network ID from your UniFi configuration. Leave empty to disable ad blocking.
        /// </summary>
        public InputList<string> AdBlockedNetworks
        {
            get => _adBlockedNetworks ?? (_adBlockedNetworks = new InputList<string>());
            set => _adBlockedNetworks = value;
        }

        /// <summary>
        /// The advanced filtering preference for IPS. Valid values are:
        ///   * `disabled` - Advanced filtering is disabled
        ///   * `manual` - Advanced filtering is enabled and manually configured
        /// </summary>
        [Input("advancedFilteringPreference")]
        public Input<string>? AdvancedFilteringPreference { get; set; }

        [Input("dnsFilters")]
        private InputList<Inputs.SettingIpsDnsFilterArgs>? _dnsFilters;

        /// <summary>
        /// DNS filters configuration. If any filters are configured, DNS filtering will be automatically enabled. Each filter can be applied to a specific network and provides content filtering capabilities.
        /// </summary>
        public InputList<Inputs.SettingIpsDnsFilterArgs> DnsFilters
        {
            get => _dnsFilters ?? (_dnsFilters = new InputList<Inputs.SettingIpsDnsFilterArgs>());
            set => _dnsFilters = value;
        }

        [Input("enabledCategories")]
        private InputList<string>? _enabledCategories;

        /// <summary>
        /// List of enabled IPS threat categories. Each entry enables detection and prevention for a specific type of threat. The list of valid categories includes common threats like malware, exploits, scanning, and policy violations. See the validator for the complete list of available categories.
        /// </summary>
        public InputList<string> EnabledCategories
        {
            get => _enabledCategories ?? (_enabledCategories = new InputList<string>());
            set => _enabledCategories = value;
        }

        [Input("enabledNetworks")]
        private InputList<string>? _enabledNetworks;

        /// <summary>
        /// List of network IDs to enable IPS protection for. Each entry should be a valid network ID from your UniFi configuration. IPS will only monitor and protect traffic on these networks.
        /// </summary>
        public InputList<string> EnabledNetworks
        {
            get => _enabledNetworks ?? (_enabledNetworks = new InputList<string>());
            set => _enabledNetworks = value;
        }

        [Input("honeypots")]
        private InputList<Inputs.SettingIpsHoneypotArgs>? _honeypots;

        /// <summary>
        /// Honeypots configuration. Honeypots are decoy systems designed to detect, deflect, or study hacking attempts. They appear as legitimate parts of the network but are isolated and monitored.
        /// </summary>
        public InputList<Inputs.SettingIpsHoneypotArgs> Honeypots
        {
            get => _honeypots ?? (_honeypots = new InputList<Inputs.SettingIpsHoneypotArgs>());
            set => _honeypots = value;
        }

        /// <summary>
        /// The IPS operation mode. Valid values are:
        ///   * `ids` - Intrusion Detection System mode (detect and log threats only)
        ///   * `ips` - Intrusion Prevention System mode (detect and block threats)
        ///   * `ipsInline` - Inline Intrusion Prevention System mode (more aggressive blocking)
        ///   * `disabled` - IPS functionality is completely disabled
        /// </summary>
        [Input("ipsMode")]
        public Input<string>? IpsMode { get; set; }

        /// <summary>
        /// Whether memory optimization is enabled for IPS. When set to `true`, the system will use less memory at the cost of potentially reduced detection capabilities. Useful for devices with limited resources. Defaults to `false`. Requires controller version 9.0 or later.
        /// </summary>
        [Input("memoryOptimized")]
        public Input<bool>? MemoryOptimized { get; set; }

        /// <summary>
        /// Whether to restrict BitTorrent and other peer-to-peer file sharing traffic. When set to `true`, the system will block P2P traffic across the network. Defaults to `false`.
        /// </summary>
        [Input("restrictTorrents")]
        public Input<bool>? RestrictTorrents { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Suppression configuration for IPS. This allows you to customize which alerts are suppressed or tracked, and define whitelisted traffic that should never trigger IPS alerts.
        /// </summary>
        [Input("suppression")]
        public Input<Inputs.SettingIpsSuppressionArgs>? Suppression { get; set; }

        public SettingIpsArgs()
        {
        }
        public static new SettingIpsArgs Empty => new SettingIpsArgs();
    }

    public sealed class SettingIpsState : global::Pulumi.ResourceArgs
    {
        [Input("adBlockedNetworks")]
        private InputList<string>? _adBlockedNetworks;

        /// <summary>
        /// List of network IDs to enable ad blocking for. If any networks are configured, ad blocking will be automatically enabled. Each entry should be a valid network ID from your UniFi configuration. Leave empty to disable ad blocking.
        /// </summary>
        public InputList<string> AdBlockedNetworks
        {
            get => _adBlockedNetworks ?? (_adBlockedNetworks = new InputList<string>());
            set => _adBlockedNetworks = value;
        }

        /// <summary>
        /// The advanced filtering preference for IPS. Valid values are:
        ///   * `disabled` - Advanced filtering is disabled
        ///   * `manual` - Advanced filtering is enabled and manually configured
        /// </summary>
        [Input("advancedFilteringPreference")]
        public Input<string>? AdvancedFilteringPreference { get; set; }

        [Input("dnsFilters")]
        private InputList<Inputs.SettingIpsDnsFilterGetArgs>? _dnsFilters;

        /// <summary>
        /// DNS filters configuration. If any filters are configured, DNS filtering will be automatically enabled. Each filter can be applied to a specific network and provides content filtering capabilities.
        /// </summary>
        public InputList<Inputs.SettingIpsDnsFilterGetArgs> DnsFilters
        {
            get => _dnsFilters ?? (_dnsFilters = new InputList<Inputs.SettingIpsDnsFilterGetArgs>());
            set => _dnsFilters = value;
        }

        [Input("enabledCategories")]
        private InputList<string>? _enabledCategories;

        /// <summary>
        /// List of enabled IPS threat categories. Each entry enables detection and prevention for a specific type of threat. The list of valid categories includes common threats like malware, exploits, scanning, and policy violations. See the validator for the complete list of available categories.
        /// </summary>
        public InputList<string> EnabledCategories
        {
            get => _enabledCategories ?? (_enabledCategories = new InputList<string>());
            set => _enabledCategories = value;
        }

        [Input("enabledNetworks")]
        private InputList<string>? _enabledNetworks;

        /// <summary>
        /// List of network IDs to enable IPS protection for. Each entry should be a valid network ID from your UniFi configuration. IPS will only monitor and protect traffic on these networks.
        /// </summary>
        public InputList<string> EnabledNetworks
        {
            get => _enabledNetworks ?? (_enabledNetworks = new InputList<string>());
            set => _enabledNetworks = value;
        }

        [Input("honeypots")]
        private InputList<Inputs.SettingIpsHoneypotGetArgs>? _honeypots;

        /// <summary>
        /// Honeypots configuration. Honeypots are decoy systems designed to detect, deflect, or study hacking attempts. They appear as legitimate parts of the network but are isolated and monitored.
        /// </summary>
        public InputList<Inputs.SettingIpsHoneypotGetArgs> Honeypots
        {
            get => _honeypots ?? (_honeypots = new InputList<Inputs.SettingIpsHoneypotGetArgs>());
            set => _honeypots = value;
        }

        /// <summary>
        /// The IPS operation mode. Valid values are:
        ///   * `ids` - Intrusion Detection System mode (detect and log threats only)
        ///   * `ips` - Intrusion Prevention System mode (detect and block threats)
        ///   * `ipsInline` - Inline Intrusion Prevention System mode (more aggressive blocking)
        ///   * `disabled` - IPS functionality is completely disabled
        /// </summary>
        [Input("ipsMode")]
        public Input<string>? IpsMode { get; set; }

        /// <summary>
        /// Whether memory optimization is enabled for IPS. When set to `true`, the system will use less memory at the cost of potentially reduced detection capabilities. Useful for devices with limited resources. Defaults to `false`. Requires controller version 9.0 or later.
        /// </summary>
        [Input("memoryOptimized")]
        public Input<bool>? MemoryOptimized { get; set; }

        /// <summary>
        /// Whether to restrict BitTorrent and other peer-to-peer file sharing traffic. When set to `true`, the system will block P2P traffic across the network. Defaults to `false`.
        /// </summary>
        [Input("restrictTorrents")]
        public Input<bool>? RestrictTorrents { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Suppression configuration for IPS. This allows you to customize which alerts are suppressed or tracked, and define whitelisted traffic that should never trigger IPS alerts.
        /// </summary>
        [Input("suppression")]
        public Input<Inputs.SettingIpsSuppressionGetArgs>? Suppression { get; set; }

        public SettingIpsState()
        {
        }
        public static new SettingIpsState Empty => new SettingIpsState();
    }
}
