// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/staticRoute:StaticRoute")]
    public partial class StaticRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrative distance for this route. Lower values are preferred. Use this to control route selection when multiple routes to the same destination exist.
        /// </summary>
        [Output("distance")]
        public Output<double> Distance { get; private set; } = null!;

        /// <summary>
        /// The outbound interface to use for this route. Only used when type is set to 'interface-route'. Can be:
        ///   * `WAN1` - Primary WAN interface
        ///   * `WAN2` - Secondary WAN interface
        ///   * A network ID for internal networks
        /// </summary>
        [Output("interface")]
        public Output<string?> Interface { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the static route to help identify its purpose (e.g., 'Backup DC Link' or 'Cloud VPN Route').
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The destination network in CIDR notation that this route will direct traffic to (e.g., '10.0.0.0/16' or '192.168.100.0/24').
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The IP address of the next hop router for this route. Only used when type is set to 'nexthop-route'. This should be an IP address that is directly reachable from your UniFi gateway.
        /// </summary>
        [Output("nextHop")]
        public Output<string?> NextHop { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the static route should be created. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The type of static route. Valid values are:
        ///   * `interface-route` - Route traffic through a specific interface
        ///   * `nexthop-route` - Route traffic to a specific next-hop IP address
        ///   * `blackhole` - Drop all traffic to this network
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a StaticRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StaticRoute(string name, StaticRouteArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/staticRoute:StaticRoute", name, args ?? new StaticRouteArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private StaticRoute(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/staticRoute:StaticRoute", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StaticRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StaticRoute Get(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new StaticRoute(name, id, state, options);
        }
    }

    public sealed class StaticRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrative distance for this route. Lower values are preferred. Use this to control route selection when multiple routes to the same destination exist.
        /// </summary>
        [Input("distance", required: true)]
        public Input<double> Distance { get; set; } = null!;

        /// <summary>
        /// The outbound interface to use for this route. Only used when type is set to 'interface-route'. Can be:
        ///   * `WAN1` - Primary WAN interface
        ///   * `WAN2` - Secondary WAN interface
        ///   * A network ID for internal networks
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// A friendly name for the static route to help identify its purpose (e.g., 'Backup DC Link' or 'Cloud VPN Route').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The destination network in CIDR notation that this route will direct traffic to (e.g., '10.0.0.0/16' or '192.168.100.0/24').
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The IP address of the next hop router for this route. Only used when type is set to 'nexthop-route'. This should be an IP address that is directly reachable from your UniFi gateway.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The name of the UniFi site where the static route should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The type of static route. Valid values are:
        ///   * `interface-route` - Route traffic through a specific interface
        ///   * `nexthop-route` - Route traffic to a specific next-hop IP address
        ///   * `blackhole` - Drop all traffic to this network
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public StaticRouteArgs()
        {
        }
        public static new StaticRouteArgs Empty => new StaticRouteArgs();
    }

    public sealed class StaticRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrative distance for this route. Lower values are preferred. Use this to control route selection when multiple routes to the same destination exist.
        /// </summary>
        [Input("distance")]
        public Input<double>? Distance { get; set; }

        /// <summary>
        /// The outbound interface to use for this route. Only used when type is set to 'interface-route'. Can be:
        ///   * `WAN1` - Primary WAN interface
        ///   * `WAN2` - Secondary WAN interface
        ///   * A network ID for internal networks
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// A friendly name for the static route to help identify its purpose (e.g., 'Backup DC Link' or 'Cloud VPN Route').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The destination network in CIDR notation that this route will direct traffic to (e.g., '10.0.0.0/16' or '192.168.100.0/24').
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The IP address of the next hop router for this route. Only used when type is set to 'nexthop-route'. This should be an IP address that is directly reachable from your UniFi gateway.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The name of the UniFi site where the static route should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The type of static route. Valid values are:
        ///   * `interface-route` - Route traffic through a specific interface
        ///   * `nexthop-route` - Route traffic to a specific next-hop IP address
        ///   * `blackhole` - Drop all traffic to this network
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public StaticRouteState()
        {
        }
        public static new StaticRouteState Empty => new StaticRouteState();
    }
}
