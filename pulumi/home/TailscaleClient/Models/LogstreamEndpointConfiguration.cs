// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// The current configuration of a log streaming endpoint.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LogstreamEndpointConfiguration : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The compression algorithm with which to compress logs. `none` disables compression. Defaults to `none`.</summary>
        public global::Tailscale.Client.Models.LogstreamEndpointConfiguration_compressionFormat? CompressionFormat { get; set; }
        /// <summary>The type of system to which logs are being streamed.</summary>
        public global::Tailscale.Client.Models.LogstreamEndpointConfiguration_destinationType? DestinationType { get; set; }
        /// <summary>The type of log that is streamed to this endpoint.</summary>
        public global::Tailscale.Client.Models.LogType? LogType { get; private set; }
        /// <summary>The S3 access key ID. Required if the destinationType is `s3` and `authenticationType` is `accesskey`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3AccessKeyId { get; set; }
#nullable restore
#else
        public string S3AccessKeyId { get; set; }
#endif
        /// <summary>What type of authentication to use for S3. Required if the destinationType is `s3`. Tailscale recommends using `rolearn`. See [Amazon documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_third-party.html).</summary>
        public global::Tailscale.Client.Models.LogstreamEndpointConfiguration_s3AuthenticationType? S3AuthenticationType { get; set; }
        /// <summary>The S3 bucket name. Required if the destinationType is `s3`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3Bucket { get; set; }
#nullable restore
#else
        public string S3Bucket { get; set; }
#endif
        /// <summary>The AWS external id that Tailscale supplies when authenticating using role-based authentication. Populated if the destinationType is `s3` and `authenticationType` is `rolearn`. This corresponds to the `externalId` field obtained from [tailnet/{tailnet}/aws-external-id](#tag/logging/POST/tailnet/{tailnet}/aws-external-id).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3ExternalId { get; private set; }
#nullable restore
#else
        public string S3ExternalId { get; private set; }
#endif
        /// <summary>An optional S3 key prefix to prepend to the auto-generated S3 key name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3KeyPrefix { get; set; }
#nullable restore
#else
        public string S3KeyPrefix { get; set; }
#endif
        /// <summary>The region in which the S3 bucket is located. Required if the destinationType is `s3`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3Region { get; set; }
#nullable restore
#else
        public string S3Region { get; set; }
#endif
        /// <summary>The Role ARN that Tailscale should supply to AWS when authenticating using role-based authentication. Required if the destinationType is `s3` and `authenticationType` is `rolearn`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3RoleArn { get; set; }
#nullable restore
#else
        public string S3RoleArn { get; set; }
#endif
        /// <summary>The S3 secret access key. Required if the destinationType is `s3` and `authenticationType` is `accesskey`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3SecretAccessKey { get; set; }
#nullable restore
#else
        public string S3SecretAccessKey { get; set; }
#endif
        /// <summary>The token/password with which log streams to this endpoint should be authenticated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.</summary>
        public int? UploadPeriodMinutes { get; set; }
        /// <summary>The URL to which log streams are being posted. If the DestinationType is `s3`, the URL may be (and often is) empty to use the official Amazon S3 endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The username with which log streams to this endpoint are authenticated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? User { get; set; }
#nullable restore
#else
        public string User { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.LogstreamEndpointConfiguration"/> and sets the default values.
        /// </summary>
        public LogstreamEndpointConfiguration()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.LogstreamEndpointConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.LogstreamEndpointConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.LogstreamEndpointConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "compressionFormat", n => { CompressionFormat = n.GetEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_compressionFormat>(); } },
                { "destinationType", n => { DestinationType = n.GetEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_destinationType>(); } },
                { "logType", n => { LogType = n.GetEnumValue<global::Tailscale.Client.Models.LogType>(); } },
                { "s3AccessKeyId", n => { S3AccessKeyId = n.GetStringValue(); } },
                { "s3AuthenticationType", n => { S3AuthenticationType = n.GetEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_s3AuthenticationType>(); } },
                { "s3Bucket", n => { S3Bucket = n.GetStringValue(); } },
                { "s3ExternalId", n => { S3ExternalId = n.GetStringValue(); } },
                { "s3KeyPrefix", n => { S3KeyPrefix = n.GetStringValue(); } },
                { "s3Region", n => { S3Region = n.GetStringValue(); } },
                { "s3RoleArn", n => { S3RoleArn = n.GetStringValue(); } },
                { "s3SecretAccessKey", n => { S3SecretAccessKey = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "uploadPeriodMinutes", n => { UploadPeriodMinutes = n.GetIntValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "user", n => { User = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_compressionFormat>("compressionFormat", CompressionFormat);
            writer.WriteEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_destinationType>("destinationType", DestinationType);
            writer.WriteStringValue("s3AccessKeyId", S3AccessKeyId);
            writer.WriteEnumValue<global::Tailscale.Client.Models.LogstreamEndpointConfiguration_s3AuthenticationType>("s3AuthenticationType", S3AuthenticationType);
            writer.WriteStringValue("s3Bucket", S3Bucket);
            writer.WriteStringValue("s3KeyPrefix", S3KeyPrefix);
            writer.WriteStringValue("s3Region", S3Region);
            writer.WriteStringValue("s3RoleArn", S3RoleArn);
            writer.WriteStringValue("s3SecretAccessKey", S3SecretAccessKey);
            writer.WriteStringValue("token", Token);
            writer.WriteIntValue("uploadPeriodMinutes", UploadPeriodMinutes);
            writer.WriteStringValue("url", Url);
            writer.WriteStringValue("user", User);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
