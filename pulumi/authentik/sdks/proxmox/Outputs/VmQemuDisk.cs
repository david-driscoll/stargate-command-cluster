// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Proxmox.Outputs
{

    [OutputType]
    public sealed class VmQemuDisk
    {
        public readonly string? Aio;
        public readonly bool? Backup;
        public readonly string? Cache;
        public readonly string? Discard;
        public readonly string? File;
        public readonly string? Format;
        public readonly double? Iops;
        public readonly double? IopsMax;
        public readonly double? IopsMaxLength;
        public readonly double? IopsRd;
        public readonly double? IopsRdMax;
        public readonly double? IopsRdMaxLength;
        public readonly double? IopsWr;
        public readonly double? IopsWrMax;
        public readonly double? IopsWrMaxLength;
        public readonly double? Iothread;
        public readonly double? Mbps;
        public readonly double? MbpsRd;
        public readonly double? MbpsRdMax;
        public readonly double? MbpsWr;
        public readonly double? MbpsWrMax;
        public readonly string? Media;
        public readonly double? Replicate;
        public readonly string Size;
        public readonly double? Slot;
        public readonly double? Ssd;
        public readonly string Storage;
        public readonly string? StorageType;
        public readonly string Type;
        public readonly string? Volume;

        [OutputConstructor]
        private VmQemuDisk(
            string? aio,

            bool? backup,

            string? cache,

            string? discard,

            string? file,

            string? format,

            double? iops,

            double? iopsMax,

            double? iopsMaxLength,

            double? iopsRd,

            double? iopsRdMax,

            double? iopsRdMaxLength,

            double? iopsWr,

            double? iopsWrMax,

            double? iopsWrMaxLength,

            double? iothread,

            double? mbps,

            double? mbpsRd,

            double? mbpsRdMax,

            double? mbpsWr,

            double? mbpsWrMax,

            string? media,

            double? replicate,

            string size,

            double? slot,

            double? ssd,

            string storage,

            string? storageType,

            string type,

            string? volume)
        {
            Aio = aio;
            Backup = backup;
            Cache = cache;
            Discard = discard;
            File = file;
            Format = format;
            Iops = iops;
            IopsMax = iopsMax;
            IopsMaxLength = iopsMaxLength;
            IopsRd = iopsRd;
            IopsRdMax = iopsRdMax;
            IopsRdMaxLength = iopsRdMaxLength;
            IopsWr = iopsWr;
            IopsWrMax = iopsWrMax;
            IopsWrMaxLength = iopsWrMaxLength;
            Iothread = iothread;
            Mbps = mbps;
            MbpsRd = mbpsRd;
            MbpsRdMax = mbpsRdMax;
            MbpsWr = mbpsWr;
            MbpsWrMax = mbpsWrMax;
            Media = media;
            Replicate = replicate;
            Size = size;
            Slot = slot;
            Ssd = ssd;
            Storage = storage;
            StorageType = storageType;
            Type = type;
            Volume = volume;
        }
    }
}
