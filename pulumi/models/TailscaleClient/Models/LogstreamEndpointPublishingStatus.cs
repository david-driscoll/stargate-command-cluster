// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// Latest status of log stream publishing for a specific type of log.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LogstreamEndpointPublishingStatus : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Timestamp of the most recent publishing activity, in RFC 3339 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastActivity { get; set; }
#nullable restore
#else
        public string LastActivity { get; set; }
#endif
        /// <summary>The most recent error (if any).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastError { get; set; }
#nullable restore
#else
        public string LastError { get; set; }
#endif
        /// <summary>The size of the largest single request body.</summary>
        public int? MaxBodySize { get; set; }
        /// <summary>Total bytes published across all requests.</summary>
        public int? NumBytesSent { get; set; }
        /// <summary>The total number of entries published.</summary>
        public int? NumEntriesSent { get; set; }
        /// <summary>The total number of requests to the streaming endpoint that have failed.</summary>
        public int? NumFailedRequests { get; set; }
        /// <summary>The number of spoofed entries published. DoUpdate spoofed entry is one that failed to validate because we did not see receive a matching flow log from the other side of the connection.</summary>
        public int? NumSpoofedEntries { get; set; }
        /// <summary>The total number of requests made to the streaming endpoint.</summary>
        public int? NumTotalRequests { get; set; }
        /// <summary>The exponentially weighted moving average rate at which data is being streamed to the endpoint, in bytes per second.</summary>
        public double? RateBytesSent { get; set; }
        /// <summary>The exponentially weighted moving average rate at which entries are being sent to the endpoint, in entries per second.</summary>
        public double? RateEntriesSent { get; set; }
        /// <summary>The exponentially weighted moving average rate at which requests are failing, in requests per second.</summary>
        public double? RateFailedRequests { get; set; }
        /// <summary>The exponentially weighted moving average rate at which requests are being made to the endpoint, in requests per second.</summary>
        public double? RateTotalRequests { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.LogstreamEndpointPublishingStatus"/> and sets the default values.
        /// </summary>
        public LogstreamEndpointPublishingStatus()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.LogstreamEndpointPublishingStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.LogstreamEndpointPublishingStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.LogstreamEndpointPublishingStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "lastActivity", n => { LastActivity = n.GetStringValue(); } },
                { "lastError", n => { LastError = n.GetStringValue(); } },
                { "maxBodySize", n => { MaxBodySize = n.GetIntValue(); } },
                { "numBytesSent", n => { NumBytesSent = n.GetIntValue(); } },
                { "numEntriesSent", n => { NumEntriesSent = n.GetIntValue(); } },
                { "numFailedRequests", n => { NumFailedRequests = n.GetIntValue(); } },
                { "numSpoofedEntries", n => { NumSpoofedEntries = n.GetIntValue(); } },
                { "numTotalRequests", n => { NumTotalRequests = n.GetIntValue(); } },
                { "rateBytesSent", n => { RateBytesSent = n.GetDoubleValue(); } },
                { "rateEntriesSent", n => { RateEntriesSent = n.GetDoubleValue(); } },
                { "rateFailedRequests", n => { RateFailedRequests = n.GetDoubleValue(); } },
                { "rateTotalRequests", n => { RateTotalRequests = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("lastActivity", LastActivity);
            writer.WriteStringValue("lastError", LastError);
            writer.WriteIntValue("maxBodySize", MaxBodySize);
            writer.WriteIntValue("numBytesSent", NumBytesSent);
            writer.WriteIntValue("numEntriesSent", NumEntriesSent);
            writer.WriteIntValue("numFailedRequests", NumFailedRequests);
            writer.WriteIntValue("numSpoofedEntries", NumSpoofedEntries);
            writer.WriteIntValue("numTotalRequests", NumTotalRequests);
            writer.WriteDoubleValue("rateBytesSent", RateBytesSent);
            writer.WriteDoubleValue("rateEntriesSent", RateEntriesSent);
            writer.WriteDoubleValue("rateFailedRequests", RateFailedRequests);
            writer.WriteDoubleValue("rateTotalRequests", RateTotalRequests);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
