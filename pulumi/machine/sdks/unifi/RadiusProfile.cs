// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/radiusProfile:RadiusProfile")]
    public partial class RadiusProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
        /// </summary>
        [Output("accountingEnabled")]
        public Output<bool?> AccountingEnabled { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Port number (default: 1813)
        ///   * Shared secret for secure communication
        /// </summary>
        [Output("acctServers")]
        public Output<ImmutableArray<Outputs.RadiusProfileAcctServer>> AcctServers { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Shared secret for secure communication
        /// </summary>
        [Output("authServers")]
        public Output<ImmutableArray<Outputs.RadiusProfileAuthServer>> AuthServers { get; private set; } = null!;

        /// <summary>
        /// Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
        /// </summary>
        [Output("interimUpdateEnabled")]
        public Output<bool?> InterimUpdateEnabled { get; private set; } = null!;

        /// <summary>
        /// The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
        /// </summary>
        [Output("interimUpdateInterval")]
        public Output<double?> InterimUpdateInterval { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Output("useUsgAcctServer")]
        public Output<bool?> UseUsgAcctServer { get; private set; } = null!;

        /// <summary>
        /// Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Output("useUsgAuthServer")]
        public Output<bool?> UseUsgAuthServer { get; private set; } = null!;

        /// <summary>
        /// Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
        /// </summary>
        [Output("vlanEnabled")]
        public Output<bool?> VlanEnabled { get; private set; } = null!;

        /// <summary>
        /// VLAN assignment mode for wireless networks. Valid values are:
        ///   * `disabled` - Do not use RADIUS-assigned VLANs
        ///   * `optional` - Use RADIUS-assigned VLAN if provided
        ///   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
        /// </summary>
        [Output("vlanWlanMode")]
        public Output<string?> VlanWlanMode { get; private set; } = null!;


        /// <summary>
        /// Create a RadiusProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RadiusProfile(string name, RadiusProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/radiusProfile:RadiusProfile", name, args ?? new RadiusProfileArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private RadiusProfile(string name, Input<string> id, RadiusProfileState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/radiusProfile:RadiusProfile", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RadiusProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RadiusProfile Get(string name, Input<string> id, RadiusProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new RadiusProfile(name, id, state, options);
        }
    }

    public sealed class RadiusProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        [Input("acctServers")]
        private InputList<Inputs.RadiusProfileAcctServerArgs>? _acctServers;

        /// <summary>
        /// List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Port number (default: 1813)
        ///   * Shared secret for secure communication
        /// </summary>
        public InputList<Inputs.RadiusProfileAcctServerArgs> AcctServers
        {
            get => _acctServers ?? (_acctServers = new InputList<Inputs.RadiusProfileAcctServerArgs>());
            set => _acctServers = value;
        }

        [Input("authServers")]
        private InputList<Inputs.RadiusProfileAuthServerArgs>? _authServers;

        /// <summary>
        /// List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Shared secret for secure communication
        /// </summary>
        public InputList<Inputs.RadiusProfileAuthServerArgs> AuthServers
        {
            get => _authServers ?? (_authServers = new InputList<Inputs.RadiusProfileAuthServerArgs>());
            set => _authServers = value;
        }

        /// <summary>
        /// Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
        /// </summary>
        [Input("interimUpdateEnabled")]
        public Input<bool>? InterimUpdateEnabled { get; set; }

        /// <summary>
        /// The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<double>? InterimUpdateInterval { get; set; }

        /// <summary>
        /// A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Input("useUsgAcctServer")]
        public Input<bool>? UseUsgAcctServer { get; set; }

        /// <summary>
        /// Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Input("useUsgAuthServer")]
        public Input<bool>? UseUsgAuthServer { get; set; }

        /// <summary>
        /// Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
        /// </summary>
        [Input("vlanEnabled")]
        public Input<bool>? VlanEnabled { get; set; }

        /// <summary>
        /// VLAN assignment mode for wireless networks. Valid values are:
        ///   * `disabled` - Do not use RADIUS-assigned VLANs
        ///   * `optional` - Use RADIUS-assigned VLAN if provided
        ///   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
        /// </summary>
        [Input("vlanWlanMode")]
        public Input<string>? VlanWlanMode { get; set; }

        public RadiusProfileArgs()
        {
        }
        public static new RadiusProfileArgs Empty => new RadiusProfileArgs();
    }

    public sealed class RadiusProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        [Input("acctServers")]
        private InputList<Inputs.RadiusProfileAcctServerGetArgs>? _acctServers;

        /// <summary>
        /// List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Port number (default: 1813)
        ///   * Shared secret for secure communication
        /// </summary>
        public InputList<Inputs.RadiusProfileAcctServerGetArgs> AcctServers
        {
            get => _acctServers ?? (_acctServers = new InputList<Inputs.RadiusProfileAcctServerGetArgs>());
            set => _acctServers = value;
        }

        [Input("authServers")]
        private InputList<Inputs.RadiusProfileAuthServerGetArgs>? _authServers;

        /// <summary>
        /// List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
        ///   * IP address of the RADIUS server
        ///   * Shared secret for secure communication
        /// </summary>
        public InputList<Inputs.RadiusProfileAuthServerGetArgs> AuthServers
        {
            get => _authServers ?? (_authServers = new InputList<Inputs.RadiusProfileAuthServerGetArgs>());
            set => _authServers = value;
        }

        /// <summary>
        /// Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
        /// </summary>
        [Input("interimUpdateEnabled")]
        public Input<bool>? InterimUpdateEnabled { get; set; }

        /// <summary>
        /// The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<double>? InterimUpdateInterval { get; set; }

        /// <summary>
        /// A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Input("useUsgAcctServer")]
        public Input<bool>? UseUsgAcctServer { get; set; }

        /// <summary>
        /// Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
        /// </summary>
        [Input("useUsgAuthServer")]
        public Input<bool>? UseUsgAuthServer { get; set; }

        /// <summary>
        /// Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
        /// </summary>
        [Input("vlanEnabled")]
        public Input<bool>? VlanEnabled { get; set; }

        /// <summary>
        /// VLAN assignment mode for wireless networks. Valid values are:
        ///   * `disabled` - Do not use RADIUS-assigned VLANs
        ///   * `optional` - Use RADIUS-assigned VLAN if provided
        ///   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
        /// </summary>
        [Input("vlanWlanMode")]
        public Input<string>? VlanWlanMode { get; set; }

        public RadiusProfileState()
        {
        }
        public static new RadiusProfileState Empty => new RadiusProfileState();
    }
}
