<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Models/ApplicationDefinitionUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/ApplicationDefinitionUptime.cs" />
              <option name="originalContent" value="using System.Text.Json.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public record ApplicationDefinitionUptime&#10;{&#10;  [JsonPropertyName(&quot;http&quot;)]&#10;  public HttpUptime? Http { get; set; }&#10;  [JsonPropertyName(&quot;ping&quot;)]&#10;  public PingUptime? Ping { get; set; }&#10;  [JsonPropertyName(&quot;docker&quot;)]&#10;  public DockerUptime? Docker { get; set; }&#10;  [JsonPropertyName(&quot;dns&quot;)]&#10;  public DnsUptime? Dns { get; set; }&#10;  [JsonPropertyName(&quot;gamedig&quot;)]&#10;  public GamedigUptime? Gamedig { get; set; }&#10;  [JsonPropertyName(&quot;group&quot;)]&#10;  public GroupUptime? Group { get; set; }&#10;  [JsonPropertyName(&quot;grpc-keyword&quot;)]&#10;  public GrpcKeywordUptime? GrpcKeyword { get; set; }&#10;  [JsonPropertyName(&quot;json-query&quot;)]&#10;  public JsonQueryUptime? JsonQuery { get; set; }&#10;  [JsonPropertyName(&quot;kafka-producer&quot;)]&#10;  public KafkaProducerUptime? KafkaProducer { get; set; }&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public KeywordUptime? Keyword { get; set; }&#10;  [JsonPropertyName(&quot;mongodb&quot;)]&#10;  public MongoDbUptime? MongoDb { get; set; }&#10;  [JsonPropertyName(&quot;mqtt&quot;)]&#10;  public MqttUptime? Mqtt { get; set; }&#10;  [JsonPropertyName(&quot;mysql&quot;)]&#10;  public MysqlUptime? Mysql { get; set; }&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public PortUptime? Port { get; init; }&#10;  [JsonPropertyName(&quot;postgres&quot;)]&#10;  public PostgresUptime? Postgres { get; init; }&#10;  [JsonPropertyName(&quot;push&quot;)]&#10;  public PushUptime? Push { get; init; }&#10;  [JsonPropertyName(&quot;radius&quot;)]&#10;  public RadiusUptime? Radius { get; init; }&#10;  [JsonPropertyName(&quot;real-browser&quot;)]&#10;  public RealBrowserUptime? RealBrowser { get; init; }&#10;  [JsonPropertyName(&quot;redis&quot;)]&#10;  public RedisUptime? Redis { get; init; }&#10;  [JsonPropertyName(&quot;steam&quot;)]&#10;  public SteamUptime? Steam { get; init; }&#10;  [JsonPropertyName(&quot;sqlserver&quot;)]&#10;  public SqlServerUptime? SqlServer { get; init; }&#10;  [JsonPropertyName(&quot;tailscale-ping&quot;)]&#10;  public TailscalePingUptime? TailscalePing { get; init; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public record ApplicationDefinitionUptime&#10;{&#10;  [YamlMember(Alias = &quot;http&quot;)]&#10;  [JsonPropertyName(&quot;http&quot;)]&#10;  public HttpUptime? Http { get; set; }&#10;  [YamlMember(Alias = &quot;ping&quot;)]&#10;  [JsonPropertyName(&quot;ping&quot;)]&#10;  public PingUptime? Ping { get; set; }&#10;  [YamlMember(Alias = &quot;docker&quot;)]&#10;  [JsonPropertyName(&quot;docker&quot;)]&#10;  public DockerUptime? Docker { get; set; }&#10;  [YamlMember(Alias = &quot;dns&quot;)]&#10;  [JsonPropertyName(&quot;dns&quot;)]&#10;  public DnsUptime? Dns { get; set; }&#10;  [YamlMember(Alias = &quot;gamedig&quot;)]&#10;  [JsonPropertyName(&quot;gamedig&quot;)]&#10;  public GamedigUptime? Gamedig { get; set; }&#10;  [YamlMember(Alias = &quot;group&quot;)]&#10;  [JsonPropertyName(&quot;group&quot;)]&#10;  public GroupUptime? Group { get; set; }&#10;  [YamlMember(Alias = &quot;grpc-keyword&quot;)]&#10;  [JsonPropertyName(&quot;grpc-keyword&quot;)]&#10;  public GrpcKeywordUptime? GrpcKeyword { get; set; }&#10;  [YamlMember(Alias = &quot;json-query&quot;)]&#10;  [JsonPropertyName(&quot;json-query&quot;)]&#10;  public JsonQueryUptime? JsonQuery { get; set; }&#10;  [YamlMember(Alias = &quot;kafka-producer&quot;)]&#10;  [JsonPropertyName(&quot;kafka-producer&quot;)]&#10;  public KafkaProducerUptime? KafkaProducer { get; set; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public KeywordUptime? Keyword { get; set; }&#10;  [YamlMember(Alias = &quot;mongodb&quot;)]&#10;  [JsonPropertyName(&quot;mongodb&quot;)]&#10;  public MongoDbUptime? MongoDb { get; set; }&#10;  [YamlMember(Alias = &quot;mqtt&quot;)]&#10;  [JsonPropertyName(&quot;mqtt&quot;)]&#10;  public MqttUptime? Mqtt { get; set; }&#10;  [YamlMember(Alias = &quot;mysql&quot;)]&#10;  [JsonPropertyName(&quot;mysql&quot;)]&#10;  public MysqlUptime? Mysql { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public PortUptime? Port { get; init; }&#10;  [YamlMember(Alias = &quot;postgres&quot;)]&#10;  [JsonPropertyName(&quot;postgres&quot;)]&#10;  public PostgresUptime? Postgres { get; init; }&#10;  [YamlMember(Alias = &quot;push&quot;)]&#10;  [JsonPropertyName(&quot;push&quot;)]&#10;  public PushUptime? Push { get; init; }&#10;  [YamlMember(Alias = &quot;radius&quot;)]&#10;  [JsonPropertyName(&quot;radius&quot;)]&#10;  public RadiusUptime? Radius { get; init; }&#10;  [YamlMember(Alias = &quot;real-browser&quot;)]&#10;  [JsonPropertyName(&quot;real-browser&quot;)]&#10;  public RealBrowserUptime? RealBrowser { get; init; }&#10;  [YamlMember(Alias = &quot;redis&quot;)]&#10;  [JsonPropertyName(&quot;redis&quot;)]&#10;  public RedisUptime? Redis { get; init; }&#10;  [YamlMember(Alias = &quot;steam&quot;)]&#10;  [JsonPropertyName(&quot;steam&quot;)]&#10;  public SteamUptime? Steam { get; init; }&#10;  [YamlMember(Alias = &quot;sqlserver&quot;)]&#10;  [JsonPropertyName(&quot;sqlserver&quot;)]&#10;  public SqlServerUptime? SqlServer { get; init; }&#10;  [YamlMember(Alias = &quot;tailscale-ping&quot;)]&#10;  [JsonPropertyName(&quot;tailscale-ping&quot;)]&#10;  public TailscalePingUptime? TailscalePing { get; init; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/GrpcKeywordUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/GrpcKeywordUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class GrpcKeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;grpc-keyword&quot;;&#10;  public string GrpcBody { get; set; }&#10;  public bool? GrpcEnableTls { get; set; }&#10;  public string GrpcMetadata { get; set; }&#10;  public string GrpcMethod { get; set; }&#10;  public string GrpcProtobuf { get; set; }&#10;  public string GrpcServiceName { get; set; }&#10;  public string GrpcUrl { get; set; }&#10;  public bool? InvertKeyword { get; init; }&#10;  public string Keyword { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class GrpcKeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;grpc-keyword&quot;;&#10;  [YamlMember(Alias = &quot;grpc_body&quot;)]&#10;  [JsonPropertyName(&quot;grpc_body&quot;)]&#10;  public string GrpcBody { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_enable_tls&quot;)]&#10;  [JsonPropertyName(&quot;grpc_enable_tls&quot;)]&#10;  public bool? GrpcEnableTls { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_metadata&quot;)]&#10;  [JsonPropertyName(&quot;grpc_metadata&quot;)]&#10;  public string GrpcMetadata { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_method&quot;)]&#10;  [JsonPropertyName(&quot;grpc_method&quot;)]&#10;  public string GrpcMethod { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_protobuf&quot;)]&#10;  [JsonPropertyName(&quot;grpc_protobuf&quot;)]&#10;  public string GrpcProtobuf { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_service_name&quot;)]&#10;  [JsonPropertyName(&quot;grpc_service_name&quot;)]&#10;  public string GrpcServiceName { get; set; }&#10;  [YamlMember(Alias = &quot;grpc_url&quot;)]&#10;  [JsonPropertyName(&quot;grpc_url&quot;)]&#10;  public string GrpcUrl { get; set; }&#10;  [YamlMember(Alias = &quot;invert_keyword&quot;)]&#10;  [JsonPropertyName(&quot;invert_keyword&quot;)]&#10;  public bool? InvertKeyword { get; init; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public string Keyword { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/KeywordUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/KeywordUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class KeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;keyword&quot;;&#10;  public string Url { get; set; }&#10;  public string Keyword { get; set; }&#10;  public bool? InvertKeyword { get; set; }&#10;  public string Method { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;  public string? AuthDomain { get; init; }&#10;  public string? AuthMethod { get; init; }&#10;  public string? AuthWorkstation { get; init; }&#10;  public string? BasicAuthUser { get; init; }&#10;  public string? BasicAuthPass { get; init; }&#10;  public string? Body { get; init; }&#10;&#10;  public bool? ExpiryNotification { get; init; }&#10;  public string? HttpBodyEncoding { get; init; }&#10;  public bool? IgnoreTls { get; init; }&#10;  public int? MaxRedirects { get; init; }&#10;  public string? OauthAuthMethod { get; init; }&#10;  public string? OauthClientId { get; init; }&#10;  public string? OauthClientSecret { get; init; }&#10;  public string? OauthScopes { get; init; }&#10;  public string? OauthTokenUrl { get; init; }&#10;  public string? ProxyId { get; init; }&#10;  public int? ResendInterval { get; init; }&#10;  public int? Timeout { get; init; }&#10;  public string? TlsCa { get; init; }&#10;  public string? TlsCert { get; init; }&#10;  public string? TlsKey { get; init; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class KeywordUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;keyword&quot;;&#10;  [YamlMember(Alias = &quot;url&quot;)]&#10;  [JsonPropertyName(&quot;url&quot;)]&#10;  public string Url { get; set; }&#10;  [YamlMember(Alias = &quot;keyword&quot;)]&#10;  [JsonPropertyName(&quot;keyword&quot;)]&#10;  public string Keyword { get; set; }&#10;  [YamlMember(Alias = &quot;invert_keyword&quot;)]&#10;  [JsonPropertyName(&quot;invert_keyword&quot;)]&#10;  public bool? InvertKeyword { get; set; }&#10;  [YamlMember(Alias = &quot;method&quot;)]&#10;  [JsonPropertyName(&quot;method&quot;)]&#10;  public string Method { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;  [YamlMember(Alias = &quot;auth_domain&quot;)]&#10;  [JsonPropertyName(&quot;auth_domain&quot;)]&#10;  public string? AuthDomain { get; init; }&#10;  [YamlMember(Alias = &quot;auth_method&quot;)]&#10;  [JsonPropertyName(&quot;auth_method&quot;)]&#10;  public string? AuthMethod { get; init; }&#10;  [YamlMember(Alias = &quot;auth_workstation&quot;)]&#10;  [JsonPropertyName(&quot;auth_workstation&quot;)]&#10;  public string? AuthWorkstation { get; init; }&#10;  [YamlMember(Alias = &quot;basic_auth_user&quot;)]&#10;  [JsonPropertyName(&quot;basic_auth_user&quot;)]&#10;  public string? BasicAuthUser { get; init; }&#10;  [YamlMember(Alias = &quot;basic_auth_pass&quot;)]&#10;  [JsonPropertyName(&quot;basic_auth_pass&quot;)]&#10;  public string? BasicAuthPass { get; init; }&#10;  [YamlMember(Alias = &quot;body&quot;)]&#10;  [JsonPropertyName(&quot;body&quot;)]&#10;  public string? Body { get; init; }&#10;  [YamlMember(Alias = &quot;expiry_notification&quot;)]&#10;  [JsonPropertyName(&quot;expiry_notification&quot;)]&#10;  public bool? ExpiryNotification { get; init; }&#10;  [YamlMember(Alias = &quot;http_body_encoding&quot;)]&#10;  [JsonPropertyName(&quot;http_body_encoding&quot;)]&#10;  public string? HttpBodyEncoding { get; init; }&#10;  [YamlMember(Alias = &quot;ignore_tls&quot;)]&#10;  [JsonPropertyName(&quot;ignore_tls&quot;)]&#10;  public bool? IgnoreTls { get; init; }&#10;  [YamlMember(Alias = &quot;max_redirects&quot;)]&#10;  [JsonPropertyName(&quot;max_redirects&quot;)]&#10;  public int? MaxRedirects { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_auth_method&quot;)]&#10;  [JsonPropertyName(&quot;oauth_auth_method&quot;)]&#10;  public string? OauthAuthMethod { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_client_id&quot;)]&#10;  [JsonPropertyName(&quot;oauth_client_id&quot;)]&#10;  public string? OauthClientId { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_client_secret&quot;)]&#10;  [JsonPropertyName(&quot;oauth_client_secret&quot;)]&#10;  public string? OauthClientSecret { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_scopes&quot;)]&#10;  [JsonPropertyName(&quot;oauth_scopes&quot;)]&#10;  public string? OauthScopes { get; init; }&#10;  [YamlMember(Alias = &quot;oauth_token_url&quot;)]&#10;  [JsonPropertyName(&quot;oauth_token_url&quot;)]&#10;  public string? OauthTokenUrl { get; init; }&#10;  [YamlMember(Alias = &quot;proxy_id&quot;)]&#10;  [JsonPropertyName(&quot;proxy_id&quot;)]&#10;  public string? ProxyId { get; init; }&#10;  [YamlMember(Alias = &quot;resend_interval&quot;)]&#10;  [JsonPropertyName(&quot;resend_interval&quot;)]&#10;  public int? ResendInterval { get; init; }&#10;  [YamlMember(Alias = &quot;timeout&quot;)]&#10;  [JsonPropertyName(&quot;timeout&quot;)]&#10;  public int? Timeout { get; init; }&#10;  [YamlMember(Alias = &quot;tls_ca&quot;)]&#10;  [JsonPropertyName(&quot;tls_ca&quot;)]&#10;  public string? TlsCa { get; init; }&#10;  [YamlMember(Alias = &quot;tls_cert&quot;)]&#10;  [JsonPropertyName(&quot;tls_cert&quot;)]&#10;  public string? TlsCert { get; init; }&#10;  [YamlMember(Alias = &quot;tls_key&quot;)]&#10;  [JsonPropertyName(&quot;tls_key&quot;)]&#10;  public string? TlsKey { get; init; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/PushUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/PushUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class PushUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;push&quot;;&#10;  public string PushToken { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class PushUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;push&quot;;&#10;  [YamlMember(Alias = &quot;push_token&quot;)]&#10;  [JsonPropertyName(&quot;push_token&quot;)]&#10;  public string PushToken { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/RadiusUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/RadiusUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class RadiusUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;radius&quot;;&#10;  public string Hostname { get; set; }&#10;  public int? Port { get; init; }&#10;  public string RadiusCalledStationId { get; init; }&#10;  public string RadiusCallingStationId { get; init; }&#10;  public string RadiusPassword { get; init; }&#10;  public string RadiusSecret { get; init; }&#10;  public string RadiusUsername { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class RadiusUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;radius&quot;;&#10;  [YamlMember(Alias = &quot;hostname&quot;)]&#10;  [JsonPropertyName(&quot;hostname&quot;)]&#10;  public string Hostname { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;radius_called_station_id&quot;)]&#10;  [JsonPropertyName(&quot;radius_called_station_id&quot;)]&#10;  public string RadiusCalledStationId { get; init; }&#10;  [YamlMember(Alias = &quot;radius_calling_station_id&quot;)]&#10;  [JsonPropertyName(&quot;radius_calling_station_id&quot;)]&#10;  public string RadiusCallingStationId { get; init; }&#10;  [YamlMember(Alias = &quot;radius_password&quot;)]&#10;  [JsonPropertyName(&quot;radius_password&quot;)]&#10;  public string RadiusPassword { get; init; }&#10;  [YamlMember(Alias = &quot;radius_secret&quot;)]&#10;  [JsonPropertyName(&quot;radius_secret&quot;)]&#10;  public string RadiusSecret { get; init; }&#10;  [YamlMember(Alias = &quot;radius_username&quot;)]&#10;  [JsonPropertyName(&quot;radius_username&quot;)]&#10;  public string RadiusUsername { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/SqlServerUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/SqlServerUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SqlServerUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;sqlserver&quot;;&#10;  public string DatabaseConnectionString { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SqlServerUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;sqlserver&quot;;&#10;  [YamlMember(Alias = &quot;database_connection_string&quot;)]&#10;  [JsonPropertyName(&quot;database_connection_string&quot;)]&#10;  public string DatabaseConnectionString { get; set; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/SteamUptime.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/SteamUptime.cs" />
              <option name="originalContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SteamUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;steam&quot;;&#10;  public string Hostname { get; set; }&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Immutable;&#10;using System.Text.Json.Serialization;&#10;using YamlDotNet.Serialization;&#10;&#10;namespace authentik.Models;&#10;&#10;public class SteamUptime : UptimeBase&#10;{&#10;  public override string Type { get; } = &quot;steam&quot;;&#10;  [YamlMember(Alias = &quot;hostname&quot;)]&#10;  [JsonPropertyName(&quot;hostname&quot;)]&#10;  public string Hostname { get; set; }&#10;  [YamlMember(Alias = &quot;port&quot;)]&#10;  [JsonPropertyName(&quot;port&quot;)]&#10;  public int? Port { get; init; }&#10;  [YamlMember(Alias = &quot;accepted_statuscodes&quot;)]&#10;  [JsonPropertyName(&quot;accepted_statuscodes&quot;)]&#10;  public ImmutableList&lt;string&gt;? AcceptedStatusCodes { get; set; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>