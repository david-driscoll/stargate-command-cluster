// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of IPv4 DNS server addresses to be provided to DHCP clients. Examples: * Use ['8.8.8.8', '8.8.4.4'] for Google DNS
        /// * Use ['1.1.1.1', '1.0.0.1'] for Cloudflare DNS * Use internal DNS servers for corporate networks Maximum 4 servers can
        /// be specified.
        /// </summary>
        [Output("dhcpDns")]
        public Output<ImmutableArray<string>> DhcpDns { get; private set; } = null!;

        /// <summary>
        /// Controls whether DHCP server is enabled for this network. When enabled: * The network will automatically assign IP
        /// addresses to clients * DHCP options (DNS, lease time) will be provided to clients * Static IP assignments can still be
        /// made outside the DHCP range
        /// </summary>
        [Output("dhcpEnabled")]
        public Output<bool?> DhcpEnabled { get; private set; } = null!;

        /// <summary>
        /// The DHCP lease time in seconds. Common values: * 86400 (1 day) - Default, suitable for most networks * 3600 (1 hour) -
        /// For testing or temporary networks * 604800 (1 week) - For stable networks with static clients * 2592000 (30 days) - For
        /// very stable networks Defaults to `86400`.
        /// </summary>
        [Output("dhcpLease")]
        public Output<double?> DhcpLease { get; private set; } = null!;

        /// <summary>
        /// Enables DHCP relay for this network. When enabled: * DHCP requests are forwarded to an external DHCP server * Local DHCP
        /// server is disabled * Useful for centralized DHCP management
        /// </summary>
        [Output("dhcpRelayEnabled")]
        public Output<bool?> DhcpRelayEnabled { get; private set; } = null!;

        /// <summary>
        /// The starting IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical start: '192.168.1.100' * For
        /// subnet 10.0.0.0/24, typical start: '10.0.0.100' Ensure this address is within the network's subnet.
        /// </summary>
        [Output("dhcpStart")]
        public Output<string?> DhcpStart { get; private set; } = null!;

        /// <summary>
        /// The ending IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical stop: '192.168.1.254' * For
        /// subnet 10.0.0.0/24, typical stop: '10.0.0.254' Must be greater than dhcp_start and within the network's subnet.
        /// </summary>
        [Output("dhcpStop")]
        public Output<string?> DhcpStop { get; private set; } = null!;

        /// <summary>
        /// List of IPv6 DNS server addresses for DHCPv6 clients. Examples: * Use ['2001:4860:4860::8888', '2001:4860:4860::8844']
        /// for Google DNS * Use ['2606:4700:4700::1111', '2606:4700:4700::1001'] for Cloudflare DNS Only used when dhcp_v6_dns_auto
        /// is false. Maximum of 4 addresses are allowed.
        /// </summary>
        [Output("dhcpV6Dns")]
        public Output<ImmutableArray<string>> DhcpV6Dns { get; private set; } = null!;

        /// <summary>
        /// Controls DNS server source for DHCPv6 clients: * true - Use upstream DNS servers (recommended) * false - Use manually
        /// specified servers from dhcp_v6_dns Default is true for easier management. Defaults to `true`.
        /// </summary>
        [Output("dhcpV6DnsAuto")]
        public Output<bool?> DhcpV6DnsAuto { get; private set; } = null!;

        /// <summary>
        /// Enables stateful DHCPv6 for IPv6 address assignment. When enabled: * Provides IPv6 addresses to clients * Works
        /// alongside SLAAC if configured * Allows for more controlled IPv6 addressing
        /// </summary>
        [Output("dhcpV6Enabled")]
        public Output<bool?> DhcpV6Enabled { get; private set; } = null!;

        /// <summary>
        /// The DHCPv6 lease time in seconds. Common values: * 86400 (1 day) - Default setting * 3600 (1 hour) - For testing *
        /// 604800 (1 week) - For stable networks Typically longer than IPv4 DHCP leases. Defaults to `86400`.
        /// </summary>
        [Output("dhcpV6Lease")]
        public Output<double?> DhcpV6Lease { get; private set; } = null!;

        /// <summary>
        /// The starting IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be a valid IPv6 address within
        /// your allocated IPv6 subnet.
        /// </summary>
        [Output("dhcpV6Start")]
        public Output<string?> DhcpV6Start { get; private set; } = null!;

        /// <summary>
        /// The ending IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be after dhcp_v6_start in the
        /// IPv6 address space.
        /// </summary>
        [Output("dhcpV6Stop")]
        public Output<string?> DhcpV6Stop { get; private set; } = null!;

        /// <summary>
        /// Enables DHCP boot options for PXE boot or network boot configurations. When enabled: * Allows network devices to boot
        /// from a TFTP server * Requires dhcpd_boot_server and dhcpd_boot_filename to be set * Commonly used for diskless
        /// workstations or network installations
        /// </summary>
        [Output("dhcpdBootEnabled")]
        public Output<bool?> DhcpdBootEnabled { get; private set; } = null!;

        /// <summary>
        /// The boot filename to be loaded from the TFTP server. Examples: * 'pxelinux.0' - Standard PXE boot loader *
        /// 'undionly.kpxe' - iPXE boot loader * Custom paths for specific boot images
        /// </summary>
        [Output("dhcpdBootFilename")]
        public Output<string?> DhcpdBootFilename { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address of the TFTP server for network boot. This setting: * Is required when dhcpd_boot_enabled is true *
        /// Should be a reliable, always-on server * Must be accessible to all clients that need to boot
        /// </summary>
        [Output("dhcpdBootServer")]
        public Output<string?> DhcpdBootServer { get; private set; } = null!;

        /// <summary>
        /// The domain name for this network. Examples: * 'corp.example.com' - For corporate networks * 'guest.example.com' - For
        /// guest networks * 'iot.example.com' - For IoT networks Used for internal DNS resolution and DHCP options.
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// Controls whether this network is active. When disabled: * Network will not be available to clients * DHCP services will
        /// be stopped * Existing clients will be disconnected Useful for temporary network maintenance or security measures.
        /// Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Enables IGMP (Internet Group Management Protocol) snooping. When enabled: * Optimizes multicast traffic flow * Reduces
        /// network congestion * Improves performance for multicast applications (e.g., IPTV) Recommended for networks with
        /// multicast traffic.
        /// </summary>
        [Output("igmpSnooping")]
        public Output<bool?> IgmpSnooping { get; private set; } = null!;

        /// <summary>
        /// Controls internet access for this network. When disabled: * Clients cannot access external networks * Internal network
        /// access remains available * Useful for creating isolated or secure networks Defaults to `true`.
        /// </summary>
        [Output("internetAccessEnabled")]
        public Output<bool?> InternetAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the IPv6 connection type. Must be one of: * `none` - IPv6 disabled (default) * `static` - Static IPv6
        /// addressing * `pd` - Prefix Delegation from upstream Choose based on your IPv6 deployment strategy and ISP capabilities.
        /// Defaults to `none`.
        /// </summary>
        [Output("ipv6InterfaceType")]
        public Output<string?> Ipv6InterfaceType { get; private set; } = null!;

        /// <summary>
        /// The WAN interface to use for IPv6 Prefix Delegation. Options: * `wan` - Primary WAN interface * `wan2` - Secondary WAN
        /// interface Only applicable when `ipv6_interface_type` is 'pd'.
        /// </summary>
        [Output("ipv6PdInterface")]
        public Output<string?> Ipv6PdInterface { get; private set; } = null!;

        /// <summary>
        /// The IPv6 Prefix ID for Prefix Delegation. Used to: * Differentiate multiple delegated prefixes * Create unique subnets
        /// from the delegated prefix Typically a hexadecimal value (e.g., '0', '1', 'a1').
        /// </summary>
        [Output("ipv6PdPrefixid")]
        public Output<string?> Ipv6PdPrefixid { get; private set; } = null!;

        /// <summary>
        /// The starting IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be within the
        /// delegated prefix range.
        /// </summary>
        [Output("ipv6PdStart")]
        public Output<string?> Ipv6PdStart { get; private set; } = null!;

        /// <summary>
        /// The ending IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be after
        /// `ipv6_pd_start` within the delegated prefix.
        /// </summary>
        [Output("ipv6PdStop")]
        public Output<string?> Ipv6PdStop { get; private set; } = null!;

        /// <summary>
        /// Enables IPv6 Router Advertisements (RA). When enabled: * Announces IPv6 prefix information to clients * Enables SLAAC
        /// address configuration * Required for most IPv6 deployments
        /// </summary>
        [Output("ipv6RaEnable")]
        public Output<bool?> Ipv6RaEnable { get; private set; } = null!;

        /// <summary>
        /// The preferred lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be less than or equal to
        /// `ipv6_ra_valid_lifetime` * Default: 14400 (4 hours) * After this time, addresses become deprecated but still usable
        /// Defaults to `14400`.
        /// </summary>
        [Output("ipv6RaPreferredLifetime")]
        public Output<double?> Ipv6RaPreferredLifetime { get; private set; } = null!;

        /// <summary>
        /// Sets the priority for IPv6 Router Advertisements. Options: * `high` - Preferred for primary networks * `medium` -
        /// Standard priority * `low` - For backup or secondary networks Affects router selection when multiple IPv6 routers exist.
        /// </summary>
        [Output("ipv6RaPriority")]
        public Output<string?> Ipv6RaPriority { get; private set; } = null!;

        /// <summary>
        /// The valid lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be greater than or equal to
        /// `ipv6_ra_preferred_lifetime` * Default: 86400 (24 hours) * After this time, addresses become invalid Defaults to
        /// `86400`.
        /// </summary>
        [Output("ipv6RaValidLifetime")]
        public Output<double?> Ipv6RaValidLifetime { get; private set; } = null!;

        /// <summary>
        /// The static IPv6 subnet in CIDR notation (e.g., '2001:db8::/64') when using static IPv6. Only applicable when
        /// `ipv6_interface_type` is 'static'. Must be a valid IPv6 subnet allocated to your organization.
        /// </summary>
        [Output("ipv6StaticSubnet")]
        public Output<string?> Ipv6StaticSubnet { get; private set; } = null!;

        /// <summary>
        /// Enables Multicast DNS (mDNS/Bonjour/Avahi) on the network. When enabled: * Allows device discovery (e.g., printers,
        /// Chromecasts) * Supports zero-configuration networking * Available on Controller version 7 and later
        /// </summary>
        [Output("multicastDns")]
        public Output<bool?> MulticastDns { get; private set; } = null!;

        /// <summary>
        /// The name of the network. This should be a descriptive name that helps identify the network's purpose, such as
        /// 'Corporate-Main', 'Guest-Network', or 'IoT-VLAN'.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network group for this network. Default is 'LAN'. For WAN networks, use 'WAN' or 'WAN2'. Network groups help
        /// organize and apply policies to multiple networks. Defaults to `LAN`.
        /// </summary>
        [Output("networkGroup")]
        public Output<string?> NetworkGroup { get; private set; } = null!;

        /// <summary>
        /// Enables network isolation. When enabled: * Prevents communication between clients on this network * Each client can only
        /// communicate with the gateway * Commonly used for guest networks or IoT devices Defaults to `false`.
        /// </summary>
        [Output("networkIsolationEnabled")]
        public Output<bool?> NetworkIsolationEnabled { get; private set; } = null!;

        /// <summary>
        /// The purpose/type of the network. Must be one of: * `corporate` - Standard network for corporate use with full access *
        /// `guest` - Isolated network for guest access with limited permissions * `wan` - External network connection (WAN uplink)
        /// * `vlan-only` - VLAN network without DHCP services
        /// </summary>
        [Output("purpose")]
        public Output<string> Purpose { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The IPv4 subnet for this network in CIDR notation (e.g., '192.168.1.0/24'). This defines the network's address space and
        /// determines the range of IP addresses available for DHCP.
        /// </summary>
        [Output("subnet")]
        public Output<string?> Subnet { get; private set; } = null!;

        /// <summary>
        /// The VLAN ID for this network. Valid range is 0-4096. Common uses: * 1-4094: Standard VLAN range for network segmentation
        /// * 0: Untagged/native VLAN * &gt;4094: Reserved for special purposes
        /// </summary>
        [Output("vlanId")]
        public Output<double?> VlanId { get; private set; } = null!;

        /// <summary>
        /// The IPv6 prefix size to request from ISP. Must be between 48 and 64. Only applicable when `wan_type_v6` is 'dhcpv6'.
        /// </summary>
        [Output("wanDhcpV6PdSize")]
        public Output<double?> WanDhcpV6PdSize { get; private set; } = null!;

        /// <summary>
        /// List of IPv4 DNS servers for WAN interface. Examples: * ISP provided DNS servers * Public DNS services (e.g., 8.8.8.8,
        /// 1.1.1.1) * Maximum 4 servers can be specified
        /// </summary>
        [Output("wanDns")]
        public Output<ImmutableArray<string>> WanDns { get; private set; } = null!;

        /// <summary>
        /// Quality of Service (QoS) priority for WAN egress traffic (0-7). * 0 (default) - Best effort * 1-4 - Increasing priority
        /// * 5-7 - Highest priority, use sparingly Higher values get preferential treatment. Defaults to `0`.
        /// </summary>
        [Output("wanEgressQos")]
        public Output<double?> WanEgressQos { get; private set; } = null!;

        /// <summary>
        /// The IPv4 gateway address for WAN interface. Required when `wan_type` is 'static'. Typically the ISP's router IP address.
        /// </summary>
        [Output("wanGateway")]
        public Output<string?> WanGateway { get; private set; } = null!;

        /// <summary>
        /// The IPv6 gateway address for WAN interface. Required when `wan_type_v6` is 'static'. Typically the ISP's router IPv6
        /// address.
        /// </summary>
        [Output("wanGatewayV6")]
        public Output<string?> WanGatewayV6 { get; private set; } = null!;

        /// <summary>
        /// The static IPv4 address for WAN interface. Required when `wan_type` is 'static'. Must be a valid public IP address
        /// assigned by your ISP.
        /// </summary>
        [Output("wanIp")]
        public Output<string?> WanIp { get; private set; } = null!;

        /// <summary>
        /// The static IPv6 address for WAN interface. Required when `wan_type_v6` is 'static'. Must be a valid public IPv6 address
        /// assigned by your ISP.
        /// </summary>
        [Output("wanIpv6")]
        public Output<string?> WanIpv6 { get; private set; } = null!;

        /// <summary>
        /// The IPv4 netmask for WAN interface (e.g., '255.255.255.0'). Required when `wan_type` is 'static'. Must match the subnet
        /// mask provided by your ISP.
        /// </summary>
        [Output("wanNetmask")]
        public Output<string?> WanNetmask { get; private set; } = null!;

        /// <summary>
        /// The WAN interface group assignment. Options: * `WAN` - Primary WAN interface * `WAN2` - Secondary WAN interface *
        /// `WAN_LTE_FAILOVER` - LTE backup connection Used for dual WAN and failover configurations.
        /// </summary>
        [Output("wanNetworkgroup")]
        public Output<string?> WanNetworkgroup { get; private set; } = null!;

        /// <summary>
        /// The IPv6 prefix length for WAN interface. Must be between 1 and 128. Only applicable when `wan_type_v6` is 'static'.
        /// </summary>
        [Output("wanPrefixlen")]
        public Output<double?> WanPrefixlen { get; private set; } = null!;

        /// <summary>
        /// The IPv4 WAN connection type. Options: * `disabled` - WAN interface disabled * `static` - Static IP configuration *
        /// `dhcp` - Dynamic IP from ISP * `pppoe` - PPPoE connection (common for DSL) Choose based on your ISP's requirements.
        /// </summary>
        [Output("wanType")]
        public Output<string?> WanType { get; private set; } = null!;

        /// <summary>
        /// The IPv6 WAN connection type. Options: * `disabled` - IPv6 disabled * `static` - Static IPv6 configuration * `dhcpv6` -
        /// Dynamic IPv6 from ISP Choose based on your ISP's requirements.
        /// </summary>
        [Output("wanTypeV6")]
        public Output<string?> WanTypeV6 { get; private set; } = null!;

        /// <summary>
        /// Username for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Cannot
        /// contain spaces or special characters
        /// </summary>
        [Output("wanUsername")]
        public Output<string?> WanUsername { get; private set; } = null!;

        /// <summary>
        /// Password for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Must be
        /// kept secret
        /// </summary>
        [Output("xWanPassword")]
        public Output<string?> XWanPassword { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/network:Network", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        [Input("dhcpDns")]
        private InputList<string>? _dhcpDns;

        /// <summary>
        /// List of IPv4 DNS server addresses to be provided to DHCP clients. Examples: * Use ['8.8.8.8', '8.8.4.4'] for Google DNS
        /// * Use ['1.1.1.1', '1.0.0.1'] for Cloudflare DNS * Use internal DNS servers for corporate networks Maximum 4 servers can
        /// be specified.
        /// </summary>
        public InputList<string> DhcpDns
        {
            get => _dhcpDns ?? (_dhcpDns = new InputList<string>());
            set => _dhcpDns = value;
        }

        /// <summary>
        /// Controls whether DHCP server is enabled for this network. When enabled: * The network will automatically assign IP
        /// addresses to clients * DHCP options (DNS, lease time) will be provided to clients * Static IP assignments can still be
        /// made outside the DHCP range
        /// </summary>
        [Input("dhcpEnabled")]
        public Input<bool>? DhcpEnabled { get; set; }

        /// <summary>
        /// The DHCP lease time in seconds. Common values: * 86400 (1 day) - Default, suitable for most networks * 3600 (1 hour) -
        /// For testing or temporary networks * 604800 (1 week) - For stable networks with static clients * 2592000 (30 days) - For
        /// very stable networks Defaults to `86400`.
        /// </summary>
        [Input("dhcpLease")]
        public Input<double>? DhcpLease { get; set; }

        /// <summary>
        /// Enables DHCP relay for this network. When enabled: * DHCP requests are forwarded to an external DHCP server * Local DHCP
        /// server is disabled * Useful for centralized DHCP management
        /// </summary>
        [Input("dhcpRelayEnabled")]
        public Input<bool>? DhcpRelayEnabled { get; set; }

        /// <summary>
        /// The starting IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical start: '192.168.1.100' * For
        /// subnet 10.0.0.0/24, typical start: '10.0.0.100' Ensure this address is within the network's subnet.
        /// </summary>
        [Input("dhcpStart")]
        public Input<string>? DhcpStart { get; set; }

        /// <summary>
        /// The ending IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical stop: '192.168.1.254' * For
        /// subnet 10.0.0.0/24, typical stop: '10.0.0.254' Must be greater than dhcp_start and within the network's subnet.
        /// </summary>
        [Input("dhcpStop")]
        public Input<string>? DhcpStop { get; set; }

        [Input("dhcpV6Dns")]
        private InputList<string>? _dhcpV6Dns;

        /// <summary>
        /// List of IPv6 DNS server addresses for DHCPv6 clients. Examples: * Use ['2001:4860:4860::8888', '2001:4860:4860::8844']
        /// for Google DNS * Use ['2606:4700:4700::1111', '2606:4700:4700::1001'] for Cloudflare DNS Only used when dhcp_v6_dns_auto
        /// is false. Maximum of 4 addresses are allowed.
        /// </summary>
        public InputList<string> DhcpV6Dns
        {
            get => _dhcpV6Dns ?? (_dhcpV6Dns = new InputList<string>());
            set => _dhcpV6Dns = value;
        }

        /// <summary>
        /// Controls DNS server source for DHCPv6 clients: * true - Use upstream DNS servers (recommended) * false - Use manually
        /// specified servers from dhcp_v6_dns Default is true for easier management. Defaults to `true`.
        /// </summary>
        [Input("dhcpV6DnsAuto")]
        public Input<bool>? DhcpV6DnsAuto { get; set; }

        /// <summary>
        /// Enables stateful DHCPv6 for IPv6 address assignment. When enabled: * Provides IPv6 addresses to clients * Works
        /// alongside SLAAC if configured * Allows for more controlled IPv6 addressing
        /// </summary>
        [Input("dhcpV6Enabled")]
        public Input<bool>? DhcpV6Enabled { get; set; }

        /// <summary>
        /// The DHCPv6 lease time in seconds. Common values: * 86400 (1 day) - Default setting * 3600 (1 hour) - For testing *
        /// 604800 (1 week) - For stable networks Typically longer than IPv4 DHCP leases. Defaults to `86400`.
        /// </summary>
        [Input("dhcpV6Lease")]
        public Input<double>? DhcpV6Lease { get; set; }

        /// <summary>
        /// The starting IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be a valid IPv6 address within
        /// your allocated IPv6 subnet.
        /// </summary>
        [Input("dhcpV6Start")]
        public Input<string>? DhcpV6Start { get; set; }

        /// <summary>
        /// The ending IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be after dhcp_v6_start in the
        /// IPv6 address space.
        /// </summary>
        [Input("dhcpV6Stop")]
        public Input<string>? DhcpV6Stop { get; set; }

        /// <summary>
        /// Enables DHCP boot options for PXE boot or network boot configurations. When enabled: * Allows network devices to boot
        /// from a TFTP server * Requires dhcpd_boot_server and dhcpd_boot_filename to be set * Commonly used for diskless
        /// workstations or network installations
        /// </summary>
        [Input("dhcpdBootEnabled")]
        public Input<bool>? DhcpdBootEnabled { get; set; }

        /// <summary>
        /// The boot filename to be loaded from the TFTP server. Examples: * 'pxelinux.0' - Standard PXE boot loader *
        /// 'undionly.kpxe' - iPXE boot loader * Custom paths for specific boot images
        /// </summary>
        [Input("dhcpdBootFilename")]
        public Input<string>? DhcpdBootFilename { get; set; }

        /// <summary>
        /// The IPv4 address of the TFTP server for network boot. This setting: * Is required when dhcpd_boot_enabled is true *
        /// Should be a reliable, always-on server * Must be accessible to all clients that need to boot
        /// </summary>
        [Input("dhcpdBootServer")]
        public Input<string>? DhcpdBootServer { get; set; }

        /// <summary>
        /// The domain name for this network. Examples: * 'corp.example.com' - For corporate networks * 'guest.example.com' - For
        /// guest networks * 'iot.example.com' - For IoT networks Used for internal DNS resolution and DHCP options.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Controls whether this network is active. When disabled: * Network will not be available to clients * DHCP services will
        /// be stopped * Existing clients will be disconnected Useful for temporary network maintenance or security measures.
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enables IGMP (Internet Group Management Protocol) snooping. When enabled: * Optimizes multicast traffic flow * Reduces
        /// network congestion * Improves performance for multicast applications (e.g., IPTV) Recommended for networks with
        /// multicast traffic.
        /// </summary>
        [Input("igmpSnooping")]
        public Input<bool>? IgmpSnooping { get; set; }

        /// <summary>
        /// Controls internet access for this network. When disabled: * Clients cannot access external networks * Internal network
        /// access remains available * Useful for creating isolated or secure networks Defaults to `true`.
        /// </summary>
        [Input("internetAccessEnabled")]
        public Input<bool>? InternetAccessEnabled { get; set; }

        /// <summary>
        /// Specifies the IPv6 connection type. Must be one of: * `none` - IPv6 disabled (default) * `static` - Static IPv6
        /// addressing * `pd` - Prefix Delegation from upstream Choose based on your IPv6 deployment strategy and ISP capabilities.
        /// Defaults to `none`.
        /// </summary>
        [Input("ipv6InterfaceType")]
        public Input<string>? Ipv6InterfaceType { get; set; }

        /// <summary>
        /// The WAN interface to use for IPv6 Prefix Delegation. Options: * `wan` - Primary WAN interface * `wan2` - Secondary WAN
        /// interface Only applicable when `ipv6_interface_type` is 'pd'.
        /// </summary>
        [Input("ipv6PdInterface")]
        public Input<string>? Ipv6PdInterface { get; set; }

        /// <summary>
        /// The IPv6 Prefix ID for Prefix Delegation. Used to: * Differentiate multiple delegated prefixes * Create unique subnets
        /// from the delegated prefix Typically a hexadecimal value (e.g., '0', '1', 'a1').
        /// </summary>
        [Input("ipv6PdPrefixid")]
        public Input<string>? Ipv6PdPrefixid { get; set; }

        /// <summary>
        /// The starting IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be within the
        /// delegated prefix range.
        /// </summary>
        [Input("ipv6PdStart")]
        public Input<string>? Ipv6PdStart { get; set; }

        /// <summary>
        /// The ending IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be after
        /// `ipv6_pd_start` within the delegated prefix.
        /// </summary>
        [Input("ipv6PdStop")]
        public Input<string>? Ipv6PdStop { get; set; }

        /// <summary>
        /// Enables IPv6 Router Advertisements (RA). When enabled: * Announces IPv6 prefix information to clients * Enables SLAAC
        /// address configuration * Required for most IPv6 deployments
        /// </summary>
        [Input("ipv6RaEnable")]
        public Input<bool>? Ipv6RaEnable { get; set; }

        /// <summary>
        /// The preferred lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be less than or equal to
        /// `ipv6_ra_valid_lifetime` * Default: 14400 (4 hours) * After this time, addresses become deprecated but still usable
        /// Defaults to `14400`.
        /// </summary>
        [Input("ipv6RaPreferredLifetime")]
        public Input<double>? Ipv6RaPreferredLifetime { get; set; }

        /// <summary>
        /// Sets the priority for IPv6 Router Advertisements. Options: * `high` - Preferred for primary networks * `medium` -
        /// Standard priority * `low` - For backup or secondary networks Affects router selection when multiple IPv6 routers exist.
        /// </summary>
        [Input("ipv6RaPriority")]
        public Input<string>? Ipv6RaPriority { get; set; }

        /// <summary>
        /// The valid lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be greater than or equal to
        /// `ipv6_ra_preferred_lifetime` * Default: 86400 (24 hours) * After this time, addresses become invalid Defaults to
        /// `86400`.
        /// </summary>
        [Input("ipv6RaValidLifetime")]
        public Input<double>? Ipv6RaValidLifetime { get; set; }

        /// <summary>
        /// The static IPv6 subnet in CIDR notation (e.g., '2001:db8::/64') when using static IPv6. Only applicable when
        /// `ipv6_interface_type` is 'static'. Must be a valid IPv6 subnet allocated to your organization.
        /// </summary>
        [Input("ipv6StaticSubnet")]
        public Input<string>? Ipv6StaticSubnet { get; set; }

        /// <summary>
        /// Enables Multicast DNS (mDNS/Bonjour/Avahi) on the network. When enabled: * Allows device discovery (e.g., printers,
        /// Chromecasts) * Supports zero-configuration networking * Available on Controller version 7 and later
        /// </summary>
        [Input("multicastDns")]
        public Input<bool>? MulticastDns { get; set; }

        /// <summary>
        /// The name of the network. This should be a descriptive name that helps identify the network's purpose, such as
        /// 'Corporate-Main', 'Guest-Network', or 'IoT-VLAN'.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network group for this network. Default is 'LAN'. For WAN networks, use 'WAN' or 'WAN2'. Network groups help
        /// organize and apply policies to multiple networks. Defaults to `LAN`.
        /// </summary>
        [Input("networkGroup")]
        public Input<string>? NetworkGroup { get; set; }

        /// <summary>
        /// Enables network isolation. When enabled: * Prevents communication between clients on this network * Each client can only
        /// communicate with the gateway * Commonly used for guest networks or IoT devices Defaults to `false`.
        /// </summary>
        [Input("networkIsolationEnabled")]
        public Input<bool>? NetworkIsolationEnabled { get; set; }

        /// <summary>
        /// The purpose/type of the network. Must be one of: * `corporate` - Standard network for corporate use with full access *
        /// `guest` - Isolated network for guest access with limited permissions * `wan` - External network connection (WAN uplink)
        /// * `vlan-only` - VLAN network without DHCP services
        /// </summary>
        [Input("purpose", required: true)]
        public Input<string> Purpose { get; set; } = null!;

        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The IPv4 subnet for this network in CIDR notation (e.g., '192.168.1.0/24'). This defines the network's address space and
        /// determines the range of IP addresses available for DHCP.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// The VLAN ID for this network. Valid range is 0-4096. Common uses: * 1-4094: Standard VLAN range for network segmentation
        /// * 0: Untagged/native VLAN * &gt;4094: Reserved for special purposes
        /// </summary>
        [Input("vlanId")]
        public Input<double>? VlanId { get; set; }

        /// <summary>
        /// The IPv6 prefix size to request from ISP. Must be between 48 and 64. Only applicable when `wan_type_v6` is 'dhcpv6'.
        /// </summary>
        [Input("wanDhcpV6PdSize")]
        public Input<double>? WanDhcpV6PdSize { get; set; }

        [Input("wanDns")]
        private InputList<string>? _wanDns;

        /// <summary>
        /// List of IPv4 DNS servers for WAN interface. Examples: * ISP provided DNS servers * Public DNS services (e.g., 8.8.8.8,
        /// 1.1.1.1) * Maximum 4 servers can be specified
        /// </summary>
        public InputList<string> WanDns
        {
            get => _wanDns ?? (_wanDns = new InputList<string>());
            set => _wanDns = value;
        }

        /// <summary>
        /// Quality of Service (QoS) priority for WAN egress traffic (0-7). * 0 (default) - Best effort * 1-4 - Increasing priority
        /// * 5-7 - Highest priority, use sparingly Higher values get preferential treatment. Defaults to `0`.
        /// </summary>
        [Input("wanEgressQos")]
        public Input<double>? WanEgressQos { get; set; }

        /// <summary>
        /// The IPv4 gateway address for WAN interface. Required when `wan_type` is 'static'. Typically the ISP's router IP address.
        /// </summary>
        [Input("wanGateway")]
        public Input<string>? WanGateway { get; set; }

        /// <summary>
        /// The IPv6 gateway address for WAN interface. Required when `wan_type_v6` is 'static'. Typically the ISP's router IPv6
        /// address.
        /// </summary>
        [Input("wanGatewayV6")]
        public Input<string>? WanGatewayV6 { get; set; }

        /// <summary>
        /// The static IPv4 address for WAN interface. Required when `wan_type` is 'static'. Must be a valid public IP address
        /// assigned by your ISP.
        /// </summary>
        [Input("wanIp")]
        public Input<string>? WanIp { get; set; }

        /// <summary>
        /// The static IPv6 address for WAN interface. Required when `wan_type_v6` is 'static'. Must be a valid public IPv6 address
        /// assigned by your ISP.
        /// </summary>
        [Input("wanIpv6")]
        public Input<string>? WanIpv6 { get; set; }

        /// <summary>
        /// The IPv4 netmask for WAN interface (e.g., '255.255.255.0'). Required when `wan_type` is 'static'. Must match the subnet
        /// mask provided by your ISP.
        /// </summary>
        [Input("wanNetmask")]
        public Input<string>? WanNetmask { get; set; }

        /// <summary>
        /// The WAN interface group assignment. Options: * `WAN` - Primary WAN interface * `WAN2` - Secondary WAN interface *
        /// `WAN_LTE_FAILOVER` - LTE backup connection Used for dual WAN and failover configurations.
        /// </summary>
        [Input("wanNetworkgroup")]
        public Input<string>? WanNetworkgroup { get; set; }

        /// <summary>
        /// The IPv6 prefix length for WAN interface. Must be between 1 and 128. Only applicable when `wan_type_v6` is 'static'.
        /// </summary>
        [Input("wanPrefixlen")]
        public Input<double>? WanPrefixlen { get; set; }

        /// <summary>
        /// The IPv4 WAN connection type. Options: * `disabled` - WAN interface disabled * `static` - Static IP configuration *
        /// `dhcp` - Dynamic IP from ISP * `pppoe` - PPPoE connection (common for DSL) Choose based on your ISP's requirements.
        /// </summary>
        [Input("wanType")]
        public Input<string>? WanType { get; set; }

        /// <summary>
        /// The IPv6 WAN connection type. Options: * `disabled` - IPv6 disabled * `static` - Static IPv6 configuration * `dhcpv6` -
        /// Dynamic IPv6 from ISP Choose based on your ISP's requirements.
        /// </summary>
        [Input("wanTypeV6")]
        public Input<string>? WanTypeV6 { get; set; }

        /// <summary>
        /// Username for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Cannot
        /// contain spaces or special characters
        /// </summary>
        [Input("wanUsername")]
        public Input<string>? WanUsername { get; set; }

        /// <summary>
        /// Password for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Must be
        /// kept secret
        /// </summary>
        [Input("xWanPassword")]
        public Input<string>? XWanPassword { get; set; }

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        [Input("dhcpDns")]
        private InputList<string>? _dhcpDns;

        /// <summary>
        /// List of IPv4 DNS server addresses to be provided to DHCP clients. Examples: * Use ['8.8.8.8', '8.8.4.4'] for Google DNS
        /// * Use ['1.1.1.1', '1.0.0.1'] for Cloudflare DNS * Use internal DNS servers for corporate networks Maximum 4 servers can
        /// be specified.
        /// </summary>
        public InputList<string> DhcpDns
        {
            get => _dhcpDns ?? (_dhcpDns = new InputList<string>());
            set => _dhcpDns = value;
        }

        /// <summary>
        /// Controls whether DHCP server is enabled for this network. When enabled: * The network will automatically assign IP
        /// addresses to clients * DHCP options (DNS, lease time) will be provided to clients * Static IP assignments can still be
        /// made outside the DHCP range
        /// </summary>
        [Input("dhcpEnabled")]
        public Input<bool>? DhcpEnabled { get; set; }

        /// <summary>
        /// The DHCP lease time in seconds. Common values: * 86400 (1 day) - Default, suitable for most networks * 3600 (1 hour) -
        /// For testing or temporary networks * 604800 (1 week) - For stable networks with static clients * 2592000 (30 days) - For
        /// very stable networks Defaults to `86400`.
        /// </summary>
        [Input("dhcpLease")]
        public Input<double>? DhcpLease { get; set; }

        /// <summary>
        /// Enables DHCP relay for this network. When enabled: * DHCP requests are forwarded to an external DHCP server * Local DHCP
        /// server is disabled * Useful for centralized DHCP management
        /// </summary>
        [Input("dhcpRelayEnabled")]
        public Input<bool>? DhcpRelayEnabled { get; set; }

        /// <summary>
        /// The starting IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical start: '192.168.1.100' * For
        /// subnet 10.0.0.0/24, typical start: '10.0.0.100' Ensure this address is within the network's subnet.
        /// </summary>
        [Input("dhcpStart")]
        public Input<string>? DhcpStart { get; set; }

        /// <summary>
        /// The ending IPv4 address of the DHCP range. Examples: * For subnet 192.168.1.0/24, typical stop: '192.168.1.254' * For
        /// subnet 10.0.0.0/24, typical stop: '10.0.0.254' Must be greater than dhcp_start and within the network's subnet.
        /// </summary>
        [Input("dhcpStop")]
        public Input<string>? DhcpStop { get; set; }

        [Input("dhcpV6Dns")]
        private InputList<string>? _dhcpV6Dns;

        /// <summary>
        /// List of IPv6 DNS server addresses for DHCPv6 clients. Examples: * Use ['2001:4860:4860::8888', '2001:4860:4860::8844']
        /// for Google DNS * Use ['2606:4700:4700::1111', '2606:4700:4700::1001'] for Cloudflare DNS Only used when dhcp_v6_dns_auto
        /// is false. Maximum of 4 addresses are allowed.
        /// </summary>
        public InputList<string> DhcpV6Dns
        {
            get => _dhcpV6Dns ?? (_dhcpV6Dns = new InputList<string>());
            set => _dhcpV6Dns = value;
        }

        /// <summary>
        /// Controls DNS server source for DHCPv6 clients: * true - Use upstream DNS servers (recommended) * false - Use manually
        /// specified servers from dhcp_v6_dns Default is true for easier management. Defaults to `true`.
        /// </summary>
        [Input("dhcpV6DnsAuto")]
        public Input<bool>? DhcpV6DnsAuto { get; set; }

        /// <summary>
        /// Enables stateful DHCPv6 for IPv6 address assignment. When enabled: * Provides IPv6 addresses to clients * Works
        /// alongside SLAAC if configured * Allows for more controlled IPv6 addressing
        /// </summary>
        [Input("dhcpV6Enabled")]
        public Input<bool>? DhcpV6Enabled { get; set; }

        /// <summary>
        /// The DHCPv6 lease time in seconds. Common values: * 86400 (1 day) - Default setting * 3600 (1 hour) - For testing *
        /// 604800 (1 week) - For stable networks Typically longer than IPv4 DHCP leases. Defaults to `86400`.
        /// </summary>
        [Input("dhcpV6Lease")]
        public Input<double>? DhcpV6Lease { get; set; }

        /// <summary>
        /// The starting IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be a valid IPv6 address within
        /// your allocated IPv6 subnet.
        /// </summary>
        [Input("dhcpV6Start")]
        public Input<string>? DhcpV6Start { get; set; }

        /// <summary>
        /// The ending IPv6 address for the DHCPv6 range. Used in static DHCPv6 configuration. Must be after dhcp_v6_start in the
        /// IPv6 address space.
        /// </summary>
        [Input("dhcpV6Stop")]
        public Input<string>? DhcpV6Stop { get; set; }

        /// <summary>
        /// Enables DHCP boot options for PXE boot or network boot configurations. When enabled: * Allows network devices to boot
        /// from a TFTP server * Requires dhcpd_boot_server and dhcpd_boot_filename to be set * Commonly used for diskless
        /// workstations or network installations
        /// </summary>
        [Input("dhcpdBootEnabled")]
        public Input<bool>? DhcpdBootEnabled { get; set; }

        /// <summary>
        /// The boot filename to be loaded from the TFTP server. Examples: * 'pxelinux.0' - Standard PXE boot loader *
        /// 'undionly.kpxe' - iPXE boot loader * Custom paths for specific boot images
        /// </summary>
        [Input("dhcpdBootFilename")]
        public Input<string>? DhcpdBootFilename { get; set; }

        /// <summary>
        /// The IPv4 address of the TFTP server for network boot. This setting: * Is required when dhcpd_boot_enabled is true *
        /// Should be a reliable, always-on server * Must be accessible to all clients that need to boot
        /// </summary>
        [Input("dhcpdBootServer")]
        public Input<string>? DhcpdBootServer { get; set; }

        /// <summary>
        /// The domain name for this network. Examples: * 'corp.example.com' - For corporate networks * 'guest.example.com' - For
        /// guest networks * 'iot.example.com' - For IoT networks Used for internal DNS resolution and DHCP options.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Controls whether this network is active. When disabled: * Network will not be available to clients * DHCP services will
        /// be stopped * Existing clients will be disconnected Useful for temporary network maintenance or security measures.
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enables IGMP (Internet Group Management Protocol) snooping. When enabled: * Optimizes multicast traffic flow * Reduces
        /// network congestion * Improves performance for multicast applications (e.g., IPTV) Recommended for networks with
        /// multicast traffic.
        /// </summary>
        [Input("igmpSnooping")]
        public Input<bool>? IgmpSnooping { get; set; }

        /// <summary>
        /// Controls internet access for this network. When disabled: * Clients cannot access external networks * Internal network
        /// access remains available * Useful for creating isolated or secure networks Defaults to `true`.
        /// </summary>
        [Input("internetAccessEnabled")]
        public Input<bool>? InternetAccessEnabled { get; set; }

        /// <summary>
        /// Specifies the IPv6 connection type. Must be one of: * `none` - IPv6 disabled (default) * `static` - Static IPv6
        /// addressing * `pd` - Prefix Delegation from upstream Choose based on your IPv6 deployment strategy and ISP capabilities.
        /// Defaults to `none`.
        /// </summary>
        [Input("ipv6InterfaceType")]
        public Input<string>? Ipv6InterfaceType { get; set; }

        /// <summary>
        /// The WAN interface to use for IPv6 Prefix Delegation. Options: * `wan` - Primary WAN interface * `wan2` - Secondary WAN
        /// interface Only applicable when `ipv6_interface_type` is 'pd'.
        /// </summary>
        [Input("ipv6PdInterface")]
        public Input<string>? Ipv6PdInterface { get; set; }

        /// <summary>
        /// The IPv6 Prefix ID for Prefix Delegation. Used to: * Differentiate multiple delegated prefixes * Create unique subnets
        /// from the delegated prefix Typically a hexadecimal value (e.g., '0', '1', 'a1').
        /// </summary>
        [Input("ipv6PdPrefixid")]
        public Input<string>? Ipv6PdPrefixid { get; set; }

        /// <summary>
        /// The starting IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be within the
        /// delegated prefix range.
        /// </summary>
        [Input("ipv6PdStart")]
        public Input<string>? Ipv6PdStart { get; set; }

        /// <summary>
        /// The ending IPv6 address for Prefix Delegation range. Only used when `ipv6_interface_type` is 'pd'. Must be after
        /// `ipv6_pd_start` within the delegated prefix.
        /// </summary>
        [Input("ipv6PdStop")]
        public Input<string>? Ipv6PdStop { get; set; }

        /// <summary>
        /// Enables IPv6 Router Advertisements (RA). When enabled: * Announces IPv6 prefix information to clients * Enables SLAAC
        /// address configuration * Required for most IPv6 deployments
        /// </summary>
        [Input("ipv6RaEnable")]
        public Input<bool>? Ipv6RaEnable { get; set; }

        /// <summary>
        /// The preferred lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be less than or equal to
        /// `ipv6_ra_valid_lifetime` * Default: 14400 (4 hours) * After this time, addresses become deprecated but still usable
        /// Defaults to `14400`.
        /// </summary>
        [Input("ipv6RaPreferredLifetime")]
        public Input<double>? Ipv6RaPreferredLifetime { get; set; }

        /// <summary>
        /// Sets the priority for IPv6 Router Advertisements. Options: * `high` - Preferred for primary networks * `medium` -
        /// Standard priority * `low` - For backup or secondary networks Affects router selection when multiple IPv6 routers exist.
        /// </summary>
        [Input("ipv6RaPriority")]
        public Input<string>? Ipv6RaPriority { get; set; }

        /// <summary>
        /// The valid lifetime (in seconds) for IPv6 addresses in Router Advertisements. * Must be greater than or equal to
        /// `ipv6_ra_preferred_lifetime` * Default: 86400 (24 hours) * After this time, addresses become invalid Defaults to
        /// `86400`.
        /// </summary>
        [Input("ipv6RaValidLifetime")]
        public Input<double>? Ipv6RaValidLifetime { get; set; }

        /// <summary>
        /// The static IPv6 subnet in CIDR notation (e.g., '2001:db8::/64') when using static IPv6. Only applicable when
        /// `ipv6_interface_type` is 'static'. Must be a valid IPv6 subnet allocated to your organization.
        /// </summary>
        [Input("ipv6StaticSubnet")]
        public Input<string>? Ipv6StaticSubnet { get; set; }

        /// <summary>
        /// Enables Multicast DNS (mDNS/Bonjour/Avahi) on the network. When enabled: * Allows device discovery (e.g., printers,
        /// Chromecasts) * Supports zero-configuration networking * Available on Controller version 7 and later
        /// </summary>
        [Input("multicastDns")]
        public Input<bool>? MulticastDns { get; set; }

        /// <summary>
        /// The name of the network. This should be a descriptive name that helps identify the network's purpose, such as
        /// 'Corporate-Main', 'Guest-Network', or 'IoT-VLAN'.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network group for this network. Default is 'LAN'. For WAN networks, use 'WAN' or 'WAN2'. Network groups help
        /// organize and apply policies to multiple networks. Defaults to `LAN`.
        /// </summary>
        [Input("networkGroup")]
        public Input<string>? NetworkGroup { get; set; }

        /// <summary>
        /// Enables network isolation. When enabled: * Prevents communication between clients on this network * Each client can only
        /// communicate with the gateway * Commonly used for guest networks or IoT devices Defaults to `false`.
        /// </summary>
        [Input("networkIsolationEnabled")]
        public Input<bool>? NetworkIsolationEnabled { get; set; }

        /// <summary>
        /// The purpose/type of the network. Must be one of: * `corporate` - Standard network for corporate use with full access *
        /// `guest` - Isolated network for guest access with limited permissions * `wan` - External network connection (WAN uplink)
        /// * `vlan-only` - VLAN network without DHCP services
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The IPv4 subnet for this network in CIDR notation (e.g., '192.168.1.0/24'). This defines the network's address space and
        /// determines the range of IP addresses available for DHCP.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// The VLAN ID for this network. Valid range is 0-4096. Common uses: * 1-4094: Standard VLAN range for network segmentation
        /// * 0: Untagged/native VLAN * &gt;4094: Reserved for special purposes
        /// </summary>
        [Input("vlanId")]
        public Input<double>? VlanId { get; set; }

        /// <summary>
        /// The IPv6 prefix size to request from ISP. Must be between 48 and 64. Only applicable when `wan_type_v6` is 'dhcpv6'.
        /// </summary>
        [Input("wanDhcpV6PdSize")]
        public Input<double>? WanDhcpV6PdSize { get; set; }

        [Input("wanDns")]
        private InputList<string>? _wanDns;

        /// <summary>
        /// List of IPv4 DNS servers for WAN interface. Examples: * ISP provided DNS servers * Public DNS services (e.g., 8.8.8.8,
        /// 1.1.1.1) * Maximum 4 servers can be specified
        /// </summary>
        public InputList<string> WanDns
        {
            get => _wanDns ?? (_wanDns = new InputList<string>());
            set => _wanDns = value;
        }

        /// <summary>
        /// Quality of Service (QoS) priority for WAN egress traffic (0-7). * 0 (default) - Best effort * 1-4 - Increasing priority
        /// * 5-7 - Highest priority, use sparingly Higher values get preferential treatment. Defaults to `0`.
        /// </summary>
        [Input("wanEgressQos")]
        public Input<double>? WanEgressQos { get; set; }

        /// <summary>
        /// The IPv4 gateway address for WAN interface. Required when `wan_type` is 'static'. Typically the ISP's router IP address.
        /// </summary>
        [Input("wanGateway")]
        public Input<string>? WanGateway { get; set; }

        /// <summary>
        /// The IPv6 gateway address for WAN interface. Required when `wan_type_v6` is 'static'. Typically the ISP's router IPv6
        /// address.
        /// </summary>
        [Input("wanGatewayV6")]
        public Input<string>? WanGatewayV6 { get; set; }

        /// <summary>
        /// The static IPv4 address for WAN interface. Required when `wan_type` is 'static'. Must be a valid public IP address
        /// assigned by your ISP.
        /// </summary>
        [Input("wanIp")]
        public Input<string>? WanIp { get; set; }

        /// <summary>
        /// The static IPv6 address for WAN interface. Required when `wan_type_v6` is 'static'. Must be a valid public IPv6 address
        /// assigned by your ISP.
        /// </summary>
        [Input("wanIpv6")]
        public Input<string>? WanIpv6 { get; set; }

        /// <summary>
        /// The IPv4 netmask for WAN interface (e.g., '255.255.255.0'). Required when `wan_type` is 'static'. Must match the subnet
        /// mask provided by your ISP.
        /// </summary>
        [Input("wanNetmask")]
        public Input<string>? WanNetmask { get; set; }

        /// <summary>
        /// The WAN interface group assignment. Options: * `WAN` - Primary WAN interface * `WAN2` - Secondary WAN interface *
        /// `WAN_LTE_FAILOVER` - LTE backup connection Used for dual WAN and failover configurations.
        /// </summary>
        [Input("wanNetworkgroup")]
        public Input<string>? WanNetworkgroup { get; set; }

        /// <summary>
        /// The IPv6 prefix length for WAN interface. Must be between 1 and 128. Only applicable when `wan_type_v6` is 'static'.
        /// </summary>
        [Input("wanPrefixlen")]
        public Input<double>? WanPrefixlen { get; set; }

        /// <summary>
        /// The IPv4 WAN connection type. Options: * `disabled` - WAN interface disabled * `static` - Static IP configuration *
        /// `dhcp` - Dynamic IP from ISP * `pppoe` - PPPoE connection (common for DSL) Choose based on your ISP's requirements.
        /// </summary>
        [Input("wanType")]
        public Input<string>? WanType { get; set; }

        /// <summary>
        /// The IPv6 WAN connection type. Options: * `disabled` - IPv6 disabled * `static` - Static IPv6 configuration * `dhcpv6` -
        /// Dynamic IPv6 from ISP Choose based on your ISP's requirements.
        /// </summary>
        [Input("wanTypeV6")]
        public Input<string>? WanTypeV6 { get; set; }

        /// <summary>
        /// Username for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Cannot
        /// contain spaces or special characters
        /// </summary>
        [Input("wanUsername")]
        public Input<string>? WanUsername { get; set; }

        /// <summary>
        /// Password for WAN authentication. * Required for PPPoE connections * May be needed for some ISP configurations * Must be
        /// kept secret
        /// </summary>
        [Input("xWanPassword")]
        public Input<string>? XWanPassword { get; set; }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
