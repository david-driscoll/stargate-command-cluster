// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NetworkFlowLog : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which flow ended, in RFC 3339 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? End { get; set; }
#nullable restore
#else
        public string End { get; set; }
#endif
        /// <summary>The exitTraffic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Tailscale.Client.Models.ConnectionCounts>? ExitTraffic { get; set; }
#nullable restore
#else
        public List<global::Tailscale.Client.Models.ConnectionCounts> ExitTraffic { get; set; }
#endif
        /// <summary>Timestamp of the flow log, in RFC 3339 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Logged { get; set; }
#nullable restore
#else
        public string Logged { get; set; }
#endif
        /// <summary>Identifier of the node.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeId { get; set; }
#nullable restore
#else
        public string NodeId { get; set; }
#endif
        /// <summary>The physicalTraffic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Tailscale.Client.Models.ConnectionCounts>? PhysicalTraffic { get; set; }
#nullable restore
#else
        public List<global::Tailscale.Client.Models.ConnectionCounts> PhysicalTraffic { get; set; }
#endif
        /// <summary>Time at which flow started, in RFC 3339 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Start { get; set; }
#nullable restore
#else
        public string Start { get; set; }
#endif
        /// <summary>The subnetTraffic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Tailscale.Client.Models.ConnectionCounts>? SubnetTraffic { get; set; }
#nullable restore
#else
        public List<global::Tailscale.Client.Models.ConnectionCounts> SubnetTraffic { get; set; }
#endif
        /// <summary>The virtualTraffic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Tailscale.Client.Models.ConnectionCounts>? VirtualTraffic { get; set; }
#nullable restore
#else
        public List<global::Tailscale.Client.Models.ConnectionCounts> VirtualTraffic { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.NetworkFlowLog"/> and sets the default values.
        /// </summary>
        public NetworkFlowLog()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.NetworkFlowLog"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.NetworkFlowLog CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.NetworkFlowLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "end", n => { End = n.GetStringValue(); } },
                { "exitTraffic", n => { ExitTraffic = n.GetCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>(global::Tailscale.Client.Models.ConnectionCounts.CreateFromDiscriminatorValue)?.AsList(); } },
                { "logged", n => { Logged = n.GetStringValue(); } },
                { "nodeId", n => { NodeId = n.GetStringValue(); } },
                { "physicalTraffic", n => { PhysicalTraffic = n.GetCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>(global::Tailscale.Client.Models.ConnectionCounts.CreateFromDiscriminatorValue)?.AsList(); } },
                { "start", n => { Start = n.GetStringValue(); } },
                { "subnetTraffic", n => { SubnetTraffic = n.GetCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>(global::Tailscale.Client.Models.ConnectionCounts.CreateFromDiscriminatorValue)?.AsList(); } },
                { "virtualTraffic", n => { VirtualTraffic = n.GetCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>(global::Tailscale.Client.Models.ConnectionCounts.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("end", End);
            writer.WriteCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>("exitTraffic", ExitTraffic);
            writer.WriteStringValue("logged", Logged);
            writer.WriteStringValue("nodeId", NodeId);
            writer.WriteCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>("physicalTraffic", PhysicalTraffic);
            writer.WriteStringValue("start", Start);
            writer.WriteCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>("subnetTraffic", SubnetTraffic);
            writer.WriteCollectionOfObjectValues<global::Tailscale.Client.Models.ConnectionCounts>("virtualTraffic", VirtualTraffic);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
