// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingGuestAccess:SettingGuestAccess")]
    public partial class SettingGuestAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Subnet allowed for guest access.
        /// </summary>
        [Output("allowedSubnet")]
        public Output<string> AllowedSubnet { get; private set; } = null!;

        /// <summary>
        /// Authentication method for guest access. Valid values are:
        /// * `none` - No authentication required
        /// * `hotspot` - Password authentication
        /// * `facebook_wifi` - Facebook auth entication
        /// * `custom` - Custom authentication
        /// 
        /// For password authentication, set `auth` to `hotspot` and `password_enabled` to `true`.
        /// For voucher authentication, set `auth` to `hotspot` and `voucher_enabled` to `true`.
        /// For payment authentication, set `auth` to `hotspot` and `payment_enabled` to `true`.
        /// </summary>
        [Output("auth")]
        public Output<string> Auth { get; private set; } = null!;

        /// <summary>
        /// URL for authentication. Must be a valid URL including the protocol.
        /// </summary>
        [Output("authUrl")]
        public Output<string> AuthUrl { get; private set; } = null!;

        /// <summary>
        /// Authorize.net payment settings.
        /// </summary>
        [Output("authorize")]
        public Output<Outputs.SettingGuestAccessAuthorize?> Authorize { get; private set; } = null!;

        /// <summary>
        /// Custom IP address. Must be a valid IPv4 address (e.g., `192.168.1.1`).
        /// </summary>
        [Output("customIp")]
        public Output<string?> CustomIp { get; private set; } = null!;

        /// <summary>
        /// Enable enterprise controller functionality.
        /// </summary>
        [Output("ecEnabled")]
        public Output<bool> EcEnabled { get; private set; } = null!;

        /// <summary>
        /// Expiration time for guest access.
        /// </summary>
        [Output("expire")]
        public Output<double> Expire { get; private set; } = null!;

        /// <summary>
        /// Number value for the expiration time.
        /// </summary>
        [Output("expireNumber")]
        public Output<double> ExpireNumber { get; private set; } = null!;

        /// <summary>
        /// Unit for the expiration time. Valid values are:
        /// * `1` - Minute
        /// * `60` - Hour
        /// * `1440` - Day
        /// * `10080` - Week
        /// </summary>
        [Output("expireUnit")]
        public Output<double> ExpireUnit { get; private set; } = null!;

        /// <summary>
        /// Facebook authentication settings.
        /// </summary>
        [Output("facebook")]
        public Output<Outputs.SettingGuestAccessFacebook?> Facebook { get; private set; } = null!;

        /// <summary>
        /// Whether Facebook authentication for guest access is enabled.
        /// </summary>
        [Output("facebookEnabled")]
        public Output<bool> FacebookEnabled { get; private set; } = null!;

        /// <summary>
        /// Facebook WiFi authentication settings.
        /// </summary>
        [Output("facebookWifi")]
        public Output<Outputs.SettingGuestAccessFacebookWifi?> FacebookWifi { get; private set; } = null!;

        /// <summary>
        /// Google authentication settings.
        /// </summary>
        [Output("google")]
        public Output<Outputs.SettingGuestAccessGoogle?> Google { get; private set; } = null!;

        /// <summary>
        /// Whether Google authentication for guest access is enabled.
        /// </summary>
        [Output("googleEnabled")]
        public Output<bool> GoogleEnabled { get; private set; } = null!;

        /// <summary>
        /// IPpay Payments settings.
        /// </summary>
        [Output("ippay")]
        public Output<Outputs.SettingGuestAccessIppay?> Ippay { get; private set; } = null!;

        /// <summary>
        /// MerchantWarrior payment settings.
        /// </summary>
        [Output("merchantWarrior")]
        public Output<Outputs.SettingGuestAccessMerchantWarrior?> MerchantWarrior { get; private set; } = null!;

        /// <summary>
        /// Password for guest access.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Enable password authentication for guest access.
        /// </summary>
        [Output("passwordEnabled")]
        public Output<bool> PasswordEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable payment for guest access.
        /// </summary>
        [Output("paymentEnabled")]
        public Output<bool> PaymentEnabled { get; private set; } = null!;

        /// <summary>
        /// Payment gateway. Valid values are:
        /// * `paypal` - PayPal
        /// * `stripe` - Stripe
        /// * `authorize` - Authorize.net
        /// * `quickpay` - QuickPay
        /// * `merchantwarrior` - Merchant Warrior
        /// * `ippay` - IP Payments
        /// </summary>
        [Output("paymentGateway")]
        public Output<string?> PaymentGateway { get; private set; } = null!;

        /// <summary>
        /// PayPal payment settings.
        /// </summary>
        [Output("paypal")]
        public Output<Outputs.SettingGuestAccessPaypal?> Paypal { get; private set; } = null!;

        /// <summary>
        /// Portal customization settings.
        /// </summary>
        [Output("portalCustomization")]
        public Output<Outputs.SettingGuestAccessPortalCustomization> PortalCustomization { get; private set; } = null!;

        /// <summary>
        /// Enable the guest portal.
        /// </summary>
        [Output("portalEnabled")]
        public Output<bool> PortalEnabled { get; private set; } = null!;

        /// <summary>
        /// Hostname to use for the captive portal.
        /// </summary>
        [Output("portalHostname")]
        public Output<string> PortalHostname { get; private set; } = null!;

        /// <summary>
        /// Use a custom hostname for the portal.
        /// </summary>
        [Output("portalUseHostname")]
        public Output<bool> PortalUseHostname { get; private set; } = null!;

        /// <summary>
        /// QuickPay payment settings.
        /// </summary>
        [Output("quickpay")]
        public Output<Outputs.SettingGuestAccessQuickpay?> Quickpay { get; private set; } = null!;

        /// <summary>
        /// RADIUS authentication settings.
        /// </summary>
        [Output("radius")]
        public Output<Outputs.SettingGuestAccessRadius?> Radius { get; private set; } = null!;

        /// <summary>
        /// Whether RADIUS authentication for guest access is enabled.
        /// </summary>
        [Output("radiusEnabled")]
        public Output<bool> RadiusEnabled { get; private set; } = null!;

        /// <summary>
        /// Redirect after authentication settings.
        /// </summary>
        [Output("redirect")]
        public Output<Outputs.SettingGuestAccessRedirect?> Redirect { get; private set; } = null!;

        /// <summary>
        /// Whether redirect after authentication is enabled.
        /// </summary>
        [Output("redirectEnabled")]
        public Output<bool> RedirectEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether restricted DNS servers for guest networks are enabled.
        /// </summary>
        [Output("restrictedDnsEnabled")]
        public Output<bool> RestrictedDnsEnabled { get; private set; } = null!;

        /// <summary>
        /// List of restricted DNS servers for guest networks. Each value must be a valid IPv4 address.
        /// </summary>
        [Output("restrictedDnsServers")]
        public Output<ImmutableArray<string>> RestrictedDnsServers { get; private set; } = null!;

        /// <summary>
        /// Subnet for restricted guest access.
        /// </summary>
        [Output("restrictedSubnet")]
        public Output<string> RestrictedSubnet { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Stripe payment settings.
        /// </summary>
        [Output("stripe")]
        public Output<Outputs.SettingGuestAccessStripe?> Stripe { get; private set; } = null!;

        /// <summary>
        /// Template engine for the portal. Valid values are: `jsp`, `angular`.
        /// </summary>
        [Output("templateEngine")]
        public Output<string> TemplateEngine { get; private set; } = null!;

        /// <summary>
        /// Whether vouchers are customized.
        /// </summary>
        [Output("voucherCustomized")]
        public Output<bool> VoucherCustomized { get; private set; } = null!;

        /// <summary>
        /// Enable voucher-based authentication for guest access.
        /// </summary>
        [Output("voucherEnabled")]
        public Output<bool> VoucherEnabled { get; private set; } = null!;

        /// <summary>
        /// WeChat authentication settings.
        /// </summary>
        [Output("wechat")]
        public Output<Outputs.SettingGuestAccessWechat?> Wechat { get; private set; } = null!;

        /// <summary>
        /// Whether WeChat authentication for guest access is enabled.
        /// </summary>
        [Output("wechatEnabled")]
        public Output<bool> WechatEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a SettingGuestAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingGuestAccess(string name, SettingGuestAccessArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingGuestAccess:SettingGuestAccess", name, args ?? new SettingGuestAccessArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingGuestAccess(string name, Input<string> id, SettingGuestAccessState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingGuestAccess:SettingGuestAccess", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingGuestAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingGuestAccess Get(string name, Input<string> id, SettingGuestAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingGuestAccess(name, id, state, options);
        }
    }

    public sealed class SettingGuestAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Subnet allowed for guest access.
        /// </summary>
        [Input("allowedSubnet")]
        public Input<string>? AllowedSubnet { get; set; }

        /// <summary>
        /// Authentication method for guest access. Valid values are:
        /// * `none` - No authentication required
        /// * `hotspot` - Password authentication
        /// * `facebook_wifi` - Facebook auth entication
        /// * `custom` - Custom authentication
        /// 
        /// For password authentication, set `auth` to `hotspot` and `password_enabled` to `true`.
        /// For voucher authentication, set `auth` to `hotspot` and `voucher_enabled` to `true`.
        /// For payment authentication, set `auth` to `hotspot` and `payment_enabled` to `true`.
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// URL for authentication. Must be a valid URL including the protocol.
        /// </summary>
        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        /// <summary>
        /// Authorize.net payment settings.
        /// </summary>
        [Input("authorize")]
        public Input<Inputs.SettingGuestAccessAuthorizeArgs>? Authorize { get; set; }

        /// <summary>
        /// Custom IP address. Must be a valid IPv4 address (e.g., `192.168.1.1`).
        /// </summary>
        [Input("customIp")]
        public Input<string>? CustomIp { get; set; }

        /// <summary>
        /// Enable enterprise controller functionality.
        /// </summary>
        [Input("ecEnabled")]
        public Input<bool>? EcEnabled { get; set; }

        /// <summary>
        /// Expiration time for guest access.
        /// </summary>
        [Input("expire")]
        public Input<double>? Expire { get; set; }

        /// <summary>
        /// Number value for the expiration time.
        /// </summary>
        [Input("expireNumber")]
        public Input<double>? ExpireNumber { get; set; }

        /// <summary>
        /// Unit for the expiration time. Valid values are:
        /// * `1` - Minute
        /// * `60` - Hour
        /// * `1440` - Day
        /// * `10080` - Week
        /// </summary>
        [Input("expireUnit")]
        public Input<double>? ExpireUnit { get; set; }

        /// <summary>
        /// Facebook authentication settings.
        /// </summary>
        [Input("facebook")]
        public Input<Inputs.SettingGuestAccessFacebookArgs>? Facebook { get; set; }

        /// <summary>
        /// Facebook WiFi authentication settings.
        /// </summary>
        [Input("facebookWifi")]
        public Input<Inputs.SettingGuestAccessFacebookWifiArgs>? FacebookWifi { get; set; }

        /// <summary>
        /// Google authentication settings.
        /// </summary>
        [Input("google")]
        public Input<Inputs.SettingGuestAccessGoogleArgs>? Google { get; set; }

        /// <summary>
        /// IPpay Payments settings.
        /// </summary>
        [Input("ippay")]
        public Input<Inputs.SettingGuestAccessIppayArgs>? Ippay { get; set; }

        /// <summary>
        /// MerchantWarrior payment settings.
        /// </summary>
        [Input("merchantWarrior")]
        public Input<Inputs.SettingGuestAccessMerchantWarriorArgs>? MerchantWarrior { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for guest access.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Payment gateway. Valid values are:
        /// * `paypal` - PayPal
        /// * `stripe` - Stripe
        /// * `authorize` - Authorize.net
        /// * `quickpay` - QuickPay
        /// * `merchantwarrior` - Merchant Warrior
        /// * `ippay` - IP Payments
        /// </summary>
        [Input("paymentGateway")]
        public Input<string>? PaymentGateway { get; set; }

        /// <summary>
        /// PayPal payment settings.
        /// </summary>
        [Input("paypal")]
        public Input<Inputs.SettingGuestAccessPaypalArgs>? Paypal { get; set; }

        /// <summary>
        /// Portal customization settings.
        /// </summary>
        [Input("portalCustomization")]
        public Input<Inputs.SettingGuestAccessPortalCustomizationArgs>? PortalCustomization { get; set; }

        /// <summary>
        /// Enable the guest portal.
        /// </summary>
        [Input("portalEnabled")]
        public Input<bool>? PortalEnabled { get; set; }

        /// <summary>
        /// Hostname to use for the captive portal.
        /// </summary>
        [Input("portalHostname")]
        public Input<string>? PortalHostname { get; set; }

        /// <summary>
        /// Use a custom hostname for the portal.
        /// </summary>
        [Input("portalUseHostname")]
        public Input<bool>? PortalUseHostname { get; set; }

        /// <summary>
        /// QuickPay payment settings.
        /// </summary>
        [Input("quickpay")]
        public Input<Inputs.SettingGuestAccessQuickpayArgs>? Quickpay { get; set; }

        /// <summary>
        /// RADIUS authentication settings.
        /// </summary>
        [Input("radius")]
        public Input<Inputs.SettingGuestAccessRadiusArgs>? Radius { get; set; }

        /// <summary>
        /// Redirect after authentication settings.
        /// </summary>
        [Input("redirect")]
        public Input<Inputs.SettingGuestAccessRedirectArgs>? Redirect { get; set; }

        [Input("restrictedDnsServers")]
        private InputList<string>? _restrictedDnsServers;

        /// <summary>
        /// List of restricted DNS servers for guest networks. Each value must be a valid IPv4 address.
        /// </summary>
        public InputList<string> RestrictedDnsServers
        {
            get => _restrictedDnsServers ?? (_restrictedDnsServers = new InputList<string>());
            set => _restrictedDnsServers = value;
        }

        /// <summary>
        /// Subnet for restricted guest access.
        /// </summary>
        [Input("restrictedSubnet")]
        public Input<string>? RestrictedSubnet { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Stripe payment settings.
        /// </summary>
        [Input("stripe")]
        public Input<Inputs.SettingGuestAccessStripeArgs>? Stripe { get; set; }

        /// <summary>
        /// Template engine for the portal. Valid values are: `jsp`, `angular`.
        /// </summary>
        [Input("templateEngine")]
        public Input<string>? TemplateEngine { get; set; }

        /// <summary>
        /// Whether vouchers are customized.
        /// </summary>
        [Input("voucherCustomized")]
        public Input<bool>? VoucherCustomized { get; set; }

        /// <summary>
        /// Enable voucher-based authentication for guest access.
        /// </summary>
        [Input("voucherEnabled")]
        public Input<bool>? VoucherEnabled { get; set; }

        /// <summary>
        /// WeChat authentication settings.
        /// </summary>
        [Input("wechat")]
        public Input<Inputs.SettingGuestAccessWechatArgs>? Wechat { get; set; }

        public SettingGuestAccessArgs()
        {
        }
        public static new SettingGuestAccessArgs Empty => new SettingGuestAccessArgs();
    }

    public sealed class SettingGuestAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Subnet allowed for guest access.
        /// </summary>
        [Input("allowedSubnet")]
        public Input<string>? AllowedSubnet { get; set; }

        /// <summary>
        /// Authentication method for guest access. Valid values are:
        /// * `none` - No authentication required
        /// * `hotspot` - Password authentication
        /// * `facebook_wifi` - Facebook auth entication
        /// * `custom` - Custom authentication
        /// 
        /// For password authentication, set `auth` to `hotspot` and `password_enabled` to `true`.
        /// For voucher authentication, set `auth` to `hotspot` and `voucher_enabled` to `true`.
        /// For payment authentication, set `auth` to `hotspot` and `payment_enabled` to `true`.
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// URL for authentication. Must be a valid URL including the protocol.
        /// </summary>
        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        /// <summary>
        /// Authorize.net payment settings.
        /// </summary>
        [Input("authorize")]
        public Input<Inputs.SettingGuestAccessAuthorizeGetArgs>? Authorize { get; set; }

        /// <summary>
        /// Custom IP address. Must be a valid IPv4 address (e.g., `192.168.1.1`).
        /// </summary>
        [Input("customIp")]
        public Input<string>? CustomIp { get; set; }

        /// <summary>
        /// Enable enterprise controller functionality.
        /// </summary>
        [Input("ecEnabled")]
        public Input<bool>? EcEnabled { get; set; }

        /// <summary>
        /// Expiration time for guest access.
        /// </summary>
        [Input("expire")]
        public Input<double>? Expire { get; set; }

        /// <summary>
        /// Number value for the expiration time.
        /// </summary>
        [Input("expireNumber")]
        public Input<double>? ExpireNumber { get; set; }

        /// <summary>
        /// Unit for the expiration time. Valid values are:
        /// * `1` - Minute
        /// * `60` - Hour
        /// * `1440` - Day
        /// * `10080` - Week
        /// </summary>
        [Input("expireUnit")]
        public Input<double>? ExpireUnit { get; set; }

        /// <summary>
        /// Facebook authentication settings.
        /// </summary>
        [Input("facebook")]
        public Input<Inputs.SettingGuestAccessFacebookGetArgs>? Facebook { get; set; }

        /// <summary>
        /// Whether Facebook authentication for guest access is enabled.
        /// </summary>
        [Input("facebookEnabled")]
        public Input<bool>? FacebookEnabled { get; set; }

        /// <summary>
        /// Facebook WiFi authentication settings.
        /// </summary>
        [Input("facebookWifi")]
        public Input<Inputs.SettingGuestAccessFacebookWifiGetArgs>? FacebookWifi { get; set; }

        /// <summary>
        /// Google authentication settings.
        /// </summary>
        [Input("google")]
        public Input<Inputs.SettingGuestAccessGoogleGetArgs>? Google { get; set; }

        /// <summary>
        /// Whether Google authentication for guest access is enabled.
        /// </summary>
        [Input("googleEnabled")]
        public Input<bool>? GoogleEnabled { get; set; }

        /// <summary>
        /// IPpay Payments settings.
        /// </summary>
        [Input("ippay")]
        public Input<Inputs.SettingGuestAccessIppayGetArgs>? Ippay { get; set; }

        /// <summary>
        /// MerchantWarrior payment settings.
        /// </summary>
        [Input("merchantWarrior")]
        public Input<Inputs.SettingGuestAccessMerchantWarriorGetArgs>? MerchantWarrior { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for guest access.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable password authentication for guest access.
        /// </summary>
        [Input("passwordEnabled")]
        public Input<bool>? PasswordEnabled { get; set; }

        /// <summary>
        /// Enable payment for guest access.
        /// </summary>
        [Input("paymentEnabled")]
        public Input<bool>? PaymentEnabled { get; set; }

        /// <summary>
        /// Payment gateway. Valid values are:
        /// * `paypal` - PayPal
        /// * `stripe` - Stripe
        /// * `authorize` - Authorize.net
        /// * `quickpay` - QuickPay
        /// * `merchantwarrior` - Merchant Warrior
        /// * `ippay` - IP Payments
        /// </summary>
        [Input("paymentGateway")]
        public Input<string>? PaymentGateway { get; set; }

        /// <summary>
        /// PayPal payment settings.
        /// </summary>
        [Input("paypal")]
        public Input<Inputs.SettingGuestAccessPaypalGetArgs>? Paypal { get; set; }

        /// <summary>
        /// Portal customization settings.
        /// </summary>
        [Input("portalCustomization")]
        public Input<Inputs.SettingGuestAccessPortalCustomizationGetArgs>? PortalCustomization { get; set; }

        /// <summary>
        /// Enable the guest portal.
        /// </summary>
        [Input("portalEnabled")]
        public Input<bool>? PortalEnabled { get; set; }

        /// <summary>
        /// Hostname to use for the captive portal.
        /// </summary>
        [Input("portalHostname")]
        public Input<string>? PortalHostname { get; set; }

        /// <summary>
        /// Use a custom hostname for the portal.
        /// </summary>
        [Input("portalUseHostname")]
        public Input<bool>? PortalUseHostname { get; set; }

        /// <summary>
        /// QuickPay payment settings.
        /// </summary>
        [Input("quickpay")]
        public Input<Inputs.SettingGuestAccessQuickpayGetArgs>? Quickpay { get; set; }

        /// <summary>
        /// RADIUS authentication settings.
        /// </summary>
        [Input("radius")]
        public Input<Inputs.SettingGuestAccessRadiusGetArgs>? Radius { get; set; }

        /// <summary>
        /// Whether RADIUS authentication for guest access is enabled.
        /// </summary>
        [Input("radiusEnabled")]
        public Input<bool>? RadiusEnabled { get; set; }

        /// <summary>
        /// Redirect after authentication settings.
        /// </summary>
        [Input("redirect")]
        public Input<Inputs.SettingGuestAccessRedirectGetArgs>? Redirect { get; set; }

        /// <summary>
        /// Whether redirect after authentication is enabled.
        /// </summary>
        [Input("redirectEnabled")]
        public Input<bool>? RedirectEnabled { get; set; }

        /// <summary>
        /// Whether restricted DNS servers for guest networks are enabled.
        /// </summary>
        [Input("restrictedDnsEnabled")]
        public Input<bool>? RestrictedDnsEnabled { get; set; }

        [Input("restrictedDnsServers")]
        private InputList<string>? _restrictedDnsServers;

        /// <summary>
        /// List of restricted DNS servers for guest networks. Each value must be a valid IPv4 address.
        /// </summary>
        public InputList<string> RestrictedDnsServers
        {
            get => _restrictedDnsServers ?? (_restrictedDnsServers = new InputList<string>());
            set => _restrictedDnsServers = value;
        }

        /// <summary>
        /// Subnet for restricted guest access.
        /// </summary>
        [Input("restrictedSubnet")]
        public Input<string>? RestrictedSubnet { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Stripe payment settings.
        /// </summary>
        [Input("stripe")]
        public Input<Inputs.SettingGuestAccessStripeGetArgs>? Stripe { get; set; }

        /// <summary>
        /// Template engine for the portal. Valid values are: `jsp`, `angular`.
        /// </summary>
        [Input("templateEngine")]
        public Input<string>? TemplateEngine { get; set; }

        /// <summary>
        /// Whether vouchers are customized.
        /// </summary>
        [Input("voucherCustomized")]
        public Input<bool>? VoucherCustomized { get; set; }

        /// <summary>
        /// Enable voucher-based authentication for guest access.
        /// </summary>
        [Input("voucherEnabled")]
        public Input<bool>? VoucherEnabled { get; set; }

        /// <summary>
        /// WeChat authentication settings.
        /// </summary>
        [Input("wechat")]
        public Input<Inputs.SettingGuestAccessWechatGetArgs>? Wechat { get; set; }

        /// <summary>
        /// Whether WeChat authentication for guest access is enabled.
        /// </summary>
        [Input("wechatEnabled")]
        public Input<bool>? WechatEnabled { get; set; }

        public SettingGuestAccessState()
        {
        }
        public static new SettingGuestAccessState Empty => new SettingGuestAccessState();
    }
}
