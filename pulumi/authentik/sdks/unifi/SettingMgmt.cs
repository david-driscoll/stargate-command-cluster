// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    [UnifiResourceType("unifi:index/settingMgmt:SettingMgmt")]
    public partial class SettingMgmt : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable advanced features for UniFi devices at this site.
        /// </summary>
        [Output("advancedFeatureEnabled")]
        public Output<bool> AdvancedFeatureEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable alerts for UniFi devices at this site.
        /// </summary>
        [Output("alertEnabled")]
        public Output<bool> AlertEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
        /// </summary>
        [Output("autoUpgrade")]
        public Output<bool> AutoUpgrade { get; private set; } = null!;

        /// <summary>
        /// The hour of the day (0-23) when automatic firmware upgrades will occur.
        /// </summary>
        [Output("autoUpgradeHour")]
        public Output<double> AutoUpgradeHour { get; private set; } = null!;

        /// <summary>
        /// Enable the boot sound for UniFi devices at this site.
        /// </summary>
        [Output("bootSound")]
        public Output<bool> BootSound { get; private set; } = null!;

        /// <summary>
        /// Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
        /// </summary>
        [Output("debugToolsEnabled")]
        public Output<bool> DebugToolsEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable direct connect for UniFi devices at this site.
        /// </summary>
        [Output("directConnectEnabled")]
        public Output<bool> DirectConnectEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable the LED light for UniFi devices at this site.
        /// </summary>
        [Output("ledEnabled")]
        public Output<bool> LedEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable outdoor mode for UniFi devices at this site.
        /// </summary>
        [Output("outdoorModeEnabled")]
        public Output<bool> OutdoorModeEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Enable SSH password authentication for UniFi devices at this site.
        /// </summary>
        [Output("sshAuthPasswordEnabled")]
        public Output<bool> SshAuthPasswordEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable SSH bind wildcard for UniFi devices at this site.
        /// </summary>
        [Output("sshBindWildcard")]
        public Output<bool> SshBindWildcard { get; private set; } = null!;

        /// <summary>
        /// Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
        /// </summary>
        [Output("sshEnabled")]
        public Output<bool> SshEnabled { get; private set; } = null!;

        /// <summary>
        /// List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<Outputs.SettingMgmtSshKey>> SshKeys { get; private set; } = null!;

        /// <summary>
        /// The SSH password for UniFi devices at this site.
        /// </summary>
        [Output("sshPassword")]
        public Output<string> SshPassword { get; private set; } = null!;

        /// <summary>
        /// The SSH username for UniFi devices at this site.
        /// </summary>
        [Output("sshUsername")]
        public Output<string> SshUsername { get; private set; } = null!;

        /// <summary>
        /// Enable UniFi IDP for UniFi devices at this site.
        /// </summary>
        [Output("unifiIdpEnabled")]
        public Output<bool> UnifiIdpEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable WiFiman for UniFi devices at this site.
        /// </summary>
        [Output("wifimanEnabled")]
        public Output<bool> WifimanEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a SettingMgmt resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SettingMgmt(string name, SettingMgmtArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingMgmt:SettingMgmt", name, args ?? new SettingMgmtArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SettingMgmt(string name, Input<string> id, SettingMgmtState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/settingMgmt:SettingMgmt", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sshPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SettingMgmt resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SettingMgmt Get(string name, Input<string> id, SettingMgmtState? state = null, CustomResourceOptions? options = null)
        {
            return new SettingMgmt(name, id, state, options);
        }
    }

    public sealed class SettingMgmtArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable advanced features for UniFi devices at this site.
        /// </summary>
        [Input("advancedFeatureEnabled")]
        public Input<bool>? AdvancedFeatureEnabled { get; set; }

        /// <summary>
        /// Enable alerts for UniFi devices at this site.
        /// </summary>
        [Input("alertEnabled")]
        public Input<bool>? AlertEnabled { get; set; }

        /// <summary>
        /// Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// The hour of the day (0-23) when automatic firmware upgrades will occur.
        /// </summary>
        [Input("autoUpgradeHour")]
        public Input<double>? AutoUpgradeHour { get; set; }

        /// <summary>
        /// Enable the boot sound for UniFi devices at this site.
        /// </summary>
        [Input("bootSound")]
        public Input<bool>? BootSound { get; set; }

        /// <summary>
        /// Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
        /// </summary>
        [Input("debugToolsEnabled")]
        public Input<bool>? DebugToolsEnabled { get; set; }

        /// <summary>
        /// Enable direct connect for UniFi devices at this site.
        /// </summary>
        [Input("directConnectEnabled")]
        public Input<bool>? DirectConnectEnabled { get; set; }

        /// <summary>
        /// Enable the LED light for UniFi devices at this site.
        /// </summary>
        [Input("ledEnabled")]
        public Input<bool>? LedEnabled { get; set; }

        /// <summary>
        /// Enable outdoor mode for UniFi devices at this site.
        /// </summary>
        [Input("outdoorModeEnabled")]
        public Input<bool>? OutdoorModeEnabled { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Enable SSH password authentication for UniFi devices at this site.
        /// </summary>
        [Input("sshAuthPasswordEnabled")]
        public Input<bool>? SshAuthPasswordEnabled { get; set; }

        /// <summary>
        /// Enable SSH bind wildcard for UniFi devices at this site.
        /// </summary>
        [Input("sshBindWildcard")]
        public Input<bool>? SshBindWildcard { get; set; }

        /// <summary>
        /// Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
        /// </summary>
        [Input("sshEnabled")]
        public Input<bool>? SshEnabled { get; set; }

        [Input("sshKeys")]
        private InputList<Inputs.SettingMgmtSshKeyArgs>? _sshKeys;

        /// <summary>
        /// List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
        /// </summary>
        public InputList<Inputs.SettingMgmtSshKeyArgs> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<Inputs.SettingMgmtSshKeyArgs>());
            set => _sshKeys = value;
        }

        [Input("sshPassword")]
        private Input<string>? _sshPassword;

        /// <summary>
        /// The SSH password for UniFi devices at this site.
        /// </summary>
        public Input<string>? SshPassword
        {
            get => _sshPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The SSH username for UniFi devices at this site.
        /// </summary>
        [Input("sshUsername")]
        public Input<string>? SshUsername { get; set; }

        /// <summary>
        /// Enable UniFi IDP for UniFi devices at this site.
        /// </summary>
        [Input("unifiIdpEnabled")]
        public Input<bool>? UnifiIdpEnabled { get; set; }

        /// <summary>
        /// Enable WiFiman for UniFi devices at this site.
        /// </summary>
        [Input("wifimanEnabled")]
        public Input<bool>? WifimanEnabled { get; set; }

        public SettingMgmtArgs()
        {
        }
        public static new SettingMgmtArgs Empty => new SettingMgmtArgs();
    }

    public sealed class SettingMgmtState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable advanced features for UniFi devices at this site.
        /// </summary>
        [Input("advancedFeatureEnabled")]
        public Input<bool>? AdvancedFeatureEnabled { get; set; }

        /// <summary>
        /// Enable alerts for UniFi devices at this site.
        /// </summary>
        [Input("alertEnabled")]
        public Input<bool>? AlertEnabled { get; set; }

        /// <summary>
        /// Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// The hour of the day (0-23) when automatic firmware upgrades will occur.
        /// </summary>
        [Input("autoUpgradeHour")]
        public Input<double>? AutoUpgradeHour { get; set; }

        /// <summary>
        /// Enable the boot sound for UniFi devices at this site.
        /// </summary>
        [Input("bootSound")]
        public Input<bool>? BootSound { get; set; }

        /// <summary>
        /// Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
        /// </summary>
        [Input("debugToolsEnabled")]
        public Input<bool>? DebugToolsEnabled { get; set; }

        /// <summary>
        /// Enable direct connect for UniFi devices at this site.
        /// </summary>
        [Input("directConnectEnabled")]
        public Input<bool>? DirectConnectEnabled { get; set; }

        /// <summary>
        /// Enable the LED light for UniFi devices at this site.
        /// </summary>
        [Input("ledEnabled")]
        public Input<bool>? LedEnabled { get; set; }

        /// <summary>
        /// Enable outdoor mode for UniFi devices at this site.
        /// </summary>
        [Input("outdoorModeEnabled")]
        public Input<bool>? OutdoorModeEnabled { get; set; }

        /// <summary>
        /// The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Enable SSH password authentication for UniFi devices at this site.
        /// </summary>
        [Input("sshAuthPasswordEnabled")]
        public Input<bool>? SshAuthPasswordEnabled { get; set; }

        /// <summary>
        /// Enable SSH bind wildcard for UniFi devices at this site.
        /// </summary>
        [Input("sshBindWildcard")]
        public Input<bool>? SshBindWildcard { get; set; }

        /// <summary>
        /// Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
        /// </summary>
        [Input("sshEnabled")]
        public Input<bool>? SshEnabled { get; set; }

        [Input("sshKeys")]
        private InputList<Inputs.SettingMgmtSshKeyGetArgs>? _sshKeys;

        /// <summary>
        /// List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
        /// </summary>
        public InputList<Inputs.SettingMgmtSshKeyGetArgs> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<Inputs.SettingMgmtSshKeyGetArgs>());
            set => _sshKeys = value;
        }

        [Input("sshPassword")]
        private Input<string>? _sshPassword;

        /// <summary>
        /// The SSH password for UniFi devices at this site.
        /// </summary>
        public Input<string>? SshPassword
        {
            get => _sshPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sshPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The SSH username for UniFi devices at this site.
        /// </summary>
        [Input("sshUsername")]
        public Input<string>? SshUsername { get; set; }

        /// <summary>
        /// Enable UniFi IDP for UniFi devices at this site.
        /// </summary>
        [Input("unifiIdpEnabled")]
        public Input<bool>? UnifiIdpEnabled { get; set; }

        /// <summary>
        /// Enable WiFiman for UniFi devices at this site.
        /// </summary>
        [Input("wifimanEnabled")]
        public Input<bool>? WifimanEnabled { get; set; }

        public SettingMgmtState()
        {
        }
        public static new SettingMgmtState Empty => new SettingMgmtState();
    }
}
