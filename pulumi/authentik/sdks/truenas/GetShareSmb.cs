// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetShareSmb
    {
        public static Task<GetShareSmbResult> InvokeAsync(GetShareSmbArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetShareSmbResult>("truenas:index/getShareSmb:getShareSmb", args ?? new GetShareSmbArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetShareSmbResult> Invoke(GetShareSmbInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetShareSmbResult>("truenas:index/getShareSmb:getShareSmb", args ?? new GetShareSmbInvokeArgs(), options.WithDefaults());

        public static Output<GetShareSmbResult> Invoke(GetShareSmbInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetShareSmbResult>("truenas:index/getShareSmb:getShareSmb", args ?? new GetShareSmbInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShareSmbArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("sharesmbId", required: true)]
        public double SharesmbId { get; set; }

        public GetShareSmbArgs()
        {
        }
        public static new GetShareSmbArgs Empty => new GetShareSmbArgs();
    }

    public sealed class GetShareSmbInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("sharesmbId", required: true)]
        public Input<double> SharesmbId { get; set; } = null!;

        public GetShareSmbInvokeArgs()
        {
        }
        public static new GetShareSmbInvokeArgs Empty => new GetShareSmbInvokeArgs();
    }


    [OutputType]
    public sealed class GetShareSmbResult
    {
        public readonly bool AaplNameMangling;
        public readonly bool Abe;
        public readonly bool Acl;
        public readonly string Auxsmbconf;
        public readonly bool Browsable;
        public readonly string Comment;
        public readonly bool Durablehandle;
        public readonly bool Enabled;
        public readonly bool Fsrvp;
        public readonly bool Guestok;
        public readonly bool Home;
        public readonly ImmutableArray<string> Hostsallows;
        public readonly ImmutableArray<string> Hostsdenies;
        public readonly string Id;
        public readonly bool Locked;
        public readonly string Name;
        public readonly string Path;
        public readonly string PathSuffix;
        public readonly string Purpose;
        public readonly bool Recyclebin;
        public readonly bool Ro;
        public readonly bool Shadowcopy;
        public readonly double SharesmbId;
        public readonly bool Streams;
        public readonly bool Timemachine;
        public readonly string Vuid;

        [OutputConstructor]
        private GetShareSmbResult(
            bool aaplNameMangling,

            bool abe,

            bool acl,

            string auxsmbconf,

            bool browsable,

            string comment,

            bool durablehandle,

            bool enabled,

            bool fsrvp,

            bool guestok,

            bool home,

            ImmutableArray<string> hostsallows,

            ImmutableArray<string> hostsdenies,

            string id,

            bool locked,

            string name,

            string path,

            string pathSuffix,

            string purpose,

            bool recyclebin,

            bool ro,

            bool shadowcopy,

            double sharesmbId,

            bool streams,

            bool timemachine,

            string vuid)
        {
            AaplNameMangling = aaplNameMangling;
            Abe = abe;
            Acl = acl;
            Auxsmbconf = auxsmbconf;
            Browsable = browsable;
            Comment = comment;
            Durablehandle = durablehandle;
            Enabled = enabled;
            Fsrvp = fsrvp;
            Guestok = guestok;
            Home = home;
            Hostsallows = hostsallows;
            Hostsdenies = hostsdenies;
            Id = id;
            Locked = locked;
            Name = name;
            Path = path;
            PathSuffix = pathSuffix;
            Purpose = purpose;
            Recyclebin = recyclebin;
            Ro = ro;
            Shadowcopy = shadowcopy;
            SharesmbId = sharesmbId;
            Streams = streams;
            Timemachine = timemachine;
            Vuid = vuid;
        }
    }
}
