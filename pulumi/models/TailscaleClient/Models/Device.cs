// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// DoUpdate Tailscale device (sometimes referred to as *node* or *machine*), is any computer or mobile device that joins a tailnet.Each device has a unique ID (`nodeId` in the schema below) that is used to identify the device in API calls.This ID can be found by going to the [Machines](https://login.tailscale.com/admin/machines) page in the admin console,selecting the relevant device, then finding the ID in the Machine Details section.You can also [list all devices](#tag/devices/get/tailnet/{tailnet}/devices) in the tailnet to get their `nodeId` values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Device : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>DoUpdate list of Tailscale IP addresses for the device,including both IPv4 (formatted as 100.x.y.z)and IPv6 (formatted as fd7a:115c:a1e0:a:b:c:d:e) addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Addresses { get; set; }
#nullable restore
#else
        public List<string> Addresses { get; set; }
#endif
        /// <summary>The subnets this device requests to expose.Learn more about subnet routes at https://tailscale.com/kb/1019/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AdvertisedRoutes { get; set; }
#nullable restore
#else
        public List<string> AdvertisedRoutes { get; set; }
#endif
        /// <summary>&apos;true&apos; if the device has been authorized to join the tailnet; otherwise, &apos;false&apos;.Learn more about device authorization at https://tailscale.com/kb/1099/.</summary>
        public bool? Authorized { get; set; }
        /// <summary>&apos;true&apos; if the device is not allowed to accept any connections over Tailscale, including pings.Learn more in the &quot;Allow incoming connections&quot; section of https://tailscale.com/kb/1072/.</summary>
        public bool? BlocksIncomingConnections { get; set; }
        /// <summary>clientConnectivity provides a report on the device&apos;s current physical network conditions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Tailscale.Client.Models.Device_clientConnectivity? ClientConnectivity { get; set; }
#nullable restore
#else
        public global::Tailscale.Client.Models.Device_clientConnectivity ClientConnectivity { get; set; }
#endif
        /// <summary>The version of the Tailscale clientsoftware; this is empty for external devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientVersion { get; set; }
#nullable restore
#else
        public string ClientVersion { get; set; }
#endif
        /// <summary>The date on which the device was addedto the tailnet; this is empty for external devices.</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The subnet routes for this device that have been approved by a tailnet admin.Learn more about subnet routes at https://tailscale.com/kb/1019/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EnabledRoutes { get; set; }
#nullable restore
#else
        public List<string> EnabledRoutes { get; set; }
#endif
        /// <summary>The expiration date of the device&apos;s auth key.Learn more about key expiry at https://tailscale.com/kb/1028/.</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>The machine name in the admin console.Learn more about machine names at https://tailscale.com/kb/1098/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The legacy identifier for a device; youcan supply this value wherever {deviceId} is indicated in theendpoint. Note that although &quot;id&quot; is still accepted, &quot;nodeId&quot; ispreferred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>&apos;true&apos; if the device is ephemeral.Learn more about ephemeral nodes at https://tailscale.com/kb/1111/ephemeral-nodes.</summary>
        public bool? IsEphemeral { get; set; }
        /// <summary>&apos;true&apos;, indicates that a device is not a member of the tailnet, but is shared in to the tailnet;if &apos;false&apos;, the device is a member of the tailnet.Learn more about node sharing at https://tailscale.com/kb/1084/.</summary>
        public bool? IsExternal { get; set; }
        /// <summary>&apos;true&apos; if the keys for the device will not expire.Learn more at https://tailscale.com/kb/1028/.</summary>
        public bool? KeyExpiryDisabled { get; set; }
        /// <summary>When device was last active on the tailnet.</summary>
        public DateTimeOffset? LastSeen { get; set; }
        /// <summary>For internal use and is not required for any API operations.This value is empty for external devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineKey { get; set; }
#nullable restore
#else
        public string MachineKey { get; set; }
#endif
        /// <summary>&apos;true&apos;, indicates that multiple devices are currently connected using the same node key, which is usually a sign of node state being copied between machines.If only one device is connected using this node&apos;s key, the field is omitted.If the number of live connections goes back to 0 or 1, this field is also omitted, meaning it&apos;s not sticky. In case an attacker steals node state from a legitimate node, they can mask their activities by not connecting concurrently with the legitimate node.</summary>
        public bool? MultipleConnections { get; set; }
        /// <summary>The MagicDNS name of the device.Learn more about MagicDNS at https://tailscale.com/kb/1081/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The preferred identifier for a device;supply this value wherever {deviceId} is indicated in the endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeId { get; set; }
#nullable restore
#else
        public string NodeId { get; set; }
#endif
        /// <summary>Mostly for internal use, required for select operations, such as adding a node to a locked tailnet.Learn about tailnet locks at https://tailscale.com/kb/1226/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NodeKey { get; set; }
#nullable restore
#else
        public string NodeKey { get; set; }
#endif
        /// <summary>The operating system that the device is running.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Os { get; set; }
#nullable restore
#else
        public string Os { get; set; }
#endif
        /// <summary>&gt; â“˜ This field is available for [Enterprise plans](/pricing).Contains extra identifiers from the device when the tailnet it is connected to has device posture identification collection enabled.If the device has not opted-in to posture identification collection, this will contain {&quot;disabled&quot;: true}.Learn more about posture identity at https://tailscale.com/kb/1326/device-identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Tailscale.Client.Models.Device_postureIdentity? PostureIdentity { get; set; }
#nullable restore
#else
        public global::Tailscale.Client.Models.Device_postureIdentity PostureIdentity { get; set; }
#endif
        /// <summary>Lets you assign an identity to a device that is separate from human users, and use it as part of an ACL to restrict access.Once a device is tagged, the tag is the owner of that device.DoUpdate single node can have multiple tags assigned.This value is empty for external devices.Learn more about tags at https://tailscale.com/kb/1068/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>Indicates an issue with the tailnet lock node-key signature on this device.This field is only populated when tailnet lock is enabled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TailnetLockError { get; set; }
#nullable restore
#else
        public string TailnetLockError { get; set; }
#endif
        /// <summary>The node&apos;s tailnet lock key.Every node generates a tailnet lock key (so the value will be present) even if tailnet lock is not enabled.Learn more about tailnet lock at https://tailscale.com/kb/1226/.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TailnetLockKey { get; set; }
#nullable restore
#else
        public string TailnetLockKey { get; set; }
#endif
        /// <summary>&apos;true&apos; if a Tailscale client versionupgrade is available. This value is empty for external devices.</summary>
        public bool? UpdateAvailable { get; set; }
        /// <summary>The user who registered the node. For untagged nodes, this user is the device owner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? User { get; set; }
#nullable restore
#else
        public string User { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.Device"/> and sets the default values.
        /// </summary>
        public Device()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.Device"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.Device CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.Device();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "addresses", n => { Addresses = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "advertisedRoutes", n => { AdvertisedRoutes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "authorized", n => { Authorized = n.GetBoolValue(); } },
                { "blocksIncomingConnections", n => { BlocksIncomingConnections = n.GetBoolValue(); } },
                { "clientConnectivity", n => { ClientConnectivity = n.GetObjectValue<global::Tailscale.Client.Models.Device_clientConnectivity>(global::Tailscale.Client.Models.Device_clientConnectivity.CreateFromDiscriminatorValue); } },
                { "clientVersion", n => { ClientVersion = n.GetStringValue(); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "enabledRoutes", n => { EnabledRoutes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isEphemeral", n => { IsEphemeral = n.GetBoolValue(); } },
                { "isExternal", n => { IsExternal = n.GetBoolValue(); } },
                { "keyExpiryDisabled", n => { KeyExpiryDisabled = n.GetBoolValue(); } },
                { "lastSeen", n => { LastSeen = n.GetDateTimeOffsetValue(); } },
                { "machineKey", n => { MachineKey = n.GetStringValue(); } },
                { "multipleConnections", n => { MultipleConnections = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nodeId", n => { NodeId = n.GetStringValue(); } },
                { "nodeKey", n => { NodeKey = n.GetStringValue(); } },
                { "os", n => { Os = n.GetStringValue(); } },
                { "postureIdentity", n => { PostureIdentity = n.GetObjectValue<global::Tailscale.Client.Models.Device_postureIdentity>(global::Tailscale.Client.Models.Device_postureIdentity.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tailnetLockError", n => { TailnetLockError = n.GetStringValue(); } },
                { "tailnetLockKey", n => { TailnetLockKey = n.GetStringValue(); } },
                { "updateAvailable", n => { UpdateAvailable = n.GetBoolValue(); } },
                { "user", n => { User = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("addresses", Addresses);
            writer.WriteCollectionOfPrimitiveValues<string>("advertisedRoutes", AdvertisedRoutes);
            writer.WriteBoolValue("authorized", Authorized);
            writer.WriteBoolValue("blocksIncomingConnections", BlocksIncomingConnections);
            writer.WriteObjectValue<global::Tailscale.Client.Models.Device_clientConnectivity>("clientConnectivity", ClientConnectivity);
            writer.WriteStringValue("clientVersion", ClientVersion);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteCollectionOfPrimitiveValues<string>("enabledRoutes", EnabledRoutes);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isEphemeral", IsEphemeral);
            writer.WriteBoolValue("isExternal", IsExternal);
            writer.WriteBoolValue("keyExpiryDisabled", KeyExpiryDisabled);
            writer.WriteDateTimeOffsetValue("lastSeen", LastSeen);
            writer.WriteStringValue("machineKey", MachineKey);
            writer.WriteBoolValue("multipleConnections", MultipleConnections);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nodeId", NodeId);
            writer.WriteStringValue("nodeKey", NodeKey);
            writer.WriteStringValue("os", Os);
            writer.WriteObjectValue<global::Tailscale.Client.Models.Device_postureIdentity>("postureIdentity", PostureIdentity);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("tailnetLockError", TailnetLockError);
            writer.WriteStringValue("tailnetLockKey", TailnetLockKey);
            writer.WriteBoolValue("updateAvailable", UpdateAvailable);
            writer.WriteStringValue("user", User);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
