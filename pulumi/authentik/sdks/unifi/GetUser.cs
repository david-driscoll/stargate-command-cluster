// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    public static class GetUser
    {
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("unifi:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("unifi:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());

        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("unifi:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        [Input("mac", required: true)]
        public string Mac { get; set; } = null!;

        [Input("site")]
        public string? Site { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("mac", required: true)]
        public Input<string> Mac { get; set; } = null!;

        [Input("site")]
        public Input<string>? Site { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly bool Blocked;
        public readonly double DevIdOverride;
        public readonly string FixedIp;
        public readonly string Hostname;
        public readonly string Id;
        public readonly string Ip;
        public readonly string LocalDnsRecord;
        public readonly string Mac;
        public readonly string Name;
        public readonly string NetworkId;
        public readonly string Note;
        public readonly string Site;
        public readonly string UserGroupId;

        [OutputConstructor]
        private GetUserResult(
            bool blocked,

            double devIdOverride,

            string fixedIp,

            string hostname,

            string id,

            string ip,

            string localDnsRecord,

            string mac,

            string name,

            string networkId,

            string note,

            string site,

            string userGroupId)
        {
            Blocked = blocked;
            DevIdOverride = devIdOverride;
            FixedIp = fixedIp;
            Hostname = hostname;
            Id = id;
            Ip = ip;
            LocalDnsRecord = localDnsRecord;
            Mac = mac;
            Name = name;
            NetworkId = networkId;
            Note = note;
            Site = site;
            UserGroupId = userGroupId;
        }
    }
}
