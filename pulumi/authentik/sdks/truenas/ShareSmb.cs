// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/shareSmb:ShareSmb")]
    public partial class ShareSmb : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Use Apple-style Character Encoding
        /// </summary>
        [Output("aaplNameMangling")]
        public Output<bool?> AaplNameMangling { get; private set; } = null!;

        /// <summary>
        /// Access based share enumeration
        /// </summary>
        [Output("abe")]
        public Output<bool?> Abe { get; private set; } = null!;

        /// <summary>
        /// Enable support for storing the SMB Security Descriptor as a Filesystem ACL
        /// </summary>
        [Output("acl")]
        public Output<bool?> Acl { get; private set; } = null!;

        /// <summary>
        /// Auxiliary smb4.conf parameters
        /// </summary>
        [Output("auxsmbconf")]
        public Output<string?> Auxsmbconf { get; private set; } = null!;

        /// <summary>
        /// Browsable to network clients
        /// </summary>
        [Output("browsable")]
        public Output<bool?> Browsable { get; private set; } = null!;

        /// <summary>
        /// Any notes about this SMB share
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Enable SMB2/3 Durable Handles: Allow using open file handles that can withstand short disconnections
        /// </summary>
        [Output("durablehandle")]
        public Output<bool?> Durablehandle { get; private set; } = null!;

        /// <summary>
        /// Enable this share
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Enable support for the File Server Remote VSS Protocol.
        /// </summary>
        [Output("fsrvp")]
        public Output<bool?> Fsrvp { get; private set; } = null!;

        /// <summary>
        /// Allow access to this share without a password
        /// </summary>
        [Output("guestok")]
        public Output<bool?> Guestok { get; private set; } = null!;

        /// <summary>
        /// Use as home share
        /// </summary>
        [Output("home")]
        public Output<bool?> Home { get; private set; } = null!;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        [Output("hostsallows")]
        public Output<ImmutableArray<string>> Hostsallows { get; private set; } = null!;

        /// <summary>
        /// Disallowed hosts (IP/hostname). Pass 'ALL' to use whitelist model.
        /// </summary>
        [Output("hostsdenies")]
        public Output<ImmutableArray<string>> Hostsdenies { get; private set; } = null!;

        /// <summary>
        /// SMB share name. Defaults to last part of shared path.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Path to shared directory
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Append a suffix to the share connection path. This is used to provide unique shares on a per-user, per-computer, or per-IP address basis.
        /// </summary>
        [Output("pathSuffix")]
        public Output<string?> PathSuffix { get; private set; } = null!;

        /// <summary>
        /// You can set a share purpose to apply and lock pre-determined advanced options for the share.
        /// </summary>
        [Output("purpose")]
        public Output<string?> Purpose { get; private set; } = null!;

        /// <summary>
        /// Export recycle bin
        /// </summary>
        [Output("recyclebin")]
        public Output<bool?> Recyclebin { get; private set; } = null!;

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Output("ro")]
        public Output<bool?> Ro { get; private set; } = null!;

        /// <summary>
        /// Export ZFS snapshots as Shadow Copies for Microsoft Volume Shadow Copy Service (VSS) clients
        /// </summary>
        [Output("shadowcopy")]
        public Output<bool?> Shadowcopy { get; private set; } = null!;

        [Output("shareSmbId")]
        public Output<string> ShareSmbId { get; private set; } = null!;

        /// <summary>
        /// SMB Share ID
        /// </summary>
        [Output("sharesmbId")]
        public Output<double> SharesmbId { get; private set; } = null!;

        /// <summary>
        /// Enable Alternate Data Streams: Allow multiple NTFS data streams. Disabling this option causes macOS to write streams to files on the filesystem.
        /// </summary>
        [Output("streams")]
        public Output<bool?> Streams { get; private set; } = null!;

        /// <summary>
        /// Enable TimeMachine backups to this share
        /// </summary>
        [Output("timemachine")]
        public Output<bool?> Timemachine { get; private set; } = null!;

        /// <summary>
        /// Share VUID (set when using as TimeMachine share)
        /// </summary>
        [Output("vuid")]
        public Output<string> Vuid { get; private set; } = null!;


        /// <summary>
        /// Create a ShareSmb resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShareSmb(string name, ShareSmbArgs args, CustomResourceOptions? options = null)
            : base("truenas:index/shareSmb:ShareSmb", name, args ?? new ShareSmbArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private ShareSmb(string name, Input<string> id, ShareSmbState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/shareSmb:ShareSmb", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShareSmb resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShareSmb Get(string name, Input<string> id, ShareSmbState? state = null, CustomResourceOptions? options = null)
        {
            return new ShareSmb(name, id, state, options);
        }
    }

    public sealed class ShareSmbArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use Apple-style Character Encoding
        /// </summary>
        [Input("aaplNameMangling")]
        public Input<bool>? AaplNameMangling { get; set; }

        /// <summary>
        /// Access based share enumeration
        /// </summary>
        [Input("abe")]
        public Input<bool>? Abe { get; set; }

        /// <summary>
        /// Enable support for storing the SMB Security Descriptor as a Filesystem ACL
        /// </summary>
        [Input("acl")]
        public Input<bool>? Acl { get; set; }

        /// <summary>
        /// Auxiliary smb4.conf parameters
        /// </summary>
        [Input("auxsmbconf")]
        public Input<string>? Auxsmbconf { get; set; }

        /// <summary>
        /// Browsable to network clients
        /// </summary>
        [Input("browsable")]
        public Input<bool>? Browsable { get; set; }

        /// <summary>
        /// Any notes about this SMB share
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable SMB2/3 Durable Handles: Allow using open file handles that can withstand short disconnections
        /// </summary>
        [Input("durablehandle")]
        public Input<bool>? Durablehandle { get; set; }

        /// <summary>
        /// Enable this share
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable support for the File Server Remote VSS Protocol.
        /// </summary>
        [Input("fsrvp")]
        public Input<bool>? Fsrvp { get; set; }

        /// <summary>
        /// Allow access to this share without a password
        /// </summary>
        [Input("guestok")]
        public Input<bool>? Guestok { get; set; }

        /// <summary>
        /// Use as home share
        /// </summary>
        [Input("home")]
        public Input<bool>? Home { get; set; }

        [Input("hostsallows")]
        private InputList<string>? _hostsallows;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        public InputList<string> Hostsallows
        {
            get => _hostsallows ?? (_hostsallows = new InputList<string>());
            set => _hostsallows = value;
        }

        [Input("hostsdenies")]
        private InputList<string>? _hostsdenies;

        /// <summary>
        /// Disallowed hosts (IP/hostname). Pass 'ALL' to use whitelist model.
        /// </summary>
        public InputList<string> Hostsdenies
        {
            get => _hostsdenies ?? (_hostsdenies = new InputList<string>());
            set => _hostsdenies = value;
        }

        /// <summary>
        /// SMB share name. Defaults to last part of shared path.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to shared directory
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Append a suffix to the share connection path. This is used to provide unique shares on a per-user, per-computer, or per-IP address basis.
        /// </summary>
        [Input("pathSuffix")]
        public Input<string>? PathSuffix { get; set; }

        /// <summary>
        /// You can set a share purpose to apply and lock pre-determined advanced options for the share.
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// Export recycle bin
        /// </summary>
        [Input("recyclebin")]
        public Input<bool>? Recyclebin { get; set; }

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Input("ro")]
        public Input<bool>? Ro { get; set; }

        /// <summary>
        /// Export ZFS snapshots as Shadow Copies for Microsoft Volume Shadow Copy Service (VSS) clients
        /// </summary>
        [Input("shadowcopy")]
        public Input<bool>? Shadowcopy { get; set; }

        [Input("shareSmbId")]
        public Input<string>? ShareSmbId { get; set; }

        /// <summary>
        /// Enable Alternate Data Streams: Allow multiple NTFS data streams. Disabling this option causes macOS to write streams to files on the filesystem.
        /// </summary>
        [Input("streams")]
        public Input<bool>? Streams { get; set; }

        /// <summary>
        /// Enable TimeMachine backups to this share
        /// </summary>
        [Input("timemachine")]
        public Input<bool>? Timemachine { get; set; }

        public ShareSmbArgs()
        {
        }
        public static new ShareSmbArgs Empty => new ShareSmbArgs();
    }

    public sealed class ShareSmbState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use Apple-style Character Encoding
        /// </summary>
        [Input("aaplNameMangling")]
        public Input<bool>? AaplNameMangling { get; set; }

        /// <summary>
        /// Access based share enumeration
        /// </summary>
        [Input("abe")]
        public Input<bool>? Abe { get; set; }

        /// <summary>
        /// Enable support for storing the SMB Security Descriptor as a Filesystem ACL
        /// </summary>
        [Input("acl")]
        public Input<bool>? Acl { get; set; }

        /// <summary>
        /// Auxiliary smb4.conf parameters
        /// </summary>
        [Input("auxsmbconf")]
        public Input<string>? Auxsmbconf { get; set; }

        /// <summary>
        /// Browsable to network clients
        /// </summary>
        [Input("browsable")]
        public Input<bool>? Browsable { get; set; }

        /// <summary>
        /// Any notes about this SMB share
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable SMB2/3 Durable Handles: Allow using open file handles that can withstand short disconnections
        /// </summary>
        [Input("durablehandle")]
        public Input<bool>? Durablehandle { get; set; }

        /// <summary>
        /// Enable this share
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable support for the File Server Remote VSS Protocol.
        /// </summary>
        [Input("fsrvp")]
        public Input<bool>? Fsrvp { get; set; }

        /// <summary>
        /// Allow access to this share without a password
        /// </summary>
        [Input("guestok")]
        public Input<bool>? Guestok { get; set; }

        /// <summary>
        /// Use as home share
        /// </summary>
        [Input("home")]
        public Input<bool>? Home { get; set; }

        [Input("hostsallows")]
        private InputList<string>? _hostsallows;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        public InputList<string> Hostsallows
        {
            get => _hostsallows ?? (_hostsallows = new InputList<string>());
            set => _hostsallows = value;
        }

        [Input("hostsdenies")]
        private InputList<string>? _hostsdenies;

        /// <summary>
        /// Disallowed hosts (IP/hostname). Pass 'ALL' to use whitelist model.
        /// </summary>
        public InputList<string> Hostsdenies
        {
            get => _hostsdenies ?? (_hostsdenies = new InputList<string>());
            set => _hostsdenies = value;
        }

        /// <summary>
        /// SMB share name. Defaults to last part of shared path.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to shared directory
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Append a suffix to the share connection path. This is used to provide unique shares on a per-user, per-computer, or per-IP address basis.
        /// </summary>
        [Input("pathSuffix")]
        public Input<string>? PathSuffix { get; set; }

        /// <summary>
        /// You can set a share purpose to apply and lock pre-determined advanced options for the share.
        /// </summary>
        [Input("purpose")]
        public Input<string>? Purpose { get; set; }

        /// <summary>
        /// Export recycle bin
        /// </summary>
        [Input("recyclebin")]
        public Input<bool>? Recyclebin { get; set; }

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Input("ro")]
        public Input<bool>? Ro { get; set; }

        /// <summary>
        /// Export ZFS snapshots as Shadow Copies for Microsoft Volume Shadow Copy Service (VSS) clients
        /// </summary>
        [Input("shadowcopy")]
        public Input<bool>? Shadowcopy { get; set; }

        [Input("shareSmbId")]
        public Input<string>? ShareSmbId { get; set; }

        /// <summary>
        /// SMB Share ID
        /// </summary>
        [Input("sharesmbId")]
        public Input<double>? SharesmbId { get; set; }

        /// <summary>
        /// Enable Alternate Data Streams: Allow multiple NTFS data streams. Disabling this option causes macOS to write streams to files on the filesystem.
        /// </summary>
        [Input("streams")]
        public Input<bool>? Streams { get; set; }

        /// <summary>
        /// Enable TimeMachine backups to this share
        /// </summary>
        [Input("timemachine")]
        public Input<bool>? Timemachine { get; set; }

        /// <summary>
        /// Share VUID (set when using as TimeMachine share)
        /// </summary>
        [Input("vuid")]
        public Input<string>? Vuid { get; set; }

        public ShareSmbState()
        {
        }
        public static new ShareSmbState Empty => new ShareSmbState();
    }
}
