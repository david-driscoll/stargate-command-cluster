// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi
{
    public static class GetNetwork
    {
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("site")]
        public string? Site { get; set; }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("site")]
        public Input<string>? Site { get; set; }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        public readonly ImmutableArray<string> DhcpDns;
        public readonly bool DhcpEnabled;
        public readonly double DhcpLease;
        public readonly string DhcpStart;
        public readonly string DhcpStop;
        public readonly ImmutableArray<string> DhcpV6Dns;
        public readonly bool DhcpV6DnsAuto;
        public readonly bool DhcpV6Enabled;
        public readonly double DhcpV6Lease;
        public readonly string DhcpV6Start;
        public readonly string DhcpV6Stop;
        public readonly bool DhcpdBootEnabled;
        public readonly string DhcpdBootFilename;
        public readonly string DhcpdBootServer;
        public readonly string DomainName;
        public readonly string Id;
        public readonly bool IgmpSnooping;
        public readonly string Ipv6InterfaceType;
        public readonly string Ipv6PdInterface;
        public readonly string Ipv6PdPrefixid;
        public readonly string Ipv6PdStart;
        public readonly string Ipv6PdStop;
        public readonly bool Ipv6RaEnable;
        public readonly double Ipv6RaPreferredLifetime;
        public readonly string Ipv6RaPriority;
        public readonly double Ipv6RaValidLifetime;
        public readonly string Ipv6StaticSubnet;
        public readonly bool MulticastDns;
        public readonly string Name;
        public readonly string NetworkGroup;
        public readonly string Purpose;
        public readonly string Site;
        public readonly string Subnet;
        public readonly double VlanId;
        public readonly double WanDhcpV6PdSize;
        public readonly ImmutableArray<string> WanDns;
        public readonly double WanEgressQos;
        public readonly string WanGateway;
        public readonly string WanGatewayV6;
        public readonly string WanIp;
        public readonly string WanIpv6;
        public readonly string WanNetmask;
        public readonly string WanNetworkgroup;
        public readonly double WanPrefixlen;
        public readonly string WanType;
        public readonly string WanTypeV6;
        public readonly string WanUsername;
        public readonly string XWanPassword;

        [OutputConstructor]
        private GetNetworkResult(
            ImmutableArray<string> dhcpDns,

            bool dhcpEnabled,

            double dhcpLease,

            string dhcpStart,

            string dhcpStop,

            ImmutableArray<string> dhcpV6Dns,

            bool dhcpV6DnsAuto,

            bool dhcpV6Enabled,

            double dhcpV6Lease,

            string dhcpV6Start,

            string dhcpV6Stop,

            bool dhcpdBootEnabled,

            string dhcpdBootFilename,

            string dhcpdBootServer,

            string domainName,

            string id,

            bool igmpSnooping,

            string ipv6InterfaceType,

            string ipv6PdInterface,

            string ipv6PdPrefixid,

            string ipv6PdStart,

            string ipv6PdStop,

            bool ipv6RaEnable,

            double ipv6RaPreferredLifetime,

            string ipv6RaPriority,

            double ipv6RaValidLifetime,

            string ipv6StaticSubnet,

            bool multicastDns,

            string name,

            string networkGroup,

            string purpose,

            string site,

            string subnet,

            double vlanId,

            double wanDhcpV6PdSize,

            ImmutableArray<string> wanDns,

            double wanEgressQos,

            string wanGateway,

            string wanGatewayV6,

            string wanIp,

            string wanIpv6,

            string wanNetmask,

            string wanNetworkgroup,

            double wanPrefixlen,

            string wanType,

            string wanTypeV6,

            string wanUsername,

            string xWanPassword)
        {
            DhcpDns = dhcpDns;
            DhcpEnabled = dhcpEnabled;
            DhcpLease = dhcpLease;
            DhcpStart = dhcpStart;
            DhcpStop = dhcpStop;
            DhcpV6Dns = dhcpV6Dns;
            DhcpV6DnsAuto = dhcpV6DnsAuto;
            DhcpV6Enabled = dhcpV6Enabled;
            DhcpV6Lease = dhcpV6Lease;
            DhcpV6Start = dhcpV6Start;
            DhcpV6Stop = dhcpV6Stop;
            DhcpdBootEnabled = dhcpdBootEnabled;
            DhcpdBootFilename = dhcpdBootFilename;
            DhcpdBootServer = dhcpdBootServer;
            DomainName = domainName;
            Id = id;
            IgmpSnooping = igmpSnooping;
            Ipv6InterfaceType = ipv6InterfaceType;
            Ipv6PdInterface = ipv6PdInterface;
            Ipv6PdPrefixid = ipv6PdPrefixid;
            Ipv6PdStart = ipv6PdStart;
            Ipv6PdStop = ipv6PdStop;
            Ipv6RaEnable = ipv6RaEnable;
            Ipv6RaPreferredLifetime = ipv6RaPreferredLifetime;
            Ipv6RaPriority = ipv6RaPriority;
            Ipv6RaValidLifetime = ipv6RaValidLifetime;
            Ipv6StaticSubnet = ipv6StaticSubnet;
            MulticastDns = multicastDns;
            Name = name;
            NetworkGroup = networkGroup;
            Purpose = purpose;
            Site = site;
            Subnet = subnet;
            VlanId = vlanId;
            WanDhcpV6PdSize = wanDhcpV6PdSize;
            WanDns = wanDns;
            WanEgressQos = wanEgressQos;
            WanGateway = wanGateway;
            WanGatewayV6 = wanGatewayV6;
            WanIp = wanIp;
            WanIpv6 = wanIpv6;
            WanNetmask = wanNetmask;
            WanNetworkgroup = wanNetworkgroup;
            WanPrefixlen = wanPrefixlen;
            WanType = wanType;
            WanTypeV6 = wanTypeV6;
            WanUsername = wanUsername;
            XWanPassword = xWanPassword;
        }
    }
}
