---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app storage-s3
spec:
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 3
  interval: 15m
  timeout: 10m
  install:
    createNamespace: true
    replace: true
    remediation:
      retries: -1
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: -1
      strategy: rollback
  rollback:
    force: true
    cleanupOnFail: true
    recreate: true
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext: &podSecurityContext
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
    controllers:
      *app :
        labels:
          kustomize.toolkit.fluxcd.io/force: enabled
        serviceAccount:
          name: *app
        containers: &job
          *app :
            image:
              repository: rclone/rclone
              tag: master@sha256:25dddfcb66c96a6e27ac9e2f43c557f7a8db69e0ec32cae9126294d6871a4791
              pullPolicy: Always
            securityContext:
              readOnlyRootFilesystem: false
            command:
            - /scripts/start.sh
            env:
              PUID: 568
              PGID: 568
              UMASK: 002
              TZ: "${TIMEZONE}"
              R3_USER_CLUSTER_USER:
                valueFrom:
                  secretKeyRef:
                    name: s3-cluster-user
                    key: id
              R3_PASSWORD_CLUSTER_USER:
                valueFrom:
                  secretKeyRef:
                    name: s3-cluster-user
                    key: password
              R3_USER_AUTHENTIK:
                valueFrom:
                  secretKeyRef:
                    name: authentik-s3-access-key
                    key: id
              R3_PASSWORD_AUTHENTIK:
                valueFrom:
                  secretKeyRef:
                    name: authentik-s3-access-key
                    key: password
              R3_USER_BACKREST:
                valueFrom:
                  secretKeyRef:
                    name: backrest-s3-access-key
                    key: id
              R3_PASSWORD_BACKREST:
                valueFrom:
                  secretKeyRef:
                    name: backrest-s3-access-key
                    key: password
              R3_USER_MYSQL:
                valueFrom:
                  secretKeyRef:
                    name: mysql-s3-access-key
                    key: id
              R3_PASSWORD_MYSQL:
                valueFrom:
                  secretKeyRef:
                    name: mysql-s3-access-key
                    key: password
              R3_USER_POSTGRES:
                valueFrom:
                  secretKeyRef:
                    name: postgres-s3-access-key
                    key: id
              R3_PASSWORD_POSTGRES:
                valueFrom:
                  secretKeyRef:
                    name: postgres-s3-access-key
                    key: password
              R3_USER_TIVI_SYNC:
                valueFrom:
                  secretKeyRef:
                    name: tivi-sync-s3-access-key
                    key: id
              R3_PASSWORD_TIVI_SYNC:
                valueFrom:
                  secretKeyRef:
                    name: tivi-sync-s3-access-key
                    key: password
            resources:
              requests:
                cpu: 100m
                memory: 1Gi
    persistence:
      data:
        existingClaim: *app
      cache:
        type: emptyDir
      script:
        type: configMap
        name: ${APP}-script
        defaultMode: 493
        globalMounts:
        - path: /scripts/start.sh
          subPath: start.sh
    service:
      *app :
        controller: *app
        ports:
          http:
            port: 8080
    serviceAccount:
      *app : {}
    rbac:
      roles:
        s3-secret-creator:
          type: Role
          forceRename: s3-secret-creator
          rules:
          - apiGroups: [""]
            resources: ["pods"]
            verbs: ["get", "list", "watch"]
          - apiGroups: [""]
            resources: ["secrets"]
            verbs: ["get", "create", "update", "patch"]
          - apiGroups: [""]
            resources: ["configmaps"]
            verbs: ["get", "create", "update", "patch"]
          - apiGroups: [""]
            resources: ["pods/exec"]
            verbs: ["create", "get"]
          - apiGroups: [""]
            resources: ["pods"]
            verbs: ["get", "list"]
      bindings:
        s3-secret-creator:
          type: RoleBinding
          forceRename: s3-secret-creator
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: s3-secret-creator
          subjects:
          - kind: ServiceAccount
            name: *app
            namespace: ${NAMESPACE}
