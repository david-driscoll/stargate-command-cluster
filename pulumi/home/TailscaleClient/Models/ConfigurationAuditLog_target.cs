// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// The object of this event&apos;s action.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ConfigurationAuditLog_target : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The unique ID (user id, tailnet SID, or node id) of the target.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicates whether the target is ephemeral. Its value should only be set if `type` is `NODE``.</summary>
        public bool? IsEphemeral { get; set; }
        /// <summary>Name of the entity at time of the action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The property name on this target which was updated by the event. When empty, the event didn&apos;t update any fields on this target.</summary>
        public global::Tailscale.Client.Models.ConfigurationAuditLog_target_property? Property { get; set; }
        /// <summary>The entity type of Target.</summary>
        public global::Tailscale.Client.Models.ConfigurationAuditLog_target_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.ConfigurationAuditLog_target"/> and sets the default values.
        /// </summary>
        public ConfigurationAuditLog_target()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.ConfigurationAuditLog_target"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.ConfigurationAuditLog_target CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.ConfigurationAuditLog_target();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "isEphemeral", n => { IsEphemeral = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "property", n => { Property = n.GetEnumValue<global::Tailscale.Client.Models.ConfigurationAuditLog_target_property>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Tailscale.Client.Models.ConfigurationAuditLog_target_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isEphemeral", IsEphemeral);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Tailscale.Client.Models.ConfigurationAuditLog_target_property>("property", Property);
            writer.WriteEnumValue<global::Tailscale.Client.Models.ConfigurationAuditLog_target_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
