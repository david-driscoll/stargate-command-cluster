// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/shareNfs:ShareNfs")]
    public partial class ShareNfs : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow mounting subdirectories
        /// </summary>
        [Output("alldirs")]
        public Output<bool?> Alldirs { get; private set; } = null!;

        /// <summary>
        /// Any notes about this NFS share
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Enable this share
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        /// <summary>
        /// Mapall group
        /// </summary>
        [Output("mapallGroup")]
        public Output<string?> MapallGroup { get; private set; } = null!;

        /// <summary>
        /// Mapall user
        /// </summary>
        [Output("mapallUser")]
        public Output<string?> MapallUser { get; private set; } = null!;

        /// <summary>
        /// Maproot group
        /// </summary>
        [Output("maprootGroup")]
        public Output<string?> MaprootGroup { get; private set; } = null!;

        /// <summary>
        /// Maproot user
        /// </summary>
        [Output("maprootUser")]
        public Output<string?> MaprootUser { get; private set; } = null!;

        /// <summary>
        /// Authorized networks (CIDR)
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<string>> Networks { get; private set; } = null!;

        /// <summary>
        /// Sharing paths
        /// </summary>
        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        /// <summary>
        /// Restrict some syslog diagnostics. See exports(5)
        /// </summary>
        [Output("quiet")]
        public Output<bool?> Quiet { get; private set; } = null!;

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Output("ro")]
        public Output<bool?> Ro { get; private set; } = null!;

        /// <summary>
        /// Security mechanism activation state and priority. Requires NFSv4. sys, krb5, krb5i, krb5p
        /// </summary>
        [Output("securities")]
        public Output<ImmutableArray<string>> Securities { get; private set; } = null!;

        [Output("shareNfsId")]
        public Output<string> ShareNfsId { get; private set; } = null!;

        /// <summary>
        /// NFS Share ID
        /// </summary>
        [Output("sharenfsId")]
        public Output<double> SharenfsId { get; private set; } = null!;


        /// <summary>
        /// Create a ShareNfs resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShareNfs(string name, ShareNfsArgs args, CustomResourceOptions? options = null)
            : base("truenas:index/shareNfs:ShareNfs", name, args ?? new ShareNfsArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private ShareNfs(string name, Input<string> id, ShareNfsState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/shareNfs:ShareNfs", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShareNfs resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShareNfs Get(string name, Input<string> id, ShareNfsState? state = null, CustomResourceOptions? options = null)
        {
            return new ShareNfs(name, id, state, options);
        }
    }

    public sealed class ShareNfsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow mounting subdirectories
        /// </summary>
        [Input("alldirs")]
        public Input<bool>? Alldirs { get; set; }

        /// <summary>
        /// Any notes about this NFS share
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable this share
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Mapall group
        /// </summary>
        [Input("mapallGroup")]
        public Input<string>? MapallGroup { get; set; }

        /// <summary>
        /// Mapall user
        /// </summary>
        [Input("mapallUser")]
        public Input<string>? MapallUser { get; set; }

        /// <summary>
        /// Maproot group
        /// </summary>
        [Input("maprootGroup")]
        public Input<string>? MaprootGroup { get; set; }

        /// <summary>
        /// Maproot user
        /// </summary>
        [Input("maprootUser")]
        public Input<string>? MaprootUser { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// Authorized networks (CIDR)
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("paths", required: true)]
        private InputList<string>? _paths;

        /// <summary>
        /// Sharing paths
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// Restrict some syslog diagnostics. See exports(5)
        /// </summary>
        [Input("quiet")]
        public Input<bool>? Quiet { get; set; }

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Input("ro")]
        public Input<bool>? Ro { get; set; }

        [Input("securities")]
        private InputList<string>? _securities;

        /// <summary>
        /// Security mechanism activation state and priority. Requires NFSv4. sys, krb5, krb5i, krb5p
        /// </summary>
        public InputList<string> Securities
        {
            get => _securities ?? (_securities = new InputList<string>());
            set => _securities = value;
        }

        [Input("shareNfsId")]
        public Input<string>? ShareNfsId { get; set; }

        public ShareNfsArgs()
        {
        }
        public static new ShareNfsArgs Empty => new ShareNfsArgs();
    }

    public sealed class ShareNfsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow mounting subdirectories
        /// </summary>
        [Input("alldirs")]
        public Input<bool>? Alldirs { get; set; }

        /// <summary>
        /// Any notes about this NFS share
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable this share
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// Authorized hosts (IP/hostname)
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Mapall group
        /// </summary>
        [Input("mapallGroup")]
        public Input<string>? MapallGroup { get; set; }

        /// <summary>
        /// Mapall user
        /// </summary>
        [Input("mapallUser")]
        public Input<string>? MapallUser { get; set; }

        /// <summary>
        /// Maproot group
        /// </summary>
        [Input("maprootGroup")]
        public Input<string>? MaprootGroup { get; set; }

        /// <summary>
        /// Maproot user
        /// </summary>
        [Input("maprootUser")]
        public Input<string>? MaprootUser { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// Authorized networks (CIDR)
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// Sharing paths
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// Restrict some syslog diagnostics. See exports(5)
        /// </summary>
        [Input("quiet")]
        public Input<bool>? Quiet { get; set; }

        /// <summary>
        /// Prohibit writing
        /// </summary>
        [Input("ro")]
        public Input<bool>? Ro { get; set; }

        [Input("securities")]
        private InputList<string>? _securities;

        /// <summary>
        /// Security mechanism activation state and priority. Requires NFSv4. sys, krb5, krb5i, krb5p
        /// </summary>
        public InputList<string> Securities
        {
            get => _securities ?? (_securities = new InputList<string>());
            set => _securities = value;
        }

        [Input("shareNfsId")]
        public Input<string>? ShareNfsId { get; set; }

        /// <summary>
        /// NFS Share ID
        /// </summary>
        [Input("sharenfsId")]
        public Input<double>? SharenfsId { get; set; }

        public ShareNfsState()
        {
        }
        public static new ShareNfsState Empty => new ShareNfsState();
    }
}
