// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    [AuthentikResourceType("authentik:index/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        [Output("backchannelProviders")]
        public Output<ImmutableArray<double>> BackchannelProviders { get; private set; } = null!;

        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        [Output("metaDescription")]
        public Output<string?> MetaDescription { get; private set; } = null!;

        [Output("metaIcon")]
        public Output<string?> MetaIcon { get; private set; } = null!;

        [Output("metaLaunchUrl")]
        public Output<string?> MetaLaunchUrl { get; private set; } = null!;

        [Output("metaPublisher")]
        public Output<string?> MetaPublisher { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Output("openInNewTab")]
        public Output<bool?> OpenInNewTab { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Output("policyEngineMode")]
        public Output<string?> PolicyEngineMode { get; private set; } = null!;

        [Output("protocolProvider")]
        public Output<double?> ProtocolProvider { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Generated.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("authentik:index/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/application:Application", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("backchannelProviders")]
        private InputList<double>? _backchannelProviders;
        public InputList<double> BackchannelProviders
        {
            get => _backchannelProviders ?? (_backchannelProviders = new InputList<double>());
            set => _backchannelProviders = value;
        }

        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("metaDescription")]
        public Input<string>? MetaDescription { get; set; }

        [Input("metaIcon")]
        public Input<string>? MetaIcon { get; set; }

        [Input("metaLaunchUrl")]
        public Input<string>? MetaLaunchUrl { get; set; }

        [Input("metaPublisher")]
        public Input<string>? MetaPublisher { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("openInNewTab")]
        public Input<bool>? OpenInNewTab { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        [Input("protocolProvider")]
        public Input<double>? ProtocolProvider { get; set; }

        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("backchannelProviders")]
        private InputList<double>? _backchannelProviders;
        public InputList<double> BackchannelProviders
        {
            get => _backchannelProviders ?? (_backchannelProviders = new InputList<double>());
            set => _backchannelProviders = value;
        }

        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("metaDescription")]
        public Input<string>? MetaDescription { get; set; }

        [Input("metaIcon")]
        public Input<string>? MetaIcon { get; set; }

        [Input("metaLaunchUrl")]
        public Input<string>? MetaLaunchUrl { get; set; }

        [Input("metaPublisher")]
        public Input<string>? MetaPublisher { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("openInNewTab")]
        public Input<bool>? OpenInNewTab { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        [Input("protocolProvider")]
        public Input<double>? ProtocolProvider { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
