// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Tailscale.Client.Models
{
    /// <summary>
    /// DoUpdate user invite is an active invitation that lets a user join a tailnetwith a preassigned [user role](https://tailscale.com/kb/1138/user-roles).Each user invite has a unique ID that is used to identify the invitein API calls. You can find all user invite IDs for a particular tailnetby [listing user invites](#tag/userinvites/get/tailnet/{tailnet}/user-invites).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserInvite : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email to which the invite was sent.If empty, the invite was not emailed to anyone,but the inviteUrl can be shared manually.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The unique identifier for the invite.Supply this value wherever `userInviteId` is indicated in the endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The ID of the user who created the invite.</summary>
        public double? InviterId { get; set; }
        /// <summary>Included when `email` is not part of the tailnet&apos;s domain,or when `email` is empty. It is the link to accept the invite.When included, anyone with this link can accept the invite.It is not restricted to the person to which the invite was emailed.When `email` is part of the tailnet&apos;s domain (has the same @domain.comsuffix as the tailnet), the user can join the tailnet automatically bylogging in with their domain email at https://login.tailscale.com/start.They&apos;ll be assigned the specified `role` upon signing in for the firsttime.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InviteUrl { get; set; }
#nullable restore
#else
        public string InviteUrl { get; set; }
#endif
        /// <summary>The last time the invite was attempted to be sent to Email.Only ever set if `email` is not empty.</summary>
        public DateTimeOffset? LastEmailSentAt { get; set; }
        /// <summary>The tailnet user role to assign to the invited user upon accepting the invite.</summary>
        public global::Tailscale.Client.Models.UserInvite_role? Role { get; set; }
        /// <summary>The ID of the tailnet to which the user was invited.</summary>
        public double? TailnetId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Models.UserInvite"/> and sets the default values.
        /// </summary>
        public UserInvite()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Models.UserInvite"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Tailscale.Client.Models.UserInvite CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Tailscale.Client.Models.UserInvite();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "inviteUrl", n => { InviteUrl = n.GetStringValue(); } },
                { "inviterId", n => { InviterId = n.GetDoubleValue(); } },
                { "lastEmailSentAt", n => { LastEmailSentAt = n.GetDateTimeOffsetValue(); } },
                { "role", n => { Role = n.GetEnumValue<global::Tailscale.Client.Models.UserInvite_role>(); } },
                { "tailnetId", n => { TailnetId = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("inviterId", InviterId);
            writer.WriteStringValue("inviteUrl", InviteUrl);
            writer.WriteDateTimeOffsetValue("lastEmailSentAt", LastEmailSentAt);
            writer.WriteEnumValue<global::Tailscale.Client.Models.UserInvite_role>("role", Role);
            writer.WriteDoubleValue("tailnetId", TailnetId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
