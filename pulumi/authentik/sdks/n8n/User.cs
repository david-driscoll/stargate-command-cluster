// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.N8n
{
    [N8nResourceType("n8n:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp when the user was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// User email address. This is required and must be unique.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// User's first name
        /// </summary>
        [Output("firstName")]
        public Output<string?> FirstName { get; private set; } = null!;

        /// <summary>
        /// Whether the user is an owner of the n8n instance
        /// </summary>
        [Output("isOwner")]
        public Output<bool> IsOwner { get; private set; } = null!;

        /// <summary>
        /// Whether the user invitation is pending
        /// </summary>
        [Output("isPending")]
        public Output<bool> IsPending { get; private set; } = null!;

        /// <summary>
        /// User's last name
        /// </summary>
        [Output("lastName")]
        public Output<string?> LastName { get; private set; } = null!;

        /// <summary>
        /// User password. This is sensitive data and will not be stored in the state after creation.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// User role (e.g., 'admin', 'member', 'editor'). If not specified, defaults to the instance default role.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// User-specific settings
        /// </summary>
        [Output("settings")]
        public Output<Outputs.UserSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the user was last updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("n8n:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("n8n:index/user:User", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User email address. This is required and must be unique.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// User's first name
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// User's last name
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// User password. This is sensitive data and will not be stored in the state after creation.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User role (e.g., 'admin', 'member', 'editor'). If not specified, defaults to the instance default role.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// User-specific settings
        /// </summary>
        [Input("settings")]
        public Input<Inputs.UserSettingsArgs>? Settings { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp when the user was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// User email address. This is required and must be unique.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// User's first name
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// Whether the user is an owner of the n8n instance
        /// </summary>
        [Input("isOwner")]
        public Input<bool>? IsOwner { get; set; }

        /// <summary>
        /// Whether the user invitation is pending
        /// </summary>
        [Input("isPending")]
        public Input<bool>? IsPending { get; set; }

        /// <summary>
        /// User's last name
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// User password. This is sensitive data and will not be stored in the state after creation.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User role (e.g., 'admin', 'member', 'editor'). If not specified, defaults to the instance default role.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// User-specific settings
        /// </summary>
        [Input("settings")]
        public Input<Inputs.UserSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// Timestamp when the user was last updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
