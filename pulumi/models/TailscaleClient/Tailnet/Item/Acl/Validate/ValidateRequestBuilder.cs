// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Tailscale.Client.Models;
namespace Tailscale.Client.Tailnet.Item.Acl.Validate
{
    /// <summary>
    /// Builds and executes requests for operations under \tailnet\{tailnet}\acl\validate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ValidateRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ValidateRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl/validate", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ValidateRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tailnet/{tailnet}/acl/validate", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint works in one of two modes, neither of which modifies your current tailnet policy file:- Run ACL tests: When the request body contains ACL tests as a JSON array,  Tailscale runs ACL tests against the tailnet&apos;s current policy file.  Learn more about [ACL tests](https://tailscale.com/kb/1337/acl-syntax#tests).- Validate a new policy file: When the request body is a JSON object,  Tailscale interprets the body as a hypothetical new tailnet policy file with new ACLs,  including any new rules and tests.  It validates that the policy file is parsable and runs tests to validate the existing rules.In either case, this method does not modify the tailnet policy file in any way.OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostResponse?> PostAsValidatePostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostResponse> PostAsValidatePostResponseAsync(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint works in one of two modes, neither of which modifies your current tailnet policy file:- Run ACL tests: When the request body contains ACL tests as a JSON array,  Tailscale runs ACL tests against the tailnet&apos;s current policy file.  Learn more about [ACL tests](https://tailscale.com/kb/1337/acl-syntax#tests).- Validate a new policy file: When the request body is a JSON object,  Tailscale interprets the body as a hypothetical new tailnet policy file with new ACLs,  including any new rules and tests.  It validates that the policy file is parsable and runs tests to validate the existing rules.In either case, this method does not modify the tailnet policy file in any way.OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Tailscale.Client.Models.Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsValidatePostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateResponse?> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateResponse> PostAsync(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::Tailscale.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateResponse>(requestInfo, global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint works in one of two modes, neither of which modifies your current tailnet policy file:- Run ACL tests: When the request body contains ACL tests as a JSON array,  Tailscale runs ACL tests against the tailnet&apos;s current policy file.  Learn more about [ACL tests](https://tailscale.com/kb/1337/acl-syntax#tests).- Validate a new policy file: When the request body is a JSON object,  Tailscale interprets the body as a hypothetical new tailnet policy file with new ACLs,  including any new rules and tests.  It validates that the policy file is parsable and runs tests to validate the existing rules.In either case, this method does not modify the tailnet policy file in any way.OAuth Scope: `policy_file:read`.
        /// </summary>
        /// <returns>DoUpdate <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ValidatePostRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1>? ValidatePostRequestBodyMember1 { get; set; }
#nullable restore
#else
            public List<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1> ValidatePostRequestBodyMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>DoUpdate <see cref="global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidateRequestBuilder.ValidatePostRequestBody();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1>(global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1> validatePostRequestBodyMember1Value)
                {
                    result.ValidatePostRequestBodyMember1 = validatePostRequestBodyMember1Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>DoUpdate IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(ValidatePostRequestBodyMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::Tailscale.Client.Tailnet.Item.Acl.Validate.ValidatePostRequestBodyMember1>(null, ValidatePostRequestBodyMember1);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ValidateRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
