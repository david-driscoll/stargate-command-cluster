// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    public static class GetUsers
    {
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("authentik:index/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("authentik:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());

        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("authentik:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public string? Attributes { get; set; }

        [Input("email")]
        public string? Email { get; set; }

        [Input("groupsByNames")]
        private List<string>? _groupsByNames;
        public List<string> GroupsByNames
        {
            get => _groupsByNames ?? (_groupsByNames = new List<string>());
            set => _groupsByNames = value;
        }

        [Input("groupsByPks")]
        private List<string>? _groupsByPks;
        public List<string> GroupsByPks
        {
            get => _groupsByPks ?? (_groupsByPks = new List<string>());
            set => _groupsByPks = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("isActive")]
        public bool? IsActive { get; set; }

        [Input("isSuperuser")]
        public bool? IsSuperuser { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("ordering")]
        public string? Ordering { get; set; }

        [Input("path")]
        public string? Path { get; set; }

        [Input("pathStartswith")]
        public string? PathStartswith { get; set; }

        [Input("search")]
        public string? Search { get; set; }

        [Input("username")]
        public string? Username { get; set; }

        [Input("uuid")]
        public string? Uuid { get; set; }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributes")]
        public Input<string>? Attributes { get; set; }

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("groupsByNames")]
        private InputList<string>? _groupsByNames;
        public InputList<string> GroupsByNames
        {
            get => _groupsByNames ?? (_groupsByNames = new InputList<string>());
            set => _groupsByNames = value;
        }

        [Input("groupsByPks")]
        private InputList<string>? _groupsByPks;
        public InputList<string> GroupsByPks
        {
            get => _groupsByPks ?? (_groupsByPks = new InputList<string>());
            set => _groupsByPks = value;
        }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        [Input("isSuperuser")]
        public Input<bool>? IsSuperuser { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ordering")]
        public Input<string>? Ordering { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("pathStartswith")]
        public Input<string>? PathStartswith { get; set; }

        [Input("search")]
        public Input<string>? Search { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        public readonly string? Attributes;
        public readonly string? Email;
        public readonly ImmutableArray<string> GroupsByNames;
        public readonly ImmutableArray<string> GroupsByPks;
        public readonly string Id;
        public readonly bool? IsActive;
        public readonly bool? IsSuperuser;
        public readonly string? Name;
        public readonly string? Ordering;
        public readonly string? Path;
        public readonly string? PathStartswith;
        public readonly string? Search;
        public readonly string? Username;
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;
        public readonly string? Uuid;

        [OutputConstructor]
        private GetUsersResult(
            string? attributes,

            string? email,

            ImmutableArray<string> groupsByNames,

            ImmutableArray<string> groupsByPks,

            string id,

            bool? isActive,

            bool? isSuperuser,

            string? name,

            string? ordering,

            string? path,

            string? pathStartswith,

            string? search,

            string? username,

            ImmutableArray<Outputs.GetUsersUserResult> users,

            string? uuid)
        {
            Attributes = attributes;
            Email = email;
            GroupsByNames = groupsByNames;
            GroupsByPks = groupsByPks;
            Id = id;
            IsActive = isActive;
            IsSuperuser = isSuperuser;
            Name = name;
            Ordering = ordering;
            Path = path;
            PathStartswith = pathStartswith;
            Search = search;
            Username = username;
            Users = users;
            Uuid = uuid;
        }
    }
}
