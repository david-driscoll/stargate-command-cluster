// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/cronjob:Cronjob")]
    public partial class Cronjob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Command or script that runs on schedule
        /// </summary>
        [Output("command")]
        public Output<string> Command { get; private set; } = null!;

        /// <summary>
        /// Cronjob ID
        /// </summary>
        [Output("cronjobId")]
        public Output<string> CronjobId { get; private set; } = null!;

        /// <summary>
        /// Optional cronjob description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// `true` if cronjob is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// if `false` any error output is mailed to the user account used to run the command
        /// </summary>
        [Output("hideStderr")]
        public Output<bool?> HideStderr { get; private set; } = null!;

        /// <summary>
        /// if `false` any standard output is mailed to the user account used to run the command
        /// </summary>
        [Output("hideStdout")]
        public Output<bool?> HideStdout { get; private set; } = null!;

        /// <summary>
        /// Cronjob schedule
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.CronjobSchedule> Schedule { get; private set; } = null!;

        [Output("truenasCronjobId")]
        public Output<string> TruenasCronjobId { get; private set; } = null!;

        /// <summary>
        /// Account that is used to run the job
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;


        /// <summary>
        /// Create a Cronjob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cronjob(string name, CronjobArgs args, CustomResourceOptions? options = null)
            : base("truenas:index/cronjob:Cronjob", name, args ?? new CronjobArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Cronjob(string name, Input<string> id, CronjobState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/cronjob:Cronjob", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cronjob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cronjob Get(string name, Input<string> id, CronjobState? state = null, CustomResourceOptions? options = null)
        {
            return new Cronjob(name, id, state, options);
        }
    }

    public sealed class CronjobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Command or script that runs on schedule
        /// </summary>
        [Input("command", required: true)]
        public Input<string> Command { get; set; } = null!;

        /// <summary>
        /// Optional cronjob description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `true` if cronjob is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// if `false` any error output is mailed to the user account used to run the command
        /// </summary>
        [Input("hideStderr")]
        public Input<bool>? HideStderr { get; set; }

        /// <summary>
        /// if `false` any standard output is mailed to the user account used to run the command
        /// </summary>
        [Input("hideStdout")]
        public Input<bool>? HideStdout { get; set; }

        /// <summary>
        /// Cronjob schedule
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.CronjobScheduleArgs> Schedule { get; set; } = null!;

        [Input("truenasCronjobId")]
        public Input<string>? TruenasCronjobId { get; set; }

        /// <summary>
        /// Account that is used to run the job
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public CronjobArgs()
        {
        }
        public static new CronjobArgs Empty => new CronjobArgs();
    }

    public sealed class CronjobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Command or script that runs on schedule
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Cronjob ID
        /// </summary>
        [Input("cronjobId")]
        public Input<string>? CronjobId { get; set; }

        /// <summary>
        /// Optional cronjob description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `true` if cronjob is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// if `false` any error output is mailed to the user account used to run the command
        /// </summary>
        [Input("hideStderr")]
        public Input<bool>? HideStderr { get; set; }

        /// <summary>
        /// if `false` any standard output is mailed to the user account used to run the command
        /// </summary>
        [Input("hideStdout")]
        public Input<bool>? HideStdout { get; set; }

        /// <summary>
        /// Cronjob schedule
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.CronjobScheduleGetArgs>? Schedule { get; set; }

        [Input("truenasCronjobId")]
        public Input<string>? TruenasCronjobId { get; set; }

        /// <summary>
        /// Account that is used to run the job
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public CronjobState()
        {
        }
        public static new CronjobState Empty => new CronjobState();
    }
}
