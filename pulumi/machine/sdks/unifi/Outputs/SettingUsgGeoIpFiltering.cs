// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Unifi.Outputs
{

    [OutputType]
    public sealed class SettingUsgGeoIpFiltering
    {
        /// <summary>
        /// List of two-letter ISO 3166-1 alpha-2 country codes to block or allow, depending on the `block` setting. Must contain at least one country code when geo IP filtering is enabled. Country codes are case-insensitive but are typically written in uppercase.
        /// 
        /// Examples:
        ///   * `['US', 'CA', 'MX']` - United States, Canada, and Mexico
        ///   * `['CN', 'RU', 'IR']` - China, Russia, and Iran
        ///   * `['GB', 'DE', 'FR']` - United Kingdom, Germany, and France
        /// </summary>
        public readonly ImmutableArray<string> Countries;
        /// <summary>
        /// Specifies whether the selected countries should be blocked or allowed. Valid values are:
        ///   * `block` (default) - Traffic from the specified countries will be blocked, while traffic from all other countries will be allowed
        ///   * `allow` - Only traffic from the specified countries will be allowed, while traffic from all other countries will be blocked
        /// 
        /// This setting effectively determines whether the `countries` list functions as a blocklist or an allowlist.
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// Specifies which traffic direction the geo IP filtering applies to. Valid values are:
        ///   * `both` (default) - Filters traffic in both directions (incoming and outgoing)
        ///   * `ingress` - Filters only incoming traffic (from WAN to LAN)
        ///   * `egress` - Filters only outgoing traffic (from LAN to WAN)
        /// 
        /// This setting is useful for creating more granular filtering policies. For example, you might want to block incoming traffic from certain countries while still allowing outgoing connections to those same countries.
        /// </summary>
        public readonly string? TrafficDirection;

        [OutputConstructor]
        private SettingUsgGeoIpFiltering(
            ImmutableArray<string> countries,

            string? mode,

            string? trafficDirection)
        {
            Countries = countries;
            Mode = mode;
            TrafficDirection = trafficDirection;
        }
    }
}
