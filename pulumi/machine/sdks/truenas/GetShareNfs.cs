// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    public static class GetShareNfs
    {
        public static Task<GetShareNfsResult> InvokeAsync(GetShareNfsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetShareNfsResult>("truenas:index/getShareNfs:getShareNfs", args ?? new GetShareNfsArgs(), options.WithDefaults(), Utilities.PackageParameterization());

        public static Output<GetShareNfsResult> Invoke(GetShareNfsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetShareNfsResult>("truenas:index/getShareNfs:getShareNfs", args ?? new GetShareNfsInvokeArgs(), options.WithDefaults());

        public static Output<GetShareNfsResult> Invoke(GetShareNfsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetShareNfsResult>("truenas:index/getShareNfs:getShareNfs", args ?? new GetShareNfsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShareNfsArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("sharenfsId", required: true)]
        public double SharenfsId { get; set; }

        public GetShareNfsArgs()
        {
        }
        public static new GetShareNfsArgs Empty => new GetShareNfsArgs();
    }

    public sealed class GetShareNfsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("sharenfsId", required: true)]
        public Input<double> SharenfsId { get; set; } = null!;

        public GetShareNfsInvokeArgs()
        {
        }
        public static new GetShareNfsInvokeArgs Empty => new GetShareNfsInvokeArgs();
    }


    [OutputType]
    public sealed class GetShareNfsResult
    {
        public readonly bool Alldirs;
        public readonly string Comment;
        public readonly bool Enabled;
        public readonly ImmutableArray<string> Hosts;
        public readonly string Id;
        public readonly bool Locked;
        public readonly string MapallGroup;
        public readonly string MapallUser;
        public readonly string MaprootGroup;
        public readonly string MaprootUser;
        public readonly ImmutableArray<string> Networks;
        public readonly ImmutableArray<string> Paths;
        public readonly bool Quiet;
        public readonly bool Ro;
        public readonly ImmutableArray<string> Securities;
        public readonly double SharenfsId;

        [OutputConstructor]
        private GetShareNfsResult(
            bool alldirs,

            string comment,

            bool enabled,

            ImmutableArray<string> hosts,

            string id,

            bool locked,

            string mapallGroup,

            string mapallUser,

            string maprootGroup,

            string maprootUser,

            ImmutableArray<string> networks,

            ImmutableArray<string> paths,

            bool quiet,

            bool ro,

            ImmutableArray<string> securities,

            double sharenfsId)
        {
            Alldirs = alldirs;
            Comment = comment;
            Enabled = enabled;
            Hosts = hosts;
            Id = id;
            Locked = locked;
            MapallGroup = mapallGroup;
            MapallUser = mapallUser;
            MaprootGroup = maprootGroup;
            MaprootUser = maprootUser;
            Networks = networks;
            Paths = paths;
            Quiet = quiet;
            Ro = ro;
            Securities = securities;
            SharenfsId = sharenfsId;
        }
    }
}
