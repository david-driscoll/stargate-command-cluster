// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Authentik
{
    [AuthentikResourceType("authentik:index/sourceKerberos:SourceKerberos")]
    public partial class SourceKerberos : global::Pulumi.CustomResource
    {
        [Output("authenticationFlow")]
        public Output<string?> AuthenticationFlow { get; private set; } = null!;

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("enrollmentFlow")]
        public Output<string?> EnrollmentFlow { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Output("groupMatchingMode")]
        public Output<string?> GroupMatchingMode { get; private set; } = null!;

        /// <summary>
        /// Custom krb5.conf to use. Uses the system one by default
        /// </summary>
        [Output("krb5Conf")]
        public Output<string?> Krb5Conf { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        /// `false`.
        /// </summary>
        [Output("passwordLoginUpdateInternalPassword")]
        public Output<bool?> PasswordLoginUpdateInternalPassword { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Output("policyEngineMode")]
        public Output<string?> PolicyEngineMode { get; private set; } = null!;

        /// <summary>
        /// Kerberos realm
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("sourceKerberosId")]
        public Output<string> SourceKerberosId { get; private set; } = null!;

        /// <summary>
        /// Credential cache to use for SPNEGO in form type:residual
        /// </summary>
        [Output("spnegoCcache")]
        public Output<string?> SpnegoCcache { get; private set; } = null!;

        /// <summary>
        /// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        /// </summary>
        [Output("spnegoKeytab")]
        public Output<string?> SpnegoKeytab { get; private set; } = null!;

        /// <summary>
        /// Force the use of a specific server name for SPNEGO
        /// </summary>
        [Output("spnegoServerName")]
        public Output<string?> SpnegoServerName { get; private set; } = null!;

        /// <summary>
        /// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        /// </summary>
        [Output("syncCcache")]
        public Output<string?> SyncCcache { get; private set; } = null!;

        /// <summary>
        /// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        /// </summary>
        [Output("syncKeytab")]
        public Output<string?> SyncKeytab { get; private set; } = null!;

        /// <summary>
        /// Password to authenticate to kadmin for sync
        /// </summary>
        [Output("syncPassword")]
        public Output<string?> SyncPassword { get; private set; } = null!;

        /// <summary>
        /// Principal to authenticate to kadmin for sync.
        /// </summary>
        [Output("syncPrincipal")]
        public Output<string?> SyncPrincipal { get; private set; } = null!;

        /// <summary>
        /// Sync users from Kerberos into authentik Defaults to `true`.
        /// </summary>
        [Output("syncUsers")]
        public Output<bool?> SyncUsers { get; private set; } = null!;

        /// <summary>
        /// When a user changes their password, sync it back to Kerberos Defaults to `true`.
        /// </summary>
        [Output("syncUsersPassword")]
        public Output<bool?> SyncUsersPassword { get; private set; } = null!;

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Output("userMatchingMode")]
        public Output<string?> UserMatchingMode { get; private set; } = null!;

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Output("userPathTemplate")]
        public Output<string?> UserPathTemplate { get; private set; } = null!;

        /// <summary>
        /// Generated.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a SourceKerberos resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceKerberos(string name, SourceKerberosArgs args, CustomResourceOptions? options = null)
            : base("authentik:index/sourceKerberos:SourceKerberos", name, args ?? new SourceKerberosArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private SourceKerberos(string name, Input<string> id, SourceKerberosState? state = null, CustomResourceOptions? options = null)
            : base("authentik:index/sourceKerberos:SourceKerberos", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "spnegoKeytab",
                    "syncKeytab",
                    "syncPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceKerberos resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceKerberos Get(string name, Input<string> id, SourceKerberosState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceKerberos(name, id, state, options);
        }
    }

    public sealed class SourceKerberosArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        /// <summary>
        /// Custom krb5.conf to use. Uses the system one by default
        /// </summary>
        [Input("krb5Conf")]
        public Input<string>? Krb5Conf { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        /// `false`.
        /// </summary>
        [Input("passwordLoginUpdateInternalPassword")]
        public Input<bool>? PasswordLoginUpdateInternalPassword { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        /// <summary>
        /// Kerberos realm
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        [Input("sourceKerberosId")]
        public Input<string>? SourceKerberosId { get; set; }

        /// <summary>
        /// Credential cache to use for SPNEGO in form type:residual
        /// </summary>
        [Input("spnegoCcache")]
        public Input<string>? SpnegoCcache { get; set; }

        [Input("spnegoKeytab")]
        private Input<string>? _spnegoKeytab;

        /// <summary>
        /// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        /// </summary>
        public Input<string>? SpnegoKeytab
        {
            get => _spnegoKeytab;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _spnegoKeytab = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Force the use of a specific server name for SPNEGO
        /// </summary>
        [Input("spnegoServerName")]
        public Input<string>? SpnegoServerName { get; set; }

        /// <summary>
        /// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        /// </summary>
        [Input("syncCcache")]
        public Input<string>? SyncCcache { get; set; }

        [Input("syncKeytab")]
        private Input<string>? _syncKeytab;

        /// <summary>
        /// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        /// </summary>
        public Input<string>? SyncKeytab
        {
            get => _syncKeytab;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _syncKeytab = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("syncPassword")]
        private Input<string>? _syncPassword;

        /// <summary>
        /// Password to authenticate to kadmin for sync
        /// </summary>
        public Input<string>? SyncPassword
        {
            get => _syncPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _syncPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Principal to authenticate to kadmin for sync.
        /// </summary>
        [Input("syncPrincipal")]
        public Input<string>? SyncPrincipal { get; set; }

        /// <summary>
        /// Sync users from Kerberos into authentik Defaults to `true`.
        /// </summary>
        [Input("syncUsers")]
        public Input<bool>? SyncUsers { get; set; }

        /// <summary>
        /// When a user changes their password, sync it back to Kerberos Defaults to `true`.
        /// </summary>
        [Input("syncUsersPassword")]
        public Input<bool>? SyncUsersPassword { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourceKerberosArgs()
        {
        }
        public static new SourceKerberosArgs Empty => new SourceKerberosArgs();
    }

    public sealed class SourceKerberosState : global::Pulumi.ResourceArgs
    {
        [Input("authenticationFlow")]
        public Input<string>? AuthenticationFlow { get; set; }

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enrollmentFlow")]
        public Input<string>? EnrollmentFlow { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        /// </summary>
        [Input("groupMatchingMode")]
        public Input<string>? GroupMatchingMode { get; set; }

        /// <summary>
        /// Custom krb5.conf to use. Uses the system one by default
        /// </summary>
        [Input("krb5Conf")]
        public Input<string>? Krb5Conf { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        /// `false`.
        /// </summary>
        [Input("passwordLoginUpdateInternalPassword")]
        public Input<bool>? PasswordLoginUpdateInternalPassword { get; set; }

        /// <summary>
        /// Allowed values: - `all` - `any` Defaults to `any`.
        /// </summary>
        [Input("policyEngineMode")]
        public Input<string>? PolicyEngineMode { get; set; }

        /// <summary>
        /// Kerberos realm
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("sourceKerberosId")]
        public Input<string>? SourceKerberosId { get; set; }

        /// <summary>
        /// Credential cache to use for SPNEGO in form type:residual
        /// </summary>
        [Input("spnegoCcache")]
        public Input<string>? SpnegoCcache { get; set; }

        [Input("spnegoKeytab")]
        private Input<string>? _spnegoKeytab;

        /// <summary>
        /// SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        /// </summary>
        public Input<string>? SpnegoKeytab
        {
            get => _spnegoKeytab;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _spnegoKeytab = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Force the use of a specific server name for SPNEGO
        /// </summary>
        [Input("spnegoServerName")]
        public Input<string>? SpnegoServerName { get; set; }

        /// <summary>
        /// Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        /// </summary>
        [Input("syncCcache")]
        public Input<string>? SyncCcache { get; set; }

        [Input("syncKeytab")]
        private Input<string>? _syncKeytab;

        /// <summary>
        /// Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        /// </summary>
        public Input<string>? SyncKeytab
        {
            get => _syncKeytab;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _syncKeytab = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("syncPassword")]
        private Input<string>? _syncPassword;

        /// <summary>
        /// Password to authenticate to kadmin for sync
        /// </summary>
        public Input<string>? SyncPassword
        {
            get => _syncPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _syncPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Principal to authenticate to kadmin for sync.
        /// </summary>
        [Input("syncPrincipal")]
        public Input<string>? SyncPrincipal { get; set; }

        /// <summary>
        /// Sync users from Kerberos into authentik Defaults to `true`.
        /// </summary>
        [Input("syncUsers")]
        public Input<bool>? SyncUsers { get; set; }

        /// <summary>
        /// When a user changes their password, sync it back to Kerberos Defaults to `true`.
        /// </summary>
        [Input("syncUsersPassword")]
        public Input<bool>? SyncUsersPassword { get; set; }

        /// <summary>
        /// Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        /// `identifier`.
        /// </summary>
        [Input("userMatchingMode")]
        public Input<string>? UserMatchingMode { get; set; }

        /// <summary>
        /// Defaults to `goauthentik.io/sources/%(slug)s`.
        /// </summary>
        [Input("userPathTemplate")]
        public Input<string>? UserPathTemplate { get; set; }

        /// <summary>
        /// Generated.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public SourceKerberosState()
        {
        }
        public static new SourceKerberosState Empty => new SourceKerberosState();
    }
}
