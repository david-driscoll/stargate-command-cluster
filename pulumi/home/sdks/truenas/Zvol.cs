// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/zvol:Zvol")]
    public partial class Zvol : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Volume blocksize
        /// </summary>
        [Output("blocksize")]
        public Output<string?> Blocksize { get; private set; } = null!;

        /// <summary>
        /// Any notes about this volume.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Compression level
        /// </summary>
        [Output("compression")]
        public Output<string> Compression { get; private set; } = null!;

        [Output("copies")]
        public Output<double> Copies { get; private set; } = null!;

        /// <summary>
        /// Transparently reuse a single copy of duplicated data to save space. Deduplication can improve storage capacity, but is
        /// RAM intensive. Compressing data is generally recommended before using deduplication. Deduplicating data is a one-way
        /// process. *Deduplicated data cannot be undeduplicated!*.
        /// </summary>
        [Output("deduplication")]
        public Output<string?> Deduplication { get; private set; } = null!;

        [Output("encrypted")]
        public Output<bool> Encrypted { get; private set; } = null!;

        [Output("encryptionAlgorithm")]
        public Output<string> EncryptionAlgorithm { get; private set; } = null!;

        [Output("encryptionRoot")]
        public Output<string> EncryptionRoot { get; private set; } = null!;

        /// <summary>
        /// The system restricts creating a zvol that brings the pool to over 80% capacity. Set to force creation of the zvol (not
        /// recommended)
        /// </summary>
        [Output("forceSize")]
        public Output<bool?> ForceSize { get; private set; } = null!;

        /// <summary>
        /// Use the encryption properties of the root dataset.
        /// </summary>
        [Output("inheritEncryption")]
        public Output<bool?> InheritEncryption { get; private set; } = null!;

        [Output("keyFormat")]
        public Output<string> KeyFormat { get; private set; } = null!;

        [Output("keyLoaded")]
        public Output<bool> KeyLoaded { get; private set; } = null!;

        [Output("locked")]
        public Output<bool> Locked { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the volume. Cannot be changed after the zvol is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parent dataset
        /// </summary>
        [Output("parent")]
        public Output<string?> Parent { get; private set; } = null!;

        [Output("pbkdf2iters")]
        public Output<double> Pbkdf2iters { get; private set; } = null!;

        [Output("pool")]
        public Output<string> Pool { get; private set; } = null!;

        /// <summary>
        /// Set to prevent the zvol from being modified
        /// </summary>
        [Output("readonly")]
        public Output<string> Readonly { get; private set; } = null!;

        [Output("refReservation")]
        public Output<double> RefReservation { get; private set; } = null!;

        [Output("reservation")]
        public Output<double> Reservation { get; private set; } = null!;

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Output("sync")]
        public Output<string?> Sync { get; private set; } = null!;

        [Output("truenasZvolId")]
        public Output<string> TruenasZvolId { get; private set; } = null!;

        /// <summary>
        /// Volume size in bytes, should be multiples of block size
        /// </summary>
        [Output("volsize")]
        public Output<double> Volsize { get; private set; } = null!;

        [Output("zvolId")]
        public Output<string> ZvolId { get; private set; } = null!;


        /// <summary>
        /// Create a Zvol resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zvol(string name, ZvolArgs args, CustomResourceOptions? options = null)
            : base("truenas:index/zvol:Zvol", name, args ?? new ZvolArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Zvol(string name, Input<string> id, ZvolState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/zvol:Zvol", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zvol resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zvol Get(string name, Input<string> id, ZvolState? state = null, CustomResourceOptions? options = null)
        {
            return new Zvol(name, id, state, options);
        }
    }

    public sealed class ZvolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Volume blocksize
        /// </summary>
        [Input("blocksize")]
        public Input<string>? Blocksize { get; set; }

        /// <summary>
        /// Any notes about this volume.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Compression level
        /// </summary>
        [Input("compression", required: true)]
        public Input<string> Compression { get; set; } = null!;

        /// <summary>
        /// Transparently reuse a single copy of duplicated data to save space. Deduplication can improve storage capacity, but is
        /// RAM intensive. Compressing data is generally recommended before using deduplication. Deduplicating data is a one-way
        /// process. *Deduplicated data cannot be undeduplicated!*.
        /// </summary>
        [Input("deduplication")]
        public Input<string>? Deduplication { get; set; }

        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        /// <summary>
        /// The system restricts creating a zvol that brings the pool to over 80% capacity. Set to force creation of the zvol (not
        /// recommended)
        /// </summary>
        [Input("forceSize")]
        public Input<bool>? ForceSize { get; set; }

        /// <summary>
        /// Use the encryption properties of the root dataset.
        /// </summary>
        [Input("inheritEncryption")]
        public Input<bool>? InheritEncryption { get; set; }

        /// <summary>
        /// Unique identifier for the volume. Cannot be changed after the zvol is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent dataset
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("pool", required: true)]
        public Input<string> Pool { get; set; } = null!;

        /// <summary>
        /// Set to prevent the zvol from being modified
        /// </summary>
        [Input("readonly")]
        public Input<string>? Readonly { get; set; }

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Input("sync")]
        public Input<string>? Sync { get; set; }

        [Input("truenasZvolId")]
        public Input<string>? TruenasZvolId { get; set; }

        /// <summary>
        /// Volume size in bytes, should be multiples of block size
        /// </summary>
        [Input("volsize", required: true)]
        public Input<double> Volsize { get; set; } = null!;

        public ZvolArgs()
        {
        }
        public static new ZvolArgs Empty => new ZvolArgs();
    }

    public sealed class ZvolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Volume blocksize
        /// </summary>
        [Input("blocksize")]
        public Input<string>? Blocksize { get; set; }

        /// <summary>
        /// Any notes about this volume.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Compression level
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        [Input("copies")]
        public Input<double>? Copies { get; set; }

        /// <summary>
        /// Transparently reuse a single copy of duplicated data to save space. Deduplication can improve storage capacity, but is
        /// RAM intensive. Compressing data is generally recommended before using deduplication. Deduplicating data is a one-way
        /// process. *Deduplicated data cannot be undeduplicated!*.
        /// </summary>
        [Input("deduplication")]
        public Input<string>? Deduplication { get; set; }

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        [Input("encryptionRoot")]
        public Input<string>? EncryptionRoot { get; set; }

        /// <summary>
        /// The system restricts creating a zvol that brings the pool to over 80% capacity. Set to force creation of the zvol (not
        /// recommended)
        /// </summary>
        [Input("forceSize")]
        public Input<bool>? ForceSize { get; set; }

        /// <summary>
        /// Use the encryption properties of the root dataset.
        /// </summary>
        [Input("inheritEncryption")]
        public Input<bool>? InheritEncryption { get; set; }

        [Input("keyFormat")]
        public Input<string>? KeyFormat { get; set; }

        [Input("keyLoaded")]
        public Input<bool>? KeyLoaded { get; set; }

        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Unique identifier for the volume. Cannot be changed after the zvol is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent dataset
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        [Input("pbkdf2iters")]
        public Input<double>? Pbkdf2iters { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        /// <summary>
        /// Set to prevent the zvol from being modified
        /// </summary>
        [Input("readonly")]
        public Input<string>? Readonly { get; set; }

        [Input("refReservation")]
        public Input<double>? RefReservation { get; set; }

        [Input("reservation")]
        public Input<double>? Reservation { get; set; }

        /// <summary>
        /// Sets the data write synchronization. `inherit` takes the sync settings from the parent dataset, `standard` uses the
        /// settings that have been requested by the client software, `always` waits for data writes to complete, and `disabled`
        /// never waits for writes to complete.
        /// </summary>
        [Input("sync")]
        public Input<string>? Sync { get; set; }

        [Input("truenasZvolId")]
        public Input<string>? TruenasZvolId { get; set; }

        /// <summary>
        /// Volume size in bytes, should be multiples of block size
        /// </summary>
        [Input("volsize")]
        public Input<double>? Volsize { get; set; }

        [Input("zvolId")]
        public Input<string>? ZvolId { get; set; }

        public ZvolState()
        {
        }
        public static new ZvolState Empty => new ZvolState();
    }
}
