// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Truenas
{
    [TruenasResourceType("truenas:index/vm:Vm")]
    public partial class Vm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set to start this VM when the system boots
        /// </summary>
        [Output("autostart")]
        public Output<bool?> Autostart { get; private set; } = null!;

        /// <summary>
        /// VM bootloader
        /// </summary>
        [Output("bootloader")]
        public Output<string?> Bootloader { get; private set; } = null!;

        /// <summary>
        /// Specify the number of cores per virtual CPU socket. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Output("cores")]
        public Output<double?> Cores { get; private set; } = null!;

        /// <summary>
        /// VM description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("devices")]
        public Output<ImmutableArray<Outputs.VmDevice>> Devices { get; private set; } = null!;

        /// <summary>
        /// Allocate RAM for the VM. Minimum value is 256 * 1024 * 1024 B. Units are bytes. Allocating too much memory can slow the system or prevent VMs from running
        /// </summary>
        [Output("memory")]
        public Output<double?> Memory { get; private set; } = null!;

        /// <summary>
        /// VM name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The time in seconds the system waits for the VM to cleanly shut down. During system shutdown, the system initiates poweroff for the VM after the shutdown timeout has expired.
        /// </summary>
        [Output("shutdownTimeout")]
        public Output<double?> ShutdownTimeout { get; private set; } = null!;

        [Output("statuses")]
        public Output<ImmutableArray<Outputs.VmStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Specify the number of threads per core. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Output("threads")]
        public Output<double?> Threads { get; private set; } = null!;

        /// <summary>
        /// VM system time. Default is `Local`
        /// </summary>
        [Output("time")]
        public Output<string?> Time { get; private set; } = null!;

        [Output("truenasVmId")]
        public Output<string> TruenasVmId { get; private set; } = null!;

        /// <summary>
        /// Number of virtual CPUs to allocate to the virtual machine. The maximum is 16, or fewer if the host CPU limits the maximum. The VM operating system might also have operational or licensing restrictions on the number of CPUs.
        /// </summary>
        [Output("vcpus")]
        public Output<double?> Vcpus { get; private set; } = null!;

        /// <summary>
        /// VM ID
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a Vm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vm(string name, VmArgs? args = null, CustomResourceOptions? options = null)
            : base("truenas:index/vm:Vm", name, args ?? new VmArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Vm(string name, Input<string> id, VmState? state = null, CustomResourceOptions? options = null)
            : base("truenas:index/vm:Vm", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vm Get(string name, Input<string> id, VmState? state = null, CustomResourceOptions? options = null)
        {
            return new Vm(name, id, state, options);
        }
    }

    public sealed class VmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to start this VM when the system boots
        /// </summary>
        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        /// <summary>
        /// VM bootloader
        /// </summary>
        [Input("bootloader")]
        public Input<string>? Bootloader { get; set; }

        /// <summary>
        /// Specify the number of cores per virtual CPU socket. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Input("cores")]
        public Input<double>? Cores { get; set; }

        /// <summary>
        /// VM description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("devices")]
        private InputList<Inputs.VmDeviceArgs>? _devices;
        public InputList<Inputs.VmDeviceArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.VmDeviceArgs>());
            set => _devices = value;
        }

        /// <summary>
        /// Allocate RAM for the VM. Minimum value is 256 * 1024 * 1024 B. Units are bytes. Allocating too much memory can slow the system or prevent VMs from running
        /// </summary>
        [Input("memory")]
        public Input<double>? Memory { get; set; }

        /// <summary>
        /// VM name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time in seconds the system waits for the VM to cleanly shut down. During system shutdown, the system initiates poweroff for the VM after the shutdown timeout has expired.
        /// </summary>
        [Input("shutdownTimeout")]
        public Input<double>? ShutdownTimeout { get; set; }

        /// <summary>
        /// Specify the number of threads per core. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Input("threads")]
        public Input<double>? Threads { get; set; }

        /// <summary>
        /// VM system time. Default is `Local`
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        [Input("truenasVmId")]
        public Input<string>? TruenasVmId { get; set; }

        /// <summary>
        /// Number of virtual CPUs to allocate to the virtual machine. The maximum is 16, or fewer if the host CPU limits the maximum. The VM operating system might also have operational or licensing restrictions on the number of CPUs.
        /// </summary>
        [Input("vcpus")]
        public Input<double>? Vcpus { get; set; }

        public VmArgs()
        {
        }
        public static new VmArgs Empty => new VmArgs();
    }

    public sealed class VmState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set to start this VM when the system boots
        /// </summary>
        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        /// <summary>
        /// VM bootloader
        /// </summary>
        [Input("bootloader")]
        public Input<string>? Bootloader { get; set; }

        /// <summary>
        /// Specify the number of cores per virtual CPU socket. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Input("cores")]
        public Input<double>? Cores { get; set; }

        /// <summary>
        /// VM description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("devices")]
        private InputList<Inputs.VmDeviceGetArgs>? _devices;
        public InputList<Inputs.VmDeviceGetArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.VmDeviceGetArgs>());
            set => _devices = value;
        }

        /// <summary>
        /// Allocate RAM for the VM. Minimum value is 256 * 1024 * 1024 B. Units are bytes. Allocating too much memory can slow the system or prevent VMs from running
        /// </summary>
        [Input("memory")]
        public Input<double>? Memory { get; set; }

        /// <summary>
        /// VM name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time in seconds the system waits for the VM to cleanly shut down. During system shutdown, the system initiates poweroff for the VM after the shutdown timeout has expired.
        /// </summary>
        [Input("shutdownTimeout")]
        public Input<double>? ShutdownTimeout { get; set; }

        [Input("statuses")]
        private InputList<Inputs.VmStatusGetArgs>? _statuses;
        public InputList<Inputs.VmStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.VmStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Specify the number of threads per core. The product of vCPUs, cores, and threads must not exceed 16.
        /// </summary>
        [Input("threads")]
        public Input<double>? Threads { get; set; }

        /// <summary>
        /// VM system time. Default is `Local`
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        [Input("truenasVmId")]
        public Input<string>? TruenasVmId { get; set; }

        /// <summary>
        /// Number of virtual CPUs to allocate to the virtual machine. The maximum is 16, or fewer if the host CPU limits the maximum. The VM operating system might also have operational or licensing restrictions on the number of CPUs.
        /// </summary>
        [Input("vcpus")]
        public Input<double>? Vcpus { get; set; }

        /// <summary>
        /// VM ID
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public VmState()
        {
        }
        public static new VmState Empty => new VmState();
    }
}
